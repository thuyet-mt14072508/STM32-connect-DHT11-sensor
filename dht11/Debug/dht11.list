
dht11.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c14  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004fc  08007d28  08007d28  00017d28  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008224  08008224  000201e0  2**0
                  CONTENTS
  4 .ARM          00000000  08008224  08008224  000201e0  2**0
                  CONTENTS
  5 .preinit_array 00000000  08008224  08008224  000201e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008224  08008224  00018224  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008228  08008228  00018228  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e0  20000000  0800822c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000e8  200001e0  0800840c  000201e0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  0800840c  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b79e  00000000  00000000  00020209  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001b97  00000000  00000000  0002b9a7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d28  00000000  00000000  0002d540  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000c68  00000000  00000000  0002e268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001858a  00000000  00000000  0002eed0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e5d1  00000000  00000000  0004745a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ba8c  00000000  00000000  00055a2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000e14b7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004cec  00000000  00000000  000e1508  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e0 	.word	0x200001e0
 800012c:	00000000 	.word	0x00000000
 8000130:	08007d0c 	.word	0x08007d0c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001e4 	.word	0x200001e4
 800014c:	08007d0c 	.word	0x08007d0c

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <__aeabi_d2uiz>:
 8000a88:	004a      	lsls	r2, r1, #1
 8000a8a:	d211      	bcs.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a8c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a90:	d211      	bcs.n	8000ab6 <__aeabi_d2uiz+0x2e>
 8000a92:	d50d      	bpl.n	8000ab0 <__aeabi_d2uiz+0x28>
 8000a94:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a98:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a9c:	d40e      	bmi.n	8000abc <__aeabi_d2uiz+0x34>
 8000a9e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000aa2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aa6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aaa:	fa23 f002 	lsr.w	r0, r3, r2
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aba:	d102      	bne.n	8000ac2 <__aeabi_d2uiz+0x3a>
 8000abc:	f04f 30ff 	mov.w	r0, #4294967295
 8000ac0:	4770      	bx	lr
 8000ac2:	f04f 0000 	mov.w	r0, #0
 8000ac6:	4770      	bx	lr

08000ac8 <__aeabi_d2f>:
 8000ac8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000acc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ad0:	bf24      	itt	cs
 8000ad2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000ad6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ada:	d90d      	bls.n	8000af8 <__aeabi_d2f+0x30>
 8000adc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ae0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ae4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ae8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000aec:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000af0:	bf08      	it	eq
 8000af2:	f020 0001 	biceq.w	r0, r0, #1
 8000af6:	4770      	bx	lr
 8000af8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000afc:	d121      	bne.n	8000b42 <__aeabi_d2f+0x7a>
 8000afe:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b02:	bfbc      	itt	lt
 8000b04:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b08:	4770      	bxlt	lr
 8000b0a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b0e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b12:	f1c2 0218 	rsb	r2, r2, #24
 8000b16:	f1c2 0c20 	rsb	ip, r2, #32
 8000b1a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b1e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b22:	bf18      	it	ne
 8000b24:	f040 0001 	orrne.w	r0, r0, #1
 8000b28:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b2c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b30:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b34:	ea40 000c 	orr.w	r0, r0, ip
 8000b38:	fa23 f302 	lsr.w	r3, r3, r2
 8000b3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b40:	e7cc      	b.n	8000adc <__aeabi_d2f+0x14>
 8000b42:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b46:	d107      	bne.n	8000b58 <__aeabi_d2f+0x90>
 8000b48:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b4c:	bf1e      	ittt	ne
 8000b4e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b52:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b56:	4770      	bxne	lr
 8000b58:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b5c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b60:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b64:	4770      	bx	lr
 8000b66:	bf00      	nop

08000b68 <__aeabi_frsub>:
 8000b68:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b6c:	e002      	b.n	8000b74 <__addsf3>
 8000b6e:	bf00      	nop

08000b70 <__aeabi_fsub>:
 8000b70:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b74 <__addsf3>:
 8000b74:	0042      	lsls	r2, r0, #1
 8000b76:	bf1f      	itttt	ne
 8000b78:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b7c:	ea92 0f03 	teqne	r2, r3
 8000b80:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b84:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b88:	d06a      	beq.n	8000c60 <__addsf3+0xec>
 8000b8a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b8e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b92:	bfc1      	itttt	gt
 8000b94:	18d2      	addgt	r2, r2, r3
 8000b96:	4041      	eorgt	r1, r0
 8000b98:	4048      	eorgt	r0, r1
 8000b9a:	4041      	eorgt	r1, r0
 8000b9c:	bfb8      	it	lt
 8000b9e:	425b      	neglt	r3, r3
 8000ba0:	2b19      	cmp	r3, #25
 8000ba2:	bf88      	it	hi
 8000ba4:	4770      	bxhi	lr
 8000ba6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000baa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bae:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000bb2:	bf18      	it	ne
 8000bb4:	4240      	negne	r0, r0
 8000bb6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bba:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bbe:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bc2:	bf18      	it	ne
 8000bc4:	4249      	negne	r1, r1
 8000bc6:	ea92 0f03 	teq	r2, r3
 8000bca:	d03f      	beq.n	8000c4c <__addsf3+0xd8>
 8000bcc:	f1a2 0201 	sub.w	r2, r2, #1
 8000bd0:	fa41 fc03 	asr.w	ip, r1, r3
 8000bd4:	eb10 000c 	adds.w	r0, r0, ip
 8000bd8:	f1c3 0320 	rsb	r3, r3, #32
 8000bdc:	fa01 f103 	lsl.w	r1, r1, r3
 8000be0:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000be4:	d502      	bpl.n	8000bec <__addsf3+0x78>
 8000be6:	4249      	negs	r1, r1
 8000be8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bec:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bf0:	d313      	bcc.n	8000c1a <__addsf3+0xa6>
 8000bf2:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bf6:	d306      	bcc.n	8000c06 <__addsf3+0x92>
 8000bf8:	0840      	lsrs	r0, r0, #1
 8000bfa:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bfe:	f102 0201 	add.w	r2, r2, #1
 8000c02:	2afe      	cmp	r2, #254	; 0xfe
 8000c04:	d251      	bcs.n	8000caa <__addsf3+0x136>
 8000c06:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c0a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c0e:	bf08      	it	eq
 8000c10:	f020 0001 	biceq.w	r0, r0, #1
 8000c14:	ea40 0003 	orr.w	r0, r0, r3
 8000c18:	4770      	bx	lr
 8000c1a:	0049      	lsls	r1, r1, #1
 8000c1c:	eb40 0000 	adc.w	r0, r0, r0
 8000c20:	3a01      	subs	r2, #1
 8000c22:	bf28      	it	cs
 8000c24:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c28:	d2ed      	bcs.n	8000c06 <__addsf3+0x92>
 8000c2a:	fab0 fc80 	clz	ip, r0
 8000c2e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c32:	ebb2 020c 	subs.w	r2, r2, ip
 8000c36:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c3a:	bfaa      	itet	ge
 8000c3c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c40:	4252      	neglt	r2, r2
 8000c42:	4318      	orrge	r0, r3
 8000c44:	bfbc      	itt	lt
 8000c46:	40d0      	lsrlt	r0, r2
 8000c48:	4318      	orrlt	r0, r3
 8000c4a:	4770      	bx	lr
 8000c4c:	f092 0f00 	teq	r2, #0
 8000c50:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c54:	bf06      	itte	eq
 8000c56:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c5a:	3201      	addeq	r2, #1
 8000c5c:	3b01      	subne	r3, #1
 8000c5e:	e7b5      	b.n	8000bcc <__addsf3+0x58>
 8000c60:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c64:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c68:	bf18      	it	ne
 8000c6a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c6e:	d021      	beq.n	8000cb4 <__addsf3+0x140>
 8000c70:	ea92 0f03 	teq	r2, r3
 8000c74:	d004      	beq.n	8000c80 <__addsf3+0x10c>
 8000c76:	f092 0f00 	teq	r2, #0
 8000c7a:	bf08      	it	eq
 8000c7c:	4608      	moveq	r0, r1
 8000c7e:	4770      	bx	lr
 8000c80:	ea90 0f01 	teq	r0, r1
 8000c84:	bf1c      	itt	ne
 8000c86:	2000      	movne	r0, #0
 8000c88:	4770      	bxne	lr
 8000c8a:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c8e:	d104      	bne.n	8000c9a <__addsf3+0x126>
 8000c90:	0040      	lsls	r0, r0, #1
 8000c92:	bf28      	it	cs
 8000c94:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c98:	4770      	bx	lr
 8000c9a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c9e:	bf3c      	itt	cc
 8000ca0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000ca4:	4770      	bxcc	lr
 8000ca6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000caa:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb2:	4770      	bx	lr
 8000cb4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000cb8:	bf16      	itet	ne
 8000cba:	4608      	movne	r0, r1
 8000cbc:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cc0:	4601      	movne	r1, r0
 8000cc2:	0242      	lsls	r2, r0, #9
 8000cc4:	bf06      	itte	eq
 8000cc6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cca:	ea90 0f01 	teqeq	r0, r1
 8000cce:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cd2:	4770      	bx	lr

08000cd4 <__aeabi_ui2f>:
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e004      	b.n	8000ce4 <__aeabi_i2f+0x8>
 8000cda:	bf00      	nop

08000cdc <__aeabi_i2f>:
 8000cdc:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000ce0:	bf48      	it	mi
 8000ce2:	4240      	negmi	r0, r0
 8000ce4:	ea5f 0c00 	movs.w	ip, r0
 8000ce8:	bf08      	it	eq
 8000cea:	4770      	bxeq	lr
 8000cec:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cf0:	4601      	mov	r1, r0
 8000cf2:	f04f 0000 	mov.w	r0, #0
 8000cf6:	e01c      	b.n	8000d32 <__aeabi_l2f+0x2a>

08000cf8 <__aeabi_ul2f>:
 8000cf8:	ea50 0201 	orrs.w	r2, r0, r1
 8000cfc:	bf08      	it	eq
 8000cfe:	4770      	bxeq	lr
 8000d00:	f04f 0300 	mov.w	r3, #0
 8000d04:	e00a      	b.n	8000d1c <__aeabi_l2f+0x14>
 8000d06:	bf00      	nop

08000d08 <__aeabi_l2f>:
 8000d08:	ea50 0201 	orrs.w	r2, r0, r1
 8000d0c:	bf08      	it	eq
 8000d0e:	4770      	bxeq	lr
 8000d10:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d14:	d502      	bpl.n	8000d1c <__aeabi_l2f+0x14>
 8000d16:	4240      	negs	r0, r0
 8000d18:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d1c:	ea5f 0c01 	movs.w	ip, r1
 8000d20:	bf02      	ittt	eq
 8000d22:	4684      	moveq	ip, r0
 8000d24:	4601      	moveq	r1, r0
 8000d26:	2000      	moveq	r0, #0
 8000d28:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d2c:	bf08      	it	eq
 8000d2e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d32:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d36:	fabc f28c 	clz	r2, ip
 8000d3a:	3a08      	subs	r2, #8
 8000d3c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d40:	db10      	blt.n	8000d64 <__aeabi_l2f+0x5c>
 8000d42:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d46:	4463      	add	r3, ip
 8000d48:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d4c:	f1c2 0220 	rsb	r2, r2, #32
 8000d50:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d54:	fa20 f202 	lsr.w	r2, r0, r2
 8000d58:	eb43 0002 	adc.w	r0, r3, r2
 8000d5c:	bf08      	it	eq
 8000d5e:	f020 0001 	biceq.w	r0, r0, #1
 8000d62:	4770      	bx	lr
 8000d64:	f102 0220 	add.w	r2, r2, #32
 8000d68:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d6c:	f1c2 0220 	rsb	r2, r2, #32
 8000d70:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d74:	fa21 f202 	lsr.w	r2, r1, r2
 8000d78:	eb43 0002 	adc.w	r0, r3, r2
 8000d7c:	bf08      	it	eq
 8000d7e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d82:	4770      	bx	lr

08000d84 <__aeabi_d2lz>:
 8000d84:	b538      	push	{r3, r4, r5, lr}
 8000d86:	4605      	mov	r5, r0
 8000d88:	460c      	mov	r4, r1
 8000d8a:	2200      	movs	r2, #0
 8000d8c:	2300      	movs	r3, #0
 8000d8e:	4628      	mov	r0, r5
 8000d90:	4621      	mov	r1, r4
 8000d92:	f7ff fe13 	bl	80009bc <__aeabi_dcmplt>
 8000d96:	b928      	cbnz	r0, 8000da4 <__aeabi_d2lz+0x20>
 8000d98:	4628      	mov	r0, r5
 8000d9a:	4621      	mov	r1, r4
 8000d9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000da0:	f000 b80a 	b.w	8000db8 <__aeabi_d2ulz>
 8000da4:	4628      	mov	r0, r5
 8000da6:	f104 4100 	add.w	r1, r4, #2147483648	; 0x80000000
 8000daa:	f000 f805 	bl	8000db8 <__aeabi_d2ulz>
 8000dae:	4240      	negs	r0, r0
 8000db0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000db4:	bd38      	pop	{r3, r4, r5, pc}
 8000db6:	bf00      	nop

08000db8 <__aeabi_d2ulz>:
 8000db8:	b5d0      	push	{r4, r6, r7, lr}
 8000dba:	2200      	movs	r2, #0
 8000dbc:	4b0b      	ldr	r3, [pc, #44]	; (8000dec <__aeabi_d2ulz+0x34>)
 8000dbe:	4606      	mov	r6, r0
 8000dc0:	460f      	mov	r7, r1
 8000dc2:	f7ff fb89 	bl	80004d8 <__aeabi_dmul>
 8000dc6:	f7ff fe5f 	bl	8000a88 <__aeabi_d2uiz>
 8000dca:	4604      	mov	r4, r0
 8000dcc:	f7ff fb0a 	bl	80003e4 <__aeabi_ui2d>
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4b07      	ldr	r3, [pc, #28]	; (8000df0 <__aeabi_d2ulz+0x38>)
 8000dd4:	f7ff fb80 	bl	80004d8 <__aeabi_dmul>
 8000dd8:	4602      	mov	r2, r0
 8000dda:	460b      	mov	r3, r1
 8000ddc:	4630      	mov	r0, r6
 8000dde:	4639      	mov	r1, r7
 8000de0:	f7ff f9c2 	bl	8000168 <__aeabi_dsub>
 8000de4:	f7ff fe50 	bl	8000a88 <__aeabi_d2uiz>
 8000de8:	4621      	mov	r1, r4
 8000dea:	bdd0      	pop	{r4, r6, r7, pc}
 8000dec:	3df00000 	.word	0x3df00000
 8000df0:	41f00000 	.word	0x41f00000

08000df4 <lcd_send_cmd>:
extern I2C_HandleTypeDef hi2c1;  // change your handler here accordingly

#define SLAVE_ADDRESS_LCD 0x4E // change this according to ur setup

void lcd_send_cmd (char cmd)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	b086      	sub	sp, #24
 8000df8:	af02      	add	r7, sp, #8
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	71fb      	strb	r3, [r7, #7]
  char data_u, data_l;
	uint8_t data_t[4];
	data_u = (cmd&0xf0);
 8000dfe:	79fb      	ldrb	r3, [r7, #7]
 8000e00:	f023 030f 	bic.w	r3, r3, #15
 8000e04:	73fb      	strb	r3, [r7, #15]
	data_l = ((cmd<<4)&0xf0);
 8000e06:	79fb      	ldrb	r3, [r7, #7]
 8000e08:	011b      	lsls	r3, r3, #4
 8000e0a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0C;  //en=1, rs=0
 8000e0c:	7bfb      	ldrb	r3, [r7, #15]
 8000e0e:	f043 030c 	orr.w	r3, r3, #12
 8000e12:	b2db      	uxtb	r3, r3
 8000e14:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x08;  //en=0, rs=0
 8000e16:	7bfb      	ldrb	r3, [r7, #15]
 8000e18:	f043 0308 	orr.w	r3, r3, #8
 8000e1c:	b2db      	uxtb	r3, r3
 8000e1e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0C;  //en=1, rs=0
 8000e20:	7bbb      	ldrb	r3, [r7, #14]
 8000e22:	f043 030c 	orr.w	r3, r3, #12
 8000e26:	b2db      	uxtb	r3, r3
 8000e28:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x08;  //en=0, rs=0
 8000e2a:	7bbb      	ldrb	r3, [r7, #14]
 8000e2c:	f043 0308 	orr.w	r3, r3, #8
 8000e30:	b2db      	uxtb	r3, r3
 8000e32:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e34:	f107 0208 	add.w	r2, r7, #8
 8000e38:	2364      	movs	r3, #100	; 0x64
 8000e3a:	9300      	str	r3, [sp, #0]
 8000e3c:	2304      	movs	r3, #4
 8000e3e:	214e      	movs	r1, #78	; 0x4e
 8000e40:	4803      	ldr	r0, [pc, #12]	; (8000e50 <lcd_send_cmd+0x5c>)
 8000e42:	f001 f941 	bl	80020c8 <HAL_I2C_Master_Transmit>
}
 8000e46:	bf00      	nop
 8000e48:	3710      	adds	r7, #16
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	200001fc 	.word	0x200001fc

08000e54 <lcd_send_data>:

void lcd_send_data (char data)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b086      	sub	sp, #24
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	71fb      	strb	r3, [r7, #7]
	char data_u, data_l;
	uint8_t data_t[4];
	data_u = (data&0xf0);
 8000e5e:	79fb      	ldrb	r3, [r7, #7]
 8000e60:	f023 030f 	bic.w	r3, r3, #15
 8000e64:	73fb      	strb	r3, [r7, #15]
	data_l = ((data<<4)&0xf0);
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	011b      	lsls	r3, r3, #4
 8000e6a:	73bb      	strb	r3, [r7, #14]
	data_t[0] = data_u|0x0D;  //en=1, rs=0
 8000e6c:	7bfb      	ldrb	r3, [r7, #15]
 8000e6e:	f043 030d 	orr.w	r3, r3, #13
 8000e72:	b2db      	uxtb	r3, r3
 8000e74:	723b      	strb	r3, [r7, #8]
	data_t[1] = data_u|0x09;  //en=0, rs=0
 8000e76:	7bfb      	ldrb	r3, [r7, #15]
 8000e78:	f043 0309 	orr.w	r3, r3, #9
 8000e7c:	b2db      	uxtb	r3, r3
 8000e7e:	727b      	strb	r3, [r7, #9]
	data_t[2] = data_l|0x0D;  //en=1, rs=0
 8000e80:	7bbb      	ldrb	r3, [r7, #14]
 8000e82:	f043 030d 	orr.w	r3, r3, #13
 8000e86:	b2db      	uxtb	r3, r3
 8000e88:	72bb      	strb	r3, [r7, #10]
	data_t[3] = data_l|0x09;  //en=0, rs=0
 8000e8a:	7bbb      	ldrb	r3, [r7, #14]
 8000e8c:	f043 0309 	orr.w	r3, r3, #9
 8000e90:	b2db      	uxtb	r3, r3
 8000e92:	72fb      	strb	r3, [r7, #11]
	HAL_I2C_Master_Transmit (&hi2c1, SLAVE_ADDRESS_LCD,(uint8_t *) data_t, 4, 100);
 8000e94:	f107 0208 	add.w	r2, r7, #8
 8000e98:	2364      	movs	r3, #100	; 0x64
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2304      	movs	r3, #4
 8000e9e:	214e      	movs	r1, #78	; 0x4e
 8000ea0:	4803      	ldr	r0, [pc, #12]	; (8000eb0 <lcd_send_data+0x5c>)
 8000ea2:	f001 f911 	bl	80020c8 <HAL_I2C_Master_Transmit>
}
 8000ea6:	bf00      	nop
 8000ea8:	3710      	adds	r7, #16
 8000eaa:	46bd      	mov	sp, r7
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200001fc 	.word	0x200001fc

08000eb4 <lcd_init>:

void lcd_init (void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x33); /* set 4-bits interface */
 8000eb8:	2033      	movs	r0, #51	; 0x33
 8000eba:	f7ff ff9b 	bl	8000df4 <lcd_send_cmd>
	lcd_send_cmd (0x32);
 8000ebe:	2032      	movs	r0, #50	; 0x32
 8000ec0:	f7ff ff98 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(50);
 8000ec4:	2032      	movs	r0, #50	; 0x32
 8000ec6:	f000 fcff 	bl	80018c8 <HAL_Delay>
	lcd_send_cmd (0x28); /* start to set LCD function */
 8000eca:	2028      	movs	r0, #40	; 0x28
 8000ecc:	f7ff ff92 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(50);
 8000ed0:	2032      	movs	r0, #50	; 0x32
 8000ed2:	f000 fcf9 	bl	80018c8 <HAL_Delay>
	lcd_send_cmd (0x01); /* clear display */
 8000ed6:	2001      	movs	r0, #1
 8000ed8:	f7ff ff8c 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(50);
 8000edc:	2032      	movs	r0, #50	; 0x32
 8000ede:	f000 fcf3 	bl	80018c8 <HAL_Delay>
	lcd_send_cmd (0x06); /* set entry mode */
 8000ee2:	2006      	movs	r0, #6
 8000ee4:	f7ff ff86 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(50);
 8000ee8:	2032      	movs	r0, #50	; 0x32
 8000eea:	f000 fced 	bl	80018c8 <HAL_Delay>
	lcd_send_cmd (0x0c); /* set display to on */	
 8000eee:	200c      	movs	r0, #12
 8000ef0:	f7ff ff80 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(50);
 8000ef4:	2032      	movs	r0, #50	; 0x32
 8000ef6:	f000 fce7 	bl	80018c8 <HAL_Delay>
	lcd_send_cmd (0x02); /* move cursor to home and set data address to 0 */
 8000efa:	2002      	movs	r0, #2
 8000efc:	f7ff ff7a 	bl	8000df4 <lcd_send_cmd>
	HAL_Delay(50);
 8000f00:	2032      	movs	r0, #50	; 0x32
 8000f02:	f000 fce1 	bl	80018c8 <HAL_Delay>
	lcd_send_cmd (0x80);
 8000f06:	2080      	movs	r0, #128	; 0x80
 8000f08:	f7ff ff74 	bl	8000df4 <lcd_send_cmd>
}
 8000f0c:	bf00      	nop
 8000f0e:	bd80      	pop	{r7, pc}

08000f10 <lcd_send_string>:

void lcd_send_string (char *str)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	b082      	sub	sp, #8
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	6078      	str	r0, [r7, #4]
	while (*str) lcd_send_data (*str++);
 8000f18:	e006      	b.n	8000f28 <lcd_send_string+0x18>
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	1c5a      	adds	r2, r3, #1
 8000f1e:	607a      	str	r2, [r7, #4]
 8000f20:	781b      	ldrb	r3, [r3, #0]
 8000f22:	4618      	mov	r0, r3
 8000f24:	f7ff ff96 	bl	8000e54 <lcd_send_data>
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	781b      	ldrb	r3, [r3, #0]
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d1f4      	bne.n	8000f1a <lcd_send_string+0xa>
}
 8000f30:	bf00      	nop
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}

08000f3a <lcd_clear_display>:

void lcd_clear_display (void)
{
 8000f3a:	b580      	push	{r7, lr}
 8000f3c:	af00      	add	r7, sp, #0
	lcd_send_cmd (0x01); //clear display
 8000f3e:	2001      	movs	r0, #1
 8000f40:	f7ff ff58 	bl	8000df4 <lcd_send_cmd>
}
 8000f44:	bf00      	nop
 8000f46:	bd80      	pop	{r7, pc}

08000f48 <lcd_goto_XY>:

void lcd_goto_XY (int row, int col)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b084      	sub	sp, #16
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
 8000f50:	6039      	str	r1, [r7, #0]
	uint8_t pos_Addr;
	if(row == 1) 
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	2b01      	cmp	r3, #1
 8000f56:	d108      	bne.n	8000f6a <lcd_goto_XY+0x22>
	{
		pos_Addr = 0x80 + row - 1 + col;
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	b2db      	uxtb	r3, r3
 8000f60:	4413      	add	r3, r2
 8000f62:	b2db      	uxtb	r3, r3
 8000f64:	337f      	adds	r3, #127	; 0x7f
 8000f66:	73fb      	strb	r3, [r7, #15]
 8000f68:	e008      	b.n	8000f7c <lcd_goto_XY+0x34>
	}
	else
	{
		pos_Addr = 0x80 | (0x40 + col);
 8000f6a:	683b      	ldr	r3, [r7, #0]
 8000f6c:	b2db      	uxtb	r3, r3
 8000f6e:	3340      	adds	r3, #64	; 0x40
 8000f70:	b2db      	uxtb	r3, r3
 8000f72:	b25b      	sxtb	r3, r3
 8000f74:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000f78:	b25b      	sxtb	r3, r3
 8000f7a:	73fb      	strb	r3, [r7, #15]
	}
	lcd_send_cmd(pos_Addr);
 8000f7c:	7bfb      	ldrb	r3, [r7, #15]
 8000f7e:	4618      	mov	r0, r3
 8000f80:	f7ff ff38 	bl	8000df4 <lcd_send_cmd>
}
 8000f84:	bf00      	nop
 8000f86:	3710      	adds	r7, #16
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bd80      	pop	{r7, pc}

08000f8c <Display_Temp>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void Display_Temp (float Temp)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	b088      	sub	sp, #32
 8000f90:	af00      	add	r7, sp, #0
 8000f92:	6078      	str	r0, [r7, #4]
	char str[20] = {0};
 8000f94:	2300      	movs	r3, #0
 8000f96:	60fb      	str	r3, [r7, #12]
 8000f98:	f107 0310 	add.w	r3, r7, #16
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]
	lcd_goto_XY(0, 0);
 8000fa6:	2100      	movs	r1, #0
 8000fa8:	2000      	movs	r0, #0
 8000faa:	f7ff ffcd 	bl	8000f48 <lcd_goto_XY>

	sprintf (str, "TEMP:- %.2f ", Temp);
 8000fae:	6878      	ldr	r0, [r7, #4]
 8000fb0:	f7ff fa3a 	bl	8000428 <__aeabi_f2d>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	f107 000c 	add.w	r0, r7, #12
 8000fbc:	4907      	ldr	r1, [pc, #28]	; (8000fdc <Display_Temp+0x50>)
 8000fbe:	f003 f8e7 	bl	8004190 <siprintf>
	lcd_send_string(str);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	f7ff ffa2 	bl	8000f10 <lcd_send_string>
	lcd_send_data('C');
 8000fcc:	2043      	movs	r0, #67	; 0x43
 8000fce:	f7ff ff41 	bl	8000e54 <lcd_send_data>
}
 8000fd2:	bf00      	nop
 8000fd4:	3720      	adds	r7, #32
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	08007d28 	.word	0x08007d28

08000fe0 <Display_Rh>:

void Display_Rh (float Rh)
{
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b088      	sub	sp, #32
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	6078      	str	r0, [r7, #4]
	char str[20] = {0};
 8000fe8:	2300      	movs	r3, #0
 8000fea:	60fb      	str	r3, [r7, #12]
 8000fec:	f107 0310 	add.w	r3, r7, #16
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	601a      	str	r2, [r3, #0]
 8000ff4:	605a      	str	r2, [r3, #4]
 8000ff6:	609a      	str	r2, [r3, #8]
 8000ff8:	60da      	str	r2, [r3, #12]
	lcd_goto_XY(1, 0);
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	2001      	movs	r0, #1
 8000ffe:	f7ff ffa3 	bl	8000f48 <lcd_goto_XY>

	sprintf (str, "RH:- %.2f ", Rh);
 8001002:	6878      	ldr	r0, [r7, #4]
 8001004:	f7ff fa10 	bl	8000428 <__aeabi_f2d>
 8001008:	4602      	mov	r2, r0
 800100a:	460b      	mov	r3, r1
 800100c:	f107 000c 	add.w	r0, r7, #12
 8001010:	4907      	ldr	r1, [pc, #28]	; (8001030 <Display_Rh+0x50>)
 8001012:	f003 f8bd 	bl	8004190 <siprintf>
	lcd_send_string(str);
 8001016:	f107 030c 	add.w	r3, r7, #12
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff78 	bl	8000f10 <lcd_send_string>
	lcd_send_data('%');
 8001020:	2025      	movs	r0, #37	; 0x25
 8001022:	f7ff ff17 	bl	8000e54 <lcd_send_data>
}
 8001026:	bf00      	nop
 8001028:	3720      	adds	r7, #32
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	08007d38 	.word	0x08007d38

08001034 <Set_Pin_Output>:
float Temperature = 0;
float Humidity = 0;
uint8_t Presence = 0;

void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b086      	sub	sp, #24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	460b      	mov	r3, r1
 800103e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001040:	f107 0308 	add.w	r3, r7, #8
 8001044:	2200      	movs	r2, #0
 8001046:	601a      	str	r2, [r3, #0]
 8001048:	605a      	str	r2, [r3, #4]
 800104a:	609a      	str	r2, [r3, #8]
 800104c:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 800104e:	887b      	ldrh	r3, [r7, #2]
 8001050:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001052:	2301      	movs	r3, #1
 8001054:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001056:	2302      	movs	r3, #2
 8001058:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	4619      	mov	r1, r3
 8001060:	6878      	ldr	r0, [r7, #4]
 8001062:	f000 fd39 	bl	8001ad8 <HAL_GPIO_Init>
}
 8001066:	bf00      	nop
 8001068:	3718      	adds	r7, #24
 800106a:	46bd      	mov	sp, r7
 800106c:	bd80      	pop	{r7, pc}

0800106e <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800106e:	b580      	push	{r7, lr}
 8001070:	b086      	sub	sp, #24
 8001072:	af00      	add	r7, sp, #0
 8001074:	6078      	str	r0, [r7, #4]
 8001076:	460b      	mov	r3, r1
 8001078:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800107a:	f107 0308 	add.w	r3, r7, #8
 800107e:	2200      	movs	r2, #0
 8001080:	601a      	str	r2, [r3, #0]
 8001082:	605a      	str	r2, [r3, #4]
 8001084:	609a      	str	r2, [r3, #8]
 8001086:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 8001088:	887b      	ldrh	r3, [r7, #2]
 800108a:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800108c:	2300      	movs	r3, #0
 800108e:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001090:	2301      	movs	r3, #1
 8001092:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 8001094:	f107 0308 	add.w	r3, r7, #8
 8001098:	4619      	mov	r1, r3
 800109a:	6878      	ldr	r0, [r7, #4]
 800109c:	f000 fd1c 	bl	8001ad8 <HAL_GPIO_Init>
}
 80010a0:	bf00      	nop
 80010a2:	3718      	adds	r7, #24
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <DHT11_Start>:
#define DHT11_PORT GPIOA
#define DHT11_PIN GPIO_PIN_1

void DHT11_Start (void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	af00      	add	r7, sp, #0
	Set_Pin_Output (DHT11_PORT, DHT11_PIN);  // set the pin as output
 80010ac:	2102      	movs	r1, #2
 80010ae:	480d      	ldr	r0, [pc, #52]	; (80010e4 <DHT11_Start+0x3c>)
 80010b0:	f7ff ffc0 	bl	8001034 <Set_Pin_Output>
	HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 0);   // pull the pin low
 80010b4:	2200      	movs	r2, #0
 80010b6:	2102      	movs	r1, #2
 80010b8:	480a      	ldr	r0, [pc, #40]	; (80010e4 <DHT11_Start+0x3c>)
 80010ba:	f000 fea8 	bl	8001e0e <HAL_GPIO_WritePin>
	delay_us(18000);   // wait for 18ms
 80010be:	f244 6050 	movw	r0, #18000	; 0x4650
 80010c2:	f000 f9ef 	bl	80014a4 <delay_us>
    HAL_GPIO_WritePin (DHT11_PORT, DHT11_PIN, 1);   // pull the pin high
 80010c6:	2201      	movs	r2, #1
 80010c8:	2102      	movs	r1, #2
 80010ca:	4806      	ldr	r0, [pc, #24]	; (80010e4 <DHT11_Start+0x3c>)
 80010cc:	f000 fe9f 	bl	8001e0e <HAL_GPIO_WritePin>
    delay_us(20);   // wait for 20us
 80010d0:	2014      	movs	r0, #20
 80010d2:	f000 f9e7 	bl	80014a4 <delay_us>
	Set_Pin_Input(DHT11_PORT, DHT11_PIN);    // set as input
 80010d6:	2102      	movs	r1, #2
 80010d8:	4802      	ldr	r0, [pc, #8]	; (80010e4 <DHT11_Start+0x3c>)
 80010da:	f7ff ffc8 	bl	800106e <Set_Pin_Input>
}
 80010de:	bf00      	nop
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	40010800 	.word	0x40010800

080010e8 <DHT11_Check_Response>:

uint8_t DHT11_Check_Response (void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80010ee:	2300      	movs	r3, #0
 80010f0:	71fb      	strb	r3, [r7, #7]
	delay_us(40);
 80010f2:	2028      	movs	r0, #40	; 0x28
 80010f4:	f000 f9d6 	bl	80014a4 <delay_us>
	if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))
 80010f8:	2102      	movs	r1, #2
 80010fa:	4811      	ldr	r0, [pc, #68]	; (8001140 <DHT11_Check_Response+0x58>)
 80010fc:	f000 fe70 	bl	8001de0 <HAL_GPIO_ReadPin>
 8001100:	4603      	mov	r3, r0
 8001102:	2b00      	cmp	r3, #0
 8001104:	d10e      	bne.n	8001124 <DHT11_Check_Response+0x3c>
	{
		delay_us(80);
 8001106:	2050      	movs	r0, #80	; 0x50
 8001108:	f000 f9cc 	bl	80014a4 <delay_us>
		if ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN))) Response = 1;
 800110c:	2102      	movs	r1, #2
 800110e:	480c      	ldr	r0, [pc, #48]	; (8001140 <DHT11_Check_Response+0x58>)
 8001110:	f000 fe66 	bl	8001de0 <HAL_GPIO_ReadPin>
 8001114:	4603      	mov	r3, r0
 8001116:	2b00      	cmp	r3, #0
 8001118:	d002      	beq.n	8001120 <DHT11_Check_Response+0x38>
 800111a:	2301      	movs	r3, #1
 800111c:	71fb      	strb	r3, [r7, #7]
 800111e:	e001      	b.n	8001124 <DHT11_Check_Response+0x3c>
		else Response = -1; // 255
 8001120:	23ff      	movs	r3, #255	; 0xff
 8001122:	71fb      	strb	r3, [r7, #7]
	}
	while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go low
 8001124:	bf00      	nop
 8001126:	2102      	movs	r1, #2
 8001128:	4805      	ldr	r0, [pc, #20]	; (8001140 <DHT11_Check_Response+0x58>)
 800112a:	f000 fe59 	bl	8001de0 <HAL_GPIO_ReadPin>
 800112e:	4603      	mov	r3, r0
 8001130:	2b00      	cmp	r3, #0
 8001132:	d1f8      	bne.n	8001126 <DHT11_Check_Response+0x3e>

	return Response;
 8001134:	79fb      	ldrb	r3, [r7, #7]
}
 8001136:	4618      	mov	r0, r3
 8001138:	3708      	adds	r7, #8
 800113a:	46bd      	mov	sp, r7
 800113c:	bd80      	pop	{r7, pc}
 800113e:	bf00      	nop
 8001140:	40010800 	.word	0x40010800

08001144 <DHT11_Read>:

uint8_t DHT11_Read (void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
	uint8_t i,j;
	for (j=0;j<8;j++)
 800114a:	2300      	movs	r3, #0
 800114c:	71bb      	strb	r3, [r7, #6]
 800114e:	e037      	b.n	80011c0 <DHT11_Read+0x7c>
	{
		while (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));   // wait for the pin to go high
 8001150:	bf00      	nop
 8001152:	2102      	movs	r1, #2
 8001154:	481e      	ldr	r0, [pc, #120]	; (80011d0 <DHT11_Read+0x8c>)
 8001156:	f000 fe43 	bl	8001de0 <HAL_GPIO_ReadPin>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d0f8      	beq.n	8001152 <DHT11_Read+0xe>
		delay_us (40);   // wait for 40 us
 8001160:	2028      	movs	r0, #40	; 0x28
 8001162:	f000 f99f 	bl	80014a4 <delay_us>
		if (!(HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)))   // if the pin is low
 8001166:	2102      	movs	r1, #2
 8001168:	4819      	ldr	r0, [pc, #100]	; (80011d0 <DHT11_Read+0x8c>)
 800116a:	f000 fe39 	bl	8001de0 <HAL_GPIO_ReadPin>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d10e      	bne.n	8001192 <DHT11_Read+0x4e>
		{
			i&= ~(1<<(7-j));   // write 0
 8001174:	79bb      	ldrb	r3, [r7, #6]
 8001176:	f1c3 0307 	rsb	r3, r3, #7
 800117a:	2201      	movs	r2, #1
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	b25b      	sxtb	r3, r3
 8001182:	43db      	mvns	r3, r3
 8001184:	b25a      	sxtb	r2, r3
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	4013      	ands	r3, r2
 800118c:	b25b      	sxtb	r3, r3
 800118e:	71fb      	strb	r3, [r7, #7]
 8001190:	e00b      	b.n	80011aa <DHT11_Read+0x66>
		}
		else i|= (1<<(7-j));  // if the pin is high, write 1
 8001192:	79bb      	ldrb	r3, [r7, #6]
 8001194:	f1c3 0307 	rsb	r3, r3, #7
 8001198:	2201      	movs	r2, #1
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	b25a      	sxtb	r2, r3
 80011a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a4:	4313      	orrs	r3, r2
 80011a6:	b25b      	sxtb	r3, r3
 80011a8:	71fb      	strb	r3, [r7, #7]
		while ((HAL_GPIO_ReadPin (DHT11_PORT, DHT11_PIN)));  // wait for the pin to go low
 80011aa:	bf00      	nop
 80011ac:	2102      	movs	r1, #2
 80011ae:	4808      	ldr	r0, [pc, #32]	; (80011d0 <DHT11_Read+0x8c>)
 80011b0:	f000 fe16 	bl	8001de0 <HAL_GPIO_ReadPin>
 80011b4:	4603      	mov	r3, r0
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f8      	bne.n	80011ac <DHT11_Read+0x68>
	for (j=0;j<8;j++)
 80011ba:	79bb      	ldrb	r3, [r7, #6]
 80011bc:	3301      	adds	r3, #1
 80011be:	71bb      	strb	r3, [r7, #6]
 80011c0:	79bb      	ldrb	r3, [r7, #6]
 80011c2:	2b07      	cmp	r3, #7
 80011c4:	d9c4      	bls.n	8001150 <DHT11_Read+0xc>
	}
	return i;
 80011c6:	79fb      	ldrb	r3, [r7, #7]
}
 80011c8:	4618      	mov	r0, r3
 80011ca:	3708      	adds	r7, #8
 80011cc:	46bd      	mov	sp, r7
 80011ce:	bd80      	pop	{r7, pc}
 80011d0:	40010800 	.word	0x40010800

080011d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011d8:	f000 fb14 	bl	8001804 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011dc:	f000 f87c 	bl	80012d8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011e0:	f000 f93e 	bl	8001460 <MX_GPIO_Init>
  MX_TIM1_Init();
 80011e4:	f000 f8ec 	bl	80013c0 <MX_TIM1_Init>
  MX_I2C1_Init();
 80011e8:	f000 f8bc 	bl	8001364 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim1);
 80011ec:	482e      	ldr	r0, [pc, #184]	; (80012a8 <main+0xd4>)
 80011ee:	f001 fec7 	bl	8002f80 <HAL_TIM_Base_Start>
  lcd_init();
 80011f2:	f7ff fe5f 	bl	8000eb4 <lcd_init>
  lcd_send_string("INITIALISING>>>>");
 80011f6:	482d      	ldr	r0, [pc, #180]	; (80012ac <main+0xd8>)
 80011f8:	f7ff fe8a 	bl	8000f10 <lcd_send_string>
  HAL_Delay(2000);
 80011fc:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001200:	f000 fb62 	bl	80018c8 <HAL_Delay>
  lcd_clear_display();
 8001204:	f7ff fe99 	bl	8000f3a <lcd_clear_display>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  Display_Temp(Temperature);
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <main+0xdc>)
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff febd 	bl	8000f8c <Display_Temp>
	  Display_Rh(Humidity);
 8001212:	4b28      	ldr	r3, [pc, #160]	; (80012b4 <main+0xe0>)
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4618      	mov	r0, r3
 8001218:	f7ff fee2 	bl	8000fe0 <Display_Rh>
	  DHT11_Start();
 800121c:	f7ff ff44 	bl	80010a8 <DHT11_Start>
	  Presence = DHT11_Check_Response();
 8001220:	f7ff ff62 	bl	80010e8 <DHT11_Check_Response>
 8001224:	4603      	mov	r3, r0
 8001226:	461a      	mov	r2, r3
 8001228:	4b23      	ldr	r3, [pc, #140]	; (80012b8 <main+0xe4>)
 800122a:	701a      	strb	r2, [r3, #0]
	  Rh_byte1 = DHT11_Read ();
 800122c:	f7ff ff8a 	bl	8001144 <DHT11_Read>
 8001230:	4603      	mov	r3, r0
 8001232:	461a      	mov	r2, r3
 8001234:	4b21      	ldr	r3, [pc, #132]	; (80012bc <main+0xe8>)
 8001236:	701a      	strb	r2, [r3, #0]
	  Rh_byte2 = DHT11_Read ();
 8001238:	f7ff ff84 	bl	8001144 <DHT11_Read>
 800123c:	4603      	mov	r3, r0
 800123e:	461a      	mov	r2, r3
 8001240:	4b1f      	ldr	r3, [pc, #124]	; (80012c0 <main+0xec>)
 8001242:	701a      	strb	r2, [r3, #0]
	  Temp_byte1 = DHT11_Read ();
 8001244:	f7ff ff7e 	bl	8001144 <DHT11_Read>
 8001248:	4603      	mov	r3, r0
 800124a:	461a      	mov	r2, r3
 800124c:	4b1d      	ldr	r3, [pc, #116]	; (80012c4 <main+0xf0>)
 800124e:	701a      	strb	r2, [r3, #0]
	  Temp_byte2 = DHT11_Read ();
 8001250:	f7ff ff78 	bl	8001144 <DHT11_Read>
 8001254:	4603      	mov	r3, r0
 8001256:	461a      	mov	r2, r3
 8001258:	4b1b      	ldr	r3, [pc, #108]	; (80012c8 <main+0xf4>)
 800125a:	701a      	strb	r2, [r3, #0]
	  SUM = DHT11_Read();
 800125c:	f7ff ff72 	bl	8001144 <DHT11_Read>
 8001260:	4603      	mov	r3, r0
 8001262:	b29a      	uxth	r2, r3
 8001264:	4b19      	ldr	r3, [pc, #100]	; (80012cc <main+0xf8>)
 8001266:	801a      	strh	r2, [r3, #0]
	  TEMP = Temp_byte1;
 8001268:	4b16      	ldr	r3, [pc, #88]	; (80012c4 <main+0xf0>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	b29a      	uxth	r2, r3
 800126e:	4b18      	ldr	r3, [pc, #96]	; (80012d0 <main+0xfc>)
 8001270:	801a      	strh	r2, [r3, #0]
	  RH = Rh_byte1;
 8001272:	4b12      	ldr	r3, [pc, #72]	; (80012bc <main+0xe8>)
 8001274:	781b      	ldrb	r3, [r3, #0]
 8001276:	b29a      	uxth	r2, r3
 8001278:	4b16      	ldr	r3, [pc, #88]	; (80012d4 <main+0x100>)
 800127a:	801a      	strh	r2, [r3, #0]
	  Temperature = (float) TEMP;
 800127c:	4b14      	ldr	r3, [pc, #80]	; (80012d0 <main+0xfc>)
 800127e:	881b      	ldrh	r3, [r3, #0]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff fd27 	bl	8000cd4 <__aeabi_ui2f>
 8001286:	4603      	mov	r3, r0
 8001288:	4a09      	ldr	r2, [pc, #36]	; (80012b0 <main+0xdc>)
 800128a:	6013      	str	r3, [r2, #0]
	  Humidity = (float) RH;
 800128c:	4b11      	ldr	r3, [pc, #68]	; (80012d4 <main+0x100>)
 800128e:	881b      	ldrh	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff fd1f 	bl	8000cd4 <__aeabi_ui2f>
 8001296:	4603      	mov	r3, r0
 8001298:	4a06      	ldr	r2, [pc, #24]	; (80012b4 <main+0xe0>)
 800129a:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 800129c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80012a0:	f000 fb12 	bl	80018c8 <HAL_Delay>
	  Display_Temp(Temperature);
 80012a4:	e7b0      	b.n	8001208 <main+0x34>
 80012a6:	bf00      	nop
 80012a8:	20000250 	.word	0x20000250
 80012ac:	08007d44 	.word	0x08007d44
 80012b0:	200002a4 	.word	0x200002a4
 80012b4:	200002a8 	.word	0x200002a8
 80012b8:	200002ac 	.word	0x200002ac
 80012bc:	20000298 	.word	0x20000298
 80012c0:	20000299 	.word	0x20000299
 80012c4:	2000029a 	.word	0x2000029a
 80012c8:	2000029b 	.word	0x2000029b
 80012cc:	2000029c 	.word	0x2000029c
 80012d0:	200002a0 	.word	0x200002a0
 80012d4:	2000029e 	.word	0x2000029e

080012d8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012d8:	b580      	push	{r7, lr}
 80012da:	b090      	sub	sp, #64	; 0x40
 80012dc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012de:	f107 0318 	add.w	r3, r7, #24
 80012e2:	2228      	movs	r2, #40	; 0x28
 80012e4:	2100      	movs	r1, #0
 80012e6:	4618      	mov	r0, r3
 80012e8:	f002 f8d8 	bl	800349c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012ec:	1d3b      	adds	r3, r7, #4
 80012ee:	2200      	movs	r2, #0
 80012f0:	601a      	str	r2, [r3, #0]
 80012f2:	605a      	str	r2, [r3, #4]
 80012f4:	609a      	str	r2, [r3, #8]
 80012f6:	60da      	str	r2, [r3, #12]
 80012f8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012fa:	2301      	movs	r3, #1
 80012fc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001302:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001308:	2301      	movs	r3, #1
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800130c:	2302      	movs	r3, #2
 800130e:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001310:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001314:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001316:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800131a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800131c:	f107 0318 	add.w	r3, r7, #24
 8001320:	4618      	mov	r0, r3
 8001322:	f001 f9d7 	bl	80026d4 <HAL_RCC_OscConfig>
 8001326:	4603      	mov	r3, r0
 8001328:	2b00      	cmp	r3, #0
 800132a:	d001      	beq.n	8001330 <SystemClock_Config+0x58>
  {
    Error_Handler();
 800132c:	f000 f8d2 	bl	80014d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001330:	230f      	movs	r3, #15
 8001332:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001334:	2302      	movs	r3, #2
 8001336:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001338:	2300      	movs	r3, #0
 800133a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800133c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001340:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001342:	2300      	movs	r3, #0
 8001344:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001346:	1d3b      	adds	r3, r7, #4
 8001348:	2102      	movs	r1, #2
 800134a:	4618      	mov	r0, r3
 800134c:	f001 fc44 	bl	8002bd8 <HAL_RCC_ClockConfig>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <SystemClock_Config+0x82>
  {
    Error_Handler();
 8001356:	f000 f8bd 	bl	80014d4 <Error_Handler>
  }
}
 800135a:	bf00      	nop
 800135c:	3740      	adds	r7, #64	; 0x40
 800135e:	46bd      	mov	sp, r7
 8001360:	bd80      	pop	{r7, pc}
	...

08001364 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001368:	4b12      	ldr	r3, [pc, #72]	; (80013b4 <MX_I2C1_Init+0x50>)
 800136a:	4a13      	ldr	r2, [pc, #76]	; (80013b8 <MX_I2C1_Init+0x54>)
 800136c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800136e:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <MX_I2C1_Init+0x50>)
 8001370:	4a12      	ldr	r2, [pc, #72]	; (80013bc <MX_I2C1_Init+0x58>)
 8001372:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001374:	4b0f      	ldr	r3, [pc, #60]	; (80013b4 <MX_I2C1_Init+0x50>)
 8001376:	2200      	movs	r2, #0
 8001378:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800137a:	4b0e      	ldr	r3, [pc, #56]	; (80013b4 <MX_I2C1_Init+0x50>)
 800137c:	2200      	movs	r2, #0
 800137e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001380:	4b0c      	ldr	r3, [pc, #48]	; (80013b4 <MX_I2C1_Init+0x50>)
 8001382:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001386:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001388:	4b0a      	ldr	r3, [pc, #40]	; (80013b4 <MX_I2C1_Init+0x50>)
 800138a:	2200      	movs	r2, #0
 800138c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800138e:	4b09      	ldr	r3, [pc, #36]	; (80013b4 <MX_I2C1_Init+0x50>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001394:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <MX_I2C1_Init+0x50>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <MX_I2C1_Init+0x50>)
 800139c:	2200      	movs	r2, #0
 800139e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80013a0:	4804      	ldr	r0, [pc, #16]	; (80013b4 <MX_I2C1_Init+0x50>)
 80013a2:	f000 fd4d 	bl	8001e40 <HAL_I2C_Init>
 80013a6:	4603      	mov	r3, r0
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d001      	beq.n	80013b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80013ac:	f000 f892 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80013b0:	bf00      	nop
 80013b2:	bd80      	pop	{r7, pc}
 80013b4:	200001fc 	.word	0x200001fc
 80013b8:	40005400 	.word	0x40005400
 80013bc:	000186a0 	.word	0x000186a0

080013c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b086      	sub	sp, #24
 80013c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013c6:	f107 0308 	add.w	r3, r7, #8
 80013ca:	2200      	movs	r2, #0
 80013cc:	601a      	str	r2, [r3, #0]
 80013ce:	605a      	str	r2, [r3, #4]
 80013d0:	609a      	str	r2, [r3, #8]
 80013d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013d4:	463b      	mov	r3, r7
 80013d6:	2200      	movs	r2, #0
 80013d8:	601a      	str	r2, [r3, #0]
 80013da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80013dc:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <MX_TIM1_Init+0x98>)
 80013de:	4a1f      	ldr	r2, [pc, #124]	; (800145c <MX_TIM1_Init+0x9c>)
 80013e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 72-1;
 80013e2:	4b1d      	ldr	r3, [pc, #116]	; (8001458 <MX_TIM1_Init+0x98>)
 80013e4:	2247      	movs	r2, #71	; 0x47
 80013e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013e8:	4b1b      	ldr	r3, [pc, #108]	; (8001458 <MX_TIM1_Init+0x98>)
 80013ea:	2200      	movs	r2, #0
 80013ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80013ee:	4b1a      	ldr	r3, [pc, #104]	; (8001458 <MX_TIM1_Init+0x98>)
 80013f0:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80013f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013f6:	4b18      	ldr	r3, [pc, #96]	; (8001458 <MX_TIM1_Init+0x98>)
 80013f8:	2200      	movs	r2, #0
 80013fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013fc:	4b16      	ldr	r3, [pc, #88]	; (8001458 <MX_TIM1_Init+0x98>)
 80013fe:	2200      	movs	r2, #0
 8001400:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001402:	4b15      	ldr	r3, [pc, #84]	; (8001458 <MX_TIM1_Init+0x98>)
 8001404:	2200      	movs	r2, #0
 8001406:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001408:	4813      	ldr	r0, [pc, #76]	; (8001458 <MX_TIM1_Init+0x98>)
 800140a:	f001 fd69 	bl	8002ee0 <HAL_TIM_Base_Init>
 800140e:	4603      	mov	r3, r0
 8001410:	2b00      	cmp	r3, #0
 8001412:	d001      	beq.n	8001418 <MX_TIM1_Init+0x58>
  {
    Error_Handler();
 8001414:	f000 f85e 	bl	80014d4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001418:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800141c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	4619      	mov	r1, r3
 8001424:	480c      	ldr	r0, [pc, #48]	; (8001458 <MX_TIM1_Init+0x98>)
 8001426:	f001 fdf5 	bl	8003014 <HAL_TIM_ConfigClockSource>
 800142a:	4603      	mov	r3, r0
 800142c:	2b00      	cmp	r3, #0
 800142e:	d001      	beq.n	8001434 <MX_TIM1_Init+0x74>
  {
    Error_Handler();
 8001430:	f000 f850 	bl	80014d4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001434:	2300      	movs	r3, #0
 8001436:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800143c:	463b      	mov	r3, r7
 800143e:	4619      	mov	r1, r3
 8001440:	4805      	ldr	r0, [pc, #20]	; (8001458 <MX_TIM1_Init+0x98>)
 8001442:	f001 ffa3 	bl	800338c <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 800144c:	f000 f842 	bl	80014d4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001450:	bf00      	nop
 8001452:	3718      	adds	r7, #24
 8001454:	46bd      	mov	sp, r7
 8001456:	bd80      	pop	{r7, pc}
 8001458:	20000250 	.word	0x20000250
 800145c:	40012c00 	.word	0x40012c00

08001460 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001460:	b480      	push	{r7}
 8001462:	b083      	sub	sp, #12
 8001464:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001466:	4b0e      	ldr	r3, [pc, #56]	; (80014a0 <MX_GPIO_Init+0x40>)
 8001468:	699b      	ldr	r3, [r3, #24]
 800146a:	4a0d      	ldr	r2, [pc, #52]	; (80014a0 <MX_GPIO_Init+0x40>)
 800146c:	f043 0320 	orr.w	r3, r3, #32
 8001470:	6193      	str	r3, [r2, #24]
 8001472:	4b0b      	ldr	r3, [pc, #44]	; (80014a0 <MX_GPIO_Init+0x40>)
 8001474:	699b      	ldr	r3, [r3, #24]
 8001476:	f003 0320 	and.w	r3, r3, #32
 800147a:	607b      	str	r3, [r7, #4]
 800147c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800147e:	4b08      	ldr	r3, [pc, #32]	; (80014a0 <MX_GPIO_Init+0x40>)
 8001480:	699b      	ldr	r3, [r3, #24]
 8001482:	4a07      	ldr	r2, [pc, #28]	; (80014a0 <MX_GPIO_Init+0x40>)
 8001484:	f043 0308 	orr.w	r3, r3, #8
 8001488:	6193      	str	r3, [r2, #24]
 800148a:	4b05      	ldr	r3, [pc, #20]	; (80014a0 <MX_GPIO_Init+0x40>)
 800148c:	699b      	ldr	r3, [r3, #24]
 800148e:	f003 0308 	and.w	r3, r3, #8
 8001492:	603b      	str	r3, [r7, #0]
 8001494:	683b      	ldr	r3, [r7, #0]

}
 8001496:	bf00      	nop
 8001498:	370c      	adds	r7, #12
 800149a:	46bd      	mov	sp, r7
 800149c:	bc80      	pop	{r7}
 800149e:	4770      	bx	lr
 80014a0:	40021000 	.word	0x40021000

080014a4 <delay_us>:

/* USER CODE BEGIN 4 */
void delay_us (uint16_t us)
{
 80014a4:	b480      	push	{r7}
 80014a6:	b083      	sub	sp, #12
 80014a8:	af00      	add	r7, sp, #0
 80014aa:	4603      	mov	r3, r0
 80014ac:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1,0);  // set the counter value a 0
 80014ae:	4b08      	ldr	r3, [pc, #32]	; (80014d0 <delay_us+0x2c>)
 80014b0:	681b      	ldr	r3, [r3, #0]
 80014b2:	2200      	movs	r2, #0
 80014b4:	625a      	str	r2, [r3, #36]	; 0x24
	while (__HAL_TIM_GET_COUNTER(&htim1) < us);  // wait for the counter to reach the us input in the parameter
 80014b6:	bf00      	nop
 80014b8:	4b05      	ldr	r3, [pc, #20]	; (80014d0 <delay_us+0x2c>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80014be:	88fb      	ldrh	r3, [r7, #6]
 80014c0:	429a      	cmp	r2, r3
 80014c2:	d3f9      	bcc.n	80014b8 <delay_us+0x14>
}
 80014c4:	bf00      	nop
 80014c6:	bf00      	nop
 80014c8:	370c      	adds	r7, #12
 80014ca:	46bd      	mov	sp, r7
 80014cc:	bc80      	pop	{r7}
 80014ce:	4770      	bx	lr
 80014d0:	20000250 	.word	0x20000250

080014d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014d4:	b480      	push	{r7}
 80014d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80014d8:	b672      	cpsid	i
}
 80014da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80014dc:	e7fe      	b.n	80014dc <Error_Handler+0x8>
	...

080014e0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014e0:	b480      	push	{r7}
 80014e2:	b083      	sub	sp, #12
 80014e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014e6:	4b0e      	ldr	r3, [pc, #56]	; (8001520 <HAL_MspInit+0x40>)
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4a0d      	ldr	r2, [pc, #52]	; (8001520 <HAL_MspInit+0x40>)
 80014ec:	f043 0301 	orr.w	r3, r3, #1
 80014f0:	6193      	str	r3, [r2, #24]
 80014f2:	4b0b      	ldr	r3, [pc, #44]	; (8001520 <HAL_MspInit+0x40>)
 80014f4:	699b      	ldr	r3, [r3, #24]
 80014f6:	f003 0301 	and.w	r3, r3, #1
 80014fa:	607b      	str	r3, [r7, #4]
 80014fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014fe:	4b08      	ldr	r3, [pc, #32]	; (8001520 <HAL_MspInit+0x40>)
 8001500:	69db      	ldr	r3, [r3, #28]
 8001502:	4a07      	ldr	r2, [pc, #28]	; (8001520 <HAL_MspInit+0x40>)
 8001504:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001508:	61d3      	str	r3, [r2, #28]
 800150a:	4b05      	ldr	r3, [pc, #20]	; (8001520 <HAL_MspInit+0x40>)
 800150c:	69db      	ldr	r3, [r3, #28]
 800150e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001512:	603b      	str	r3, [r7, #0]
 8001514:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	370c      	adds	r7, #12
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000

08001524 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	b088      	sub	sp, #32
 8001528:	af00      	add	r7, sp, #0
 800152a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800152c:	f107 0310 	add.w	r3, r7, #16
 8001530:	2200      	movs	r2, #0
 8001532:	601a      	str	r2, [r3, #0]
 8001534:	605a      	str	r2, [r3, #4]
 8001536:	609a      	str	r2, [r3, #8]
 8001538:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a15      	ldr	r2, [pc, #84]	; (8001594 <HAL_I2C_MspInit+0x70>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d123      	bne.n	800158c <HAL_I2C_MspInit+0x68>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001544:	4b14      	ldr	r3, [pc, #80]	; (8001598 <HAL_I2C_MspInit+0x74>)
 8001546:	699b      	ldr	r3, [r3, #24]
 8001548:	4a13      	ldr	r2, [pc, #76]	; (8001598 <HAL_I2C_MspInit+0x74>)
 800154a:	f043 0308 	orr.w	r3, r3, #8
 800154e:	6193      	str	r3, [r2, #24]
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <HAL_I2C_MspInit+0x74>)
 8001552:	699b      	ldr	r3, [r3, #24]
 8001554:	f003 0308 	and.w	r3, r3, #8
 8001558:	60fb      	str	r3, [r7, #12]
 800155a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800155c:	23c0      	movs	r3, #192	; 0xc0
 800155e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001560:	2312      	movs	r3, #18
 8001562:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001564:	2303      	movs	r3, #3
 8001566:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001568:	f107 0310 	add.w	r3, r7, #16
 800156c:	4619      	mov	r1, r3
 800156e:	480b      	ldr	r0, [pc, #44]	; (800159c <HAL_I2C_MspInit+0x78>)
 8001570:	f000 fab2 	bl	8001ad8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001574:	4b08      	ldr	r3, [pc, #32]	; (8001598 <HAL_I2C_MspInit+0x74>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	4a07      	ldr	r2, [pc, #28]	; (8001598 <HAL_I2C_MspInit+0x74>)
 800157a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800157e:	61d3      	str	r3, [r2, #28]
 8001580:	4b05      	ldr	r3, [pc, #20]	; (8001598 <HAL_I2C_MspInit+0x74>)
 8001582:	69db      	ldr	r3, [r3, #28]
 8001584:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001588:	60bb      	str	r3, [r7, #8]
 800158a:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800158c:	bf00      	nop
 800158e:	3720      	adds	r7, #32
 8001590:	46bd      	mov	sp, r7
 8001592:	bd80      	pop	{r7, pc}
 8001594:	40005400 	.word	0x40005400
 8001598:	40021000 	.word	0x40021000
 800159c:	40010c00 	.word	0x40010c00

080015a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b085      	sub	sp, #20
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	4a09      	ldr	r2, [pc, #36]	; (80015d4 <HAL_TIM_Base_MspInit+0x34>)
 80015ae:	4293      	cmp	r3, r2
 80015b0:	d10b      	bne.n	80015ca <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80015b2:	4b09      	ldr	r3, [pc, #36]	; (80015d8 <HAL_TIM_Base_MspInit+0x38>)
 80015b4:	699b      	ldr	r3, [r3, #24]
 80015b6:	4a08      	ldr	r2, [pc, #32]	; (80015d8 <HAL_TIM_Base_MspInit+0x38>)
 80015b8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80015bc:	6193      	str	r3, [r2, #24]
 80015be:	4b06      	ldr	r3, [pc, #24]	; (80015d8 <HAL_TIM_Base_MspInit+0x38>)
 80015c0:	699b      	ldr	r3, [r3, #24]
 80015c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80015ca:	bf00      	nop
 80015cc:	3714      	adds	r7, #20
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr
 80015d4:	40012c00 	.word	0x40012c00
 80015d8:	40021000 	.word	0x40021000

080015dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015e0:	e7fe      	b.n	80015e0 <NMI_Handler+0x4>

080015e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015e2:	b480      	push	{r7}
 80015e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e6:	e7fe      	b.n	80015e6 <HardFault_Handler+0x4>

080015e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e8:	b480      	push	{r7}
 80015ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015ec:	e7fe      	b.n	80015ec <MemManage_Handler+0x4>

080015ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ee:	b480      	push	{r7}
 80015f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f2:	e7fe      	b.n	80015f2 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	e7fe      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015fa:	b480      	push	{r7}
 80015fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	46bd      	mov	sp, r7
 8001602:	bc80      	pop	{r7}
 8001604:	4770      	bx	lr

08001606 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001606:	b480      	push	{r7}
 8001608:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800160a:	bf00      	nop
 800160c:	46bd      	mov	sp, r7
 800160e:	bc80      	pop	{r7}
 8001610:	4770      	bx	lr

08001612 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001612:	b480      	push	{r7}
 8001614:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001616:	bf00      	nop
 8001618:	46bd      	mov	sp, r7
 800161a:	bc80      	pop	{r7}
 800161c:	4770      	bx	lr

0800161e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800161e:	b580      	push	{r7, lr}
 8001620:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001622:	f000 f935 	bl	8001890 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001626:	bf00      	nop
 8001628:	bd80      	pop	{r7, pc}

0800162a <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800162a:	b480      	push	{r7}
 800162c:	af00      	add	r7, sp, #0
  return 1;
 800162e:	2301      	movs	r3, #1
}
 8001630:	4618      	mov	r0, r3
 8001632:	46bd      	mov	sp, r7
 8001634:	bc80      	pop	{r7}
 8001636:	4770      	bx	lr

08001638 <_kill>:

int _kill(int pid, int sig)
{
 8001638:	b580      	push	{r7, lr}
 800163a:	b082      	sub	sp, #8
 800163c:	af00      	add	r7, sp, #0
 800163e:	6078      	str	r0, [r7, #4]
 8001640:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001642:	f001 ff01 	bl	8003448 <__errno>
 8001646:	4603      	mov	r3, r0
 8001648:	2216      	movs	r2, #22
 800164a:	601a      	str	r2, [r3, #0]
  return -1;
 800164c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001650:	4618      	mov	r0, r3
 8001652:	3708      	adds	r7, #8
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}

08001658 <_exit>:

void _exit (int status)
{
 8001658:	b580      	push	{r7, lr}
 800165a:	b082      	sub	sp, #8
 800165c:	af00      	add	r7, sp, #0
 800165e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001660:	f04f 31ff 	mov.w	r1, #4294967295
 8001664:	6878      	ldr	r0, [r7, #4]
 8001666:	f7ff ffe7 	bl	8001638 <_kill>
  while (1) {}    /* Make sure we hang here */
 800166a:	e7fe      	b.n	800166a <_exit+0x12>

0800166c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60f8      	str	r0, [r7, #12]
 8001674:	60b9      	str	r1, [r7, #8]
 8001676:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001678:	2300      	movs	r3, #0
 800167a:	617b      	str	r3, [r7, #20]
 800167c:	e00a      	b.n	8001694 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800167e:	f3af 8000 	nop.w
 8001682:	4601      	mov	r1, r0
 8001684:	68bb      	ldr	r3, [r7, #8]
 8001686:	1c5a      	adds	r2, r3, #1
 8001688:	60ba      	str	r2, [r7, #8]
 800168a:	b2ca      	uxtb	r2, r1
 800168c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800168e:	697b      	ldr	r3, [r7, #20]
 8001690:	3301      	adds	r3, #1
 8001692:	617b      	str	r3, [r7, #20]
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	429a      	cmp	r2, r3
 800169a:	dbf0      	blt.n	800167e <_read+0x12>
  }

  return len;
 800169c:	687b      	ldr	r3, [r7, #4]
}
 800169e:	4618      	mov	r0, r3
 80016a0:	3718      	adds	r7, #24
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bd80      	pop	{r7, pc}

080016a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016a6:	b580      	push	{r7, lr}
 80016a8:	b086      	sub	sp, #24
 80016aa:	af00      	add	r7, sp, #0
 80016ac:	60f8      	str	r0, [r7, #12]
 80016ae:	60b9      	str	r1, [r7, #8]
 80016b0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	617b      	str	r3, [r7, #20]
 80016b6:	e009      	b.n	80016cc <_write+0x26>
  {
    __io_putchar(*ptr++);
 80016b8:	68bb      	ldr	r3, [r7, #8]
 80016ba:	1c5a      	adds	r2, r3, #1
 80016bc:	60ba      	str	r2, [r7, #8]
 80016be:	781b      	ldrb	r3, [r3, #0]
 80016c0:	4618      	mov	r0, r3
 80016c2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016c6:	697b      	ldr	r3, [r7, #20]
 80016c8:	3301      	adds	r3, #1
 80016ca:	617b      	str	r3, [r7, #20]
 80016cc:	697a      	ldr	r2, [r7, #20]
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	dbf1      	blt.n	80016b8 <_write+0x12>
  }
  return len;
 80016d4:	687b      	ldr	r3, [r7, #4]
}
 80016d6:	4618      	mov	r0, r3
 80016d8:	3718      	adds	r7, #24
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}

080016de <_close>:

int _close(int file)
{
 80016de:	b480      	push	{r7}
 80016e0:	b083      	sub	sp, #12
 80016e2:	af00      	add	r7, sp, #0
 80016e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80016e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016ea:	4618      	mov	r0, r3
 80016ec:	370c      	adds	r7, #12
 80016ee:	46bd      	mov	sp, r7
 80016f0:	bc80      	pop	{r7}
 80016f2:	4770      	bx	lr

080016f4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80016f4:	b480      	push	{r7}
 80016f6:	b083      	sub	sp, #12
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
 80016fc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80016fe:	683b      	ldr	r3, [r7, #0]
 8001700:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001704:	605a      	str	r2, [r3, #4]
  return 0;
 8001706:	2300      	movs	r3, #0
}
 8001708:	4618      	mov	r0, r3
 800170a:	370c      	adds	r7, #12
 800170c:	46bd      	mov	sp, r7
 800170e:	bc80      	pop	{r7}
 8001710:	4770      	bx	lr

08001712 <_isatty>:

int _isatty(int file)
{
 8001712:	b480      	push	{r7}
 8001714:	b083      	sub	sp, #12
 8001716:	af00      	add	r7, sp, #0
 8001718:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800171a:	2301      	movs	r3, #1
}
 800171c:	4618      	mov	r0, r3
 800171e:	370c      	adds	r7, #12
 8001720:	46bd      	mov	sp, r7
 8001722:	bc80      	pop	{r7}
 8001724:	4770      	bx	lr

08001726 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001726:	b480      	push	{r7}
 8001728:	b085      	sub	sp, #20
 800172a:	af00      	add	r7, sp, #0
 800172c:	60f8      	str	r0, [r7, #12]
 800172e:	60b9      	str	r1, [r7, #8]
 8001730:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001732:	2300      	movs	r3, #0
}
 8001734:	4618      	mov	r0, r3
 8001736:	3714      	adds	r7, #20
 8001738:	46bd      	mov	sp, r7
 800173a:	bc80      	pop	{r7}
 800173c:	4770      	bx	lr
	...

08001740 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b086      	sub	sp, #24
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001748:	4a14      	ldr	r2, [pc, #80]	; (800179c <_sbrk+0x5c>)
 800174a:	4b15      	ldr	r3, [pc, #84]	; (80017a0 <_sbrk+0x60>)
 800174c:	1ad3      	subs	r3, r2, r3
 800174e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001750:	697b      	ldr	r3, [r7, #20]
 8001752:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001754:	4b13      	ldr	r3, [pc, #76]	; (80017a4 <_sbrk+0x64>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d102      	bne.n	8001762 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800175c:	4b11      	ldr	r3, [pc, #68]	; (80017a4 <_sbrk+0x64>)
 800175e:	4a12      	ldr	r2, [pc, #72]	; (80017a8 <_sbrk+0x68>)
 8001760:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001762:	4b10      	ldr	r3, [pc, #64]	; (80017a4 <_sbrk+0x64>)
 8001764:	681a      	ldr	r2, [r3, #0]
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	4413      	add	r3, r2
 800176a:	693a      	ldr	r2, [r7, #16]
 800176c:	429a      	cmp	r2, r3
 800176e:	d207      	bcs.n	8001780 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001770:	f001 fe6a 	bl	8003448 <__errno>
 8001774:	4603      	mov	r3, r0
 8001776:	220c      	movs	r2, #12
 8001778:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800177a:	f04f 33ff 	mov.w	r3, #4294967295
 800177e:	e009      	b.n	8001794 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001780:	4b08      	ldr	r3, [pc, #32]	; (80017a4 <_sbrk+0x64>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001786:	4b07      	ldr	r3, [pc, #28]	; (80017a4 <_sbrk+0x64>)
 8001788:	681a      	ldr	r2, [r3, #0]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	4413      	add	r3, r2
 800178e:	4a05      	ldr	r2, [pc, #20]	; (80017a4 <_sbrk+0x64>)
 8001790:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001792:	68fb      	ldr	r3, [r7, #12]
}
 8001794:	4618      	mov	r0, r3
 8001796:	3718      	adds	r7, #24
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20005000 	.word	0x20005000
 80017a0:	00000400 	.word	0x00000400
 80017a4:	200002b0 	.word	0x200002b0
 80017a8:	200002c8 	.word	0x200002c8

080017ac <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80017ac:	b480      	push	{r7}
 80017ae:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80017b0:	bf00      	nop
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bc80      	pop	{r7}
 80017b6:	4770      	bx	lr

080017b8 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80017b8:	480c      	ldr	r0, [pc, #48]	; (80017ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ba:	490d      	ldr	r1, [pc, #52]	; (80017f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017bc:	4a0d      	ldr	r2, [pc, #52]	; (80017f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017c0:	e002      	b.n	80017c8 <LoopCopyDataInit>

080017c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017c6:	3304      	adds	r3, #4

080017c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017cc:	d3f9      	bcc.n	80017c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017ce:	4a0a      	ldr	r2, [pc, #40]	; (80017f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017d0:	4c0a      	ldr	r4, [pc, #40]	; (80017fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80017d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017d4:	e001      	b.n	80017da <LoopFillZerobss>

080017d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017d8:	3204      	adds	r2, #4

080017da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017dc:	d3fb      	bcc.n	80017d6 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80017de:	f7ff ffe5 	bl	80017ac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80017e2:	f001 fe37 	bl	8003454 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80017e6:	f7ff fcf5 	bl	80011d4 <main>
  bx lr
 80017ea:	4770      	bx	lr
  ldr r0, =_sdata
 80017ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017f0:	200001e0 	.word	0x200001e0
  ldr r2, =_sidata
 80017f4:	0800822c 	.word	0x0800822c
  ldr r2, =_sbss
 80017f8:	200001e0 	.word	0x200001e0
  ldr r4, =_ebss
 80017fc:	200002c8 	.word	0x200002c8

08001800 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001800:	e7fe      	b.n	8001800 <ADC1_2_IRQHandler>
	...

08001804 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001804:	b580      	push	{r7, lr}
 8001806:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_Init+0x28>)
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	4a07      	ldr	r2, [pc, #28]	; (800182c <HAL_Init+0x28>)
 800180e:	f043 0310 	orr.w	r3, r3, #16
 8001812:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001814:	2003      	movs	r0, #3
 8001816:	f000 f92b 	bl	8001a70 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800181a:	200f      	movs	r0, #15
 800181c:	f000 f808 	bl	8001830 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001820:	f7ff fe5e 	bl	80014e0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001824:	2300      	movs	r3, #0
}
 8001826:	4618      	mov	r0, r3
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	40022000 	.word	0x40022000

08001830 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001838:	4b12      	ldr	r3, [pc, #72]	; (8001884 <HAL_InitTick+0x54>)
 800183a:	681a      	ldr	r2, [r3, #0]
 800183c:	4b12      	ldr	r3, [pc, #72]	; (8001888 <HAL_InitTick+0x58>)
 800183e:	781b      	ldrb	r3, [r3, #0]
 8001840:	4619      	mov	r1, r3
 8001842:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001846:	fbb3 f3f1 	udiv	r3, r3, r1
 800184a:	fbb2 f3f3 	udiv	r3, r2, r3
 800184e:	4618      	mov	r0, r3
 8001850:	f000 f935 	bl	8001abe <HAL_SYSTICK_Config>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800185a:	2301      	movs	r3, #1
 800185c:	e00e      	b.n	800187c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	2b0f      	cmp	r3, #15
 8001862:	d80a      	bhi.n	800187a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001864:	2200      	movs	r2, #0
 8001866:	6879      	ldr	r1, [r7, #4]
 8001868:	f04f 30ff 	mov.w	r0, #4294967295
 800186c:	f000 f90b 	bl	8001a86 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001870:	4a06      	ldr	r2, [pc, #24]	; (800188c <HAL_InitTick+0x5c>)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001876:	2300      	movs	r3, #0
 8001878:	e000      	b.n	800187c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800187a:	2301      	movs	r3, #1
}
 800187c:	4618      	mov	r0, r3
 800187e:	3708      	adds	r7, #8
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	20000000 	.word	0x20000000
 8001888:	20000008 	.word	0x20000008
 800188c:	20000004 	.word	0x20000004

08001890 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001894:	4b05      	ldr	r3, [pc, #20]	; (80018ac <HAL_IncTick+0x1c>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	461a      	mov	r2, r3
 800189a:	4b05      	ldr	r3, [pc, #20]	; (80018b0 <HAL_IncTick+0x20>)
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4413      	add	r3, r2
 80018a0:	4a03      	ldr	r2, [pc, #12]	; (80018b0 <HAL_IncTick+0x20>)
 80018a2:	6013      	str	r3, [r2, #0]
}
 80018a4:	bf00      	nop
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bc80      	pop	{r7}
 80018aa:	4770      	bx	lr
 80018ac:	20000008 	.word	0x20000008
 80018b0:	200002b4 	.word	0x200002b4

080018b4 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  return uwTick;
 80018b8:	4b02      	ldr	r3, [pc, #8]	; (80018c4 <HAL_GetTick+0x10>)
 80018ba:	681b      	ldr	r3, [r3, #0]
}
 80018bc:	4618      	mov	r0, r3
 80018be:	46bd      	mov	sp, r7
 80018c0:	bc80      	pop	{r7}
 80018c2:	4770      	bx	lr
 80018c4:	200002b4 	.word	0x200002b4

080018c8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b084      	sub	sp, #16
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80018d0:	f7ff fff0 	bl	80018b4 <HAL_GetTick>
 80018d4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80018e0:	d005      	beq.n	80018ee <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80018e2:	4b0a      	ldr	r3, [pc, #40]	; (800190c <HAL_Delay+0x44>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	461a      	mov	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	4413      	add	r3, r2
 80018ec:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80018ee:	bf00      	nop
 80018f0:	f7ff ffe0 	bl	80018b4 <HAL_GetTick>
 80018f4:	4602      	mov	r2, r0
 80018f6:	68bb      	ldr	r3, [r7, #8]
 80018f8:	1ad3      	subs	r3, r2, r3
 80018fa:	68fa      	ldr	r2, [r7, #12]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d8f7      	bhi.n	80018f0 <HAL_Delay+0x28>
  {
  }
}
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	3710      	adds	r7, #16
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	20000008 	.word	0x20000008

08001910 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001910:	b480      	push	{r7}
 8001912:	b085      	sub	sp, #20
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001920:	4b0c      	ldr	r3, [pc, #48]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001922:	68db      	ldr	r3, [r3, #12]
 8001924:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001926:	68ba      	ldr	r2, [r7, #8]
 8001928:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800192c:	4013      	ands	r3, r2
 800192e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001934:	68bb      	ldr	r3, [r7, #8]
 8001936:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001938:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800193c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001940:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001942:	4a04      	ldr	r2, [pc, #16]	; (8001954 <__NVIC_SetPriorityGrouping+0x44>)
 8001944:	68bb      	ldr	r3, [r7, #8]
 8001946:	60d3      	str	r3, [r2, #12]
}
 8001948:	bf00      	nop
 800194a:	3714      	adds	r7, #20
 800194c:	46bd      	mov	sp, r7
 800194e:	bc80      	pop	{r7}
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000ed00 	.word	0xe000ed00

08001958 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800195c:	4b04      	ldr	r3, [pc, #16]	; (8001970 <__NVIC_GetPriorityGrouping+0x18>)
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	0a1b      	lsrs	r3, r3, #8
 8001962:	f003 0307 	and.w	r3, r3, #7
}
 8001966:	4618      	mov	r0, r3
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001974:	b480      	push	{r7}
 8001976:	b083      	sub	sp, #12
 8001978:	af00      	add	r7, sp, #0
 800197a:	4603      	mov	r3, r0
 800197c:	6039      	str	r1, [r7, #0]
 800197e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001984:	2b00      	cmp	r3, #0
 8001986:	db0a      	blt.n	800199e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001988:	683b      	ldr	r3, [r7, #0]
 800198a:	b2da      	uxtb	r2, r3
 800198c:	490c      	ldr	r1, [pc, #48]	; (80019c0 <__NVIC_SetPriority+0x4c>)
 800198e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001992:	0112      	lsls	r2, r2, #4
 8001994:	b2d2      	uxtb	r2, r2
 8001996:	440b      	add	r3, r1
 8001998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800199c:	e00a      	b.n	80019b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	4908      	ldr	r1, [pc, #32]	; (80019c4 <__NVIC_SetPriority+0x50>)
 80019a4:	79fb      	ldrb	r3, [r7, #7]
 80019a6:	f003 030f 	and.w	r3, r3, #15
 80019aa:	3b04      	subs	r3, #4
 80019ac:	0112      	lsls	r2, r2, #4
 80019ae:	b2d2      	uxtb	r2, r2
 80019b0:	440b      	add	r3, r1
 80019b2:	761a      	strb	r2, [r3, #24]
}
 80019b4:	bf00      	nop
 80019b6:	370c      	adds	r7, #12
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bc80      	pop	{r7}
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	e000e100 	.word	0xe000e100
 80019c4:	e000ed00 	.word	0xe000ed00

080019c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b089      	sub	sp, #36	; 0x24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	60f8      	str	r0, [r7, #12]
 80019d0:	60b9      	str	r1, [r7, #8]
 80019d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	f003 0307 	and.w	r3, r3, #7
 80019da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019dc:	69fb      	ldr	r3, [r7, #28]
 80019de:	f1c3 0307 	rsb	r3, r3, #7
 80019e2:	2b04      	cmp	r3, #4
 80019e4:	bf28      	it	cs
 80019e6:	2304      	movcs	r3, #4
 80019e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3304      	adds	r3, #4
 80019ee:	2b06      	cmp	r3, #6
 80019f0:	d902      	bls.n	80019f8 <NVIC_EncodePriority+0x30>
 80019f2:	69fb      	ldr	r3, [r7, #28]
 80019f4:	3b03      	subs	r3, #3
 80019f6:	e000      	b.n	80019fa <NVIC_EncodePriority+0x32>
 80019f8:	2300      	movs	r3, #0
 80019fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019fc:	f04f 32ff 	mov.w	r2, #4294967295
 8001a00:	69bb      	ldr	r3, [r7, #24]
 8001a02:	fa02 f303 	lsl.w	r3, r2, r3
 8001a06:	43da      	mvns	r2, r3
 8001a08:	68bb      	ldr	r3, [r7, #8]
 8001a0a:	401a      	ands	r2, r3
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a10:	f04f 31ff 	mov.w	r1, #4294967295
 8001a14:	697b      	ldr	r3, [r7, #20]
 8001a16:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1a:	43d9      	mvns	r1, r3
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	4313      	orrs	r3, r2
         );
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	3724      	adds	r7, #36	; 0x24
 8001a26:	46bd      	mov	sp, r7
 8001a28:	bc80      	pop	{r7}
 8001a2a:	4770      	bx	lr

08001a2c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	b082      	sub	sp, #8
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	3b01      	subs	r3, #1
 8001a38:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a3c:	d301      	bcc.n	8001a42 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3e:	2301      	movs	r3, #1
 8001a40:	e00f      	b.n	8001a62 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a42:	4a0a      	ldr	r2, [pc, #40]	; (8001a6c <SysTick_Config+0x40>)
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	3b01      	subs	r3, #1
 8001a48:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a4a:	210f      	movs	r1, #15
 8001a4c:	f04f 30ff 	mov.w	r0, #4294967295
 8001a50:	f7ff ff90 	bl	8001974 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <SysTick_Config+0x40>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a5a:	4b04      	ldr	r3, [pc, #16]	; (8001a6c <SysTick_Config+0x40>)
 8001a5c:	2207      	movs	r2, #7
 8001a5e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a60:	2300      	movs	r3, #0
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3708      	adds	r7, #8
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bd80      	pop	{r7, pc}
 8001a6a:	bf00      	nop
 8001a6c:	e000e010 	.word	0xe000e010

08001a70 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	b082      	sub	sp, #8
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a78:	6878      	ldr	r0, [r7, #4]
 8001a7a:	f7ff ff49 	bl	8001910 <__NVIC_SetPriorityGrouping>
}
 8001a7e:	bf00      	nop
 8001a80:	3708      	adds	r7, #8
 8001a82:	46bd      	mov	sp, r7
 8001a84:	bd80      	pop	{r7, pc}

08001a86 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a86:	b580      	push	{r7, lr}
 8001a88:	b086      	sub	sp, #24
 8001a8a:	af00      	add	r7, sp, #0
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	60b9      	str	r1, [r7, #8]
 8001a90:	607a      	str	r2, [r7, #4]
 8001a92:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a94:	2300      	movs	r3, #0
 8001a96:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a98:	f7ff ff5e 	bl	8001958 <__NVIC_GetPriorityGrouping>
 8001a9c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9e:	687a      	ldr	r2, [r7, #4]
 8001aa0:	68b9      	ldr	r1, [r7, #8]
 8001aa2:	6978      	ldr	r0, [r7, #20]
 8001aa4:	f7ff ff90 	bl	80019c8 <NVIC_EncodePriority>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aae:	4611      	mov	r1, r2
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f7ff ff5f 	bl	8001974 <__NVIC_SetPriority>
}
 8001ab6:	bf00      	nop
 8001ab8:	3718      	adds	r7, #24
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}

08001abe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001abe:	b580      	push	{r7, lr}
 8001ac0:	b082      	sub	sp, #8
 8001ac2:	af00      	add	r7, sp, #0
 8001ac4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ac6:	6878      	ldr	r0, [r7, #4]
 8001ac8:	f7ff ffb0 	bl	8001a2c <SysTick_Config>
 8001acc:	4603      	mov	r3, r0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
	...

08001ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	b08b      	sub	sp, #44	; 0x2c
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001ae2:	2300      	movs	r3, #0
 8001ae4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001aea:	e169      	b.n	8001dc0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001aec:	2201      	movs	r2, #1
 8001aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001af0:	fa02 f303 	lsl.w	r3, r2, r3
 8001af4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	69fa      	ldr	r2, [r7, #28]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b00:	69ba      	ldr	r2, [r7, #24]
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	429a      	cmp	r2, r3
 8001b06:	f040 8158 	bne.w	8001dba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b0a:	683b      	ldr	r3, [r7, #0]
 8001b0c:	685b      	ldr	r3, [r3, #4]
 8001b0e:	4a9a      	ldr	r2, [pc, #616]	; (8001d78 <HAL_GPIO_Init+0x2a0>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d05e      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b14:	4a98      	ldr	r2, [pc, #608]	; (8001d78 <HAL_GPIO_Init+0x2a0>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d875      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b1a:	4a98      	ldr	r2, [pc, #608]	; (8001d7c <HAL_GPIO_Init+0x2a4>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d058      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b20:	4a96      	ldr	r2, [pc, #600]	; (8001d7c <HAL_GPIO_Init+0x2a4>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d86f      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b26:	4a96      	ldr	r2, [pc, #600]	; (8001d80 <HAL_GPIO_Init+0x2a8>)
 8001b28:	4293      	cmp	r3, r2
 8001b2a:	d052      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b2c:	4a94      	ldr	r2, [pc, #592]	; (8001d80 <HAL_GPIO_Init+0x2a8>)
 8001b2e:	4293      	cmp	r3, r2
 8001b30:	d869      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b32:	4a94      	ldr	r2, [pc, #592]	; (8001d84 <HAL_GPIO_Init+0x2ac>)
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d04c      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b38:	4a92      	ldr	r2, [pc, #584]	; (8001d84 <HAL_GPIO_Init+0x2ac>)
 8001b3a:	4293      	cmp	r3, r2
 8001b3c:	d863      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b3e:	4a92      	ldr	r2, [pc, #584]	; (8001d88 <HAL_GPIO_Init+0x2b0>)
 8001b40:	4293      	cmp	r3, r2
 8001b42:	d046      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
 8001b44:	4a90      	ldr	r2, [pc, #576]	; (8001d88 <HAL_GPIO_Init+0x2b0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d85d      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b4a:	2b12      	cmp	r3, #18
 8001b4c:	d82a      	bhi.n	8001ba4 <HAL_GPIO_Init+0xcc>
 8001b4e:	2b12      	cmp	r3, #18
 8001b50:	d859      	bhi.n	8001c06 <HAL_GPIO_Init+0x12e>
 8001b52:	a201      	add	r2, pc, #4	; (adr r2, 8001b58 <HAL_GPIO_Init+0x80>)
 8001b54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b58:	08001bd3 	.word	0x08001bd3
 8001b5c:	08001bad 	.word	0x08001bad
 8001b60:	08001bbf 	.word	0x08001bbf
 8001b64:	08001c01 	.word	0x08001c01
 8001b68:	08001c07 	.word	0x08001c07
 8001b6c:	08001c07 	.word	0x08001c07
 8001b70:	08001c07 	.word	0x08001c07
 8001b74:	08001c07 	.word	0x08001c07
 8001b78:	08001c07 	.word	0x08001c07
 8001b7c:	08001c07 	.word	0x08001c07
 8001b80:	08001c07 	.word	0x08001c07
 8001b84:	08001c07 	.word	0x08001c07
 8001b88:	08001c07 	.word	0x08001c07
 8001b8c:	08001c07 	.word	0x08001c07
 8001b90:	08001c07 	.word	0x08001c07
 8001b94:	08001c07 	.word	0x08001c07
 8001b98:	08001c07 	.word	0x08001c07
 8001b9c:	08001bb5 	.word	0x08001bb5
 8001ba0:	08001bc9 	.word	0x08001bc9
 8001ba4:	4a79      	ldr	r2, [pc, #484]	; (8001d8c <HAL_GPIO_Init+0x2b4>)
 8001ba6:	4293      	cmp	r3, r2
 8001ba8:	d013      	beq.n	8001bd2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001baa:	e02c      	b.n	8001c06 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001bac:	683b      	ldr	r3, [r7, #0]
 8001bae:	68db      	ldr	r3, [r3, #12]
 8001bb0:	623b      	str	r3, [r7, #32]
          break;
 8001bb2:	e029      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	3304      	adds	r3, #4
 8001bba:	623b      	str	r3, [r7, #32]
          break;
 8001bbc:	e024      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	68db      	ldr	r3, [r3, #12]
 8001bc2:	3308      	adds	r3, #8
 8001bc4:	623b      	str	r3, [r7, #32]
          break;
 8001bc6:	e01f      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	68db      	ldr	r3, [r3, #12]
 8001bcc:	330c      	adds	r3, #12
 8001bce:	623b      	str	r3, [r7, #32]
          break;
 8001bd0:	e01a      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	689b      	ldr	r3, [r3, #8]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d102      	bne.n	8001be0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bda:	2304      	movs	r3, #4
 8001bdc:	623b      	str	r3, [r7, #32]
          break;
 8001bde:	e013      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	689b      	ldr	r3, [r3, #8]
 8001be4:	2b01      	cmp	r3, #1
 8001be6:	d105      	bne.n	8001bf4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001be8:	2308      	movs	r3, #8
 8001bea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	69fa      	ldr	r2, [r7, #28]
 8001bf0:	611a      	str	r2, [r3, #16]
          break;
 8001bf2:	e009      	b.n	8001c08 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bf4:	2308      	movs	r3, #8
 8001bf6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	69fa      	ldr	r2, [r7, #28]
 8001bfc:	615a      	str	r2, [r3, #20]
          break;
 8001bfe:	e003      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c00:	2300      	movs	r3, #0
 8001c02:	623b      	str	r3, [r7, #32]
          break;
 8001c04:	e000      	b.n	8001c08 <HAL_GPIO_Init+0x130>
          break;
 8001c06:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c08:	69bb      	ldr	r3, [r7, #24]
 8001c0a:	2bff      	cmp	r3, #255	; 0xff
 8001c0c:	d801      	bhi.n	8001c12 <HAL_GPIO_Init+0x13a>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	e001      	b.n	8001c16 <HAL_GPIO_Init+0x13e>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	3304      	adds	r3, #4
 8001c16:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c18:	69bb      	ldr	r3, [r7, #24]
 8001c1a:	2bff      	cmp	r3, #255	; 0xff
 8001c1c:	d802      	bhi.n	8001c24 <HAL_GPIO_Init+0x14c>
 8001c1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c20:	009b      	lsls	r3, r3, #2
 8001c22:	e002      	b.n	8001c2a <HAL_GPIO_Init+0x152>
 8001c24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c26:	3b08      	subs	r3, #8
 8001c28:	009b      	lsls	r3, r3, #2
 8001c2a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c2c:	697b      	ldr	r3, [r7, #20]
 8001c2e:	681a      	ldr	r2, [r3, #0]
 8001c30:	210f      	movs	r1, #15
 8001c32:	693b      	ldr	r3, [r7, #16]
 8001c34:	fa01 f303 	lsl.w	r3, r1, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	401a      	ands	r2, r3
 8001c3c:	6a39      	ldr	r1, [r7, #32]
 8001c3e:	693b      	ldr	r3, [r7, #16]
 8001c40:	fa01 f303 	lsl.w	r3, r1, r3
 8001c44:	431a      	orrs	r2, r3
 8001c46:	697b      	ldr	r3, [r7, #20]
 8001c48:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c4a:	683b      	ldr	r3, [r7, #0]
 8001c4c:	685b      	ldr	r3, [r3, #4]
 8001c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	f000 80b1 	beq.w	8001dba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c58:	4b4d      	ldr	r3, [pc, #308]	; (8001d90 <HAL_GPIO_Init+0x2b8>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	4a4c      	ldr	r2, [pc, #304]	; (8001d90 <HAL_GPIO_Init+0x2b8>)
 8001c5e:	f043 0301 	orr.w	r3, r3, #1
 8001c62:	6193      	str	r3, [r2, #24]
 8001c64:	4b4a      	ldr	r3, [pc, #296]	; (8001d90 <HAL_GPIO_Init+0x2b8>)
 8001c66:	699b      	ldr	r3, [r3, #24]
 8001c68:	f003 0301 	and.w	r3, r3, #1
 8001c6c:	60bb      	str	r3, [r7, #8]
 8001c6e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c70:	4a48      	ldr	r2, [pc, #288]	; (8001d94 <HAL_GPIO_Init+0x2bc>)
 8001c72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c74:	089b      	lsrs	r3, r3, #2
 8001c76:	3302      	adds	r3, #2
 8001c78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c7c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c80:	f003 0303 	and.w	r3, r3, #3
 8001c84:	009b      	lsls	r3, r3, #2
 8001c86:	220f      	movs	r2, #15
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	68fa      	ldr	r2, [r7, #12]
 8001c90:	4013      	ands	r3, r2
 8001c92:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	4a40      	ldr	r2, [pc, #256]	; (8001d98 <HAL_GPIO_Init+0x2c0>)
 8001c98:	4293      	cmp	r3, r2
 8001c9a:	d013      	beq.n	8001cc4 <HAL_GPIO_Init+0x1ec>
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	4a3f      	ldr	r2, [pc, #252]	; (8001d9c <HAL_GPIO_Init+0x2c4>)
 8001ca0:	4293      	cmp	r3, r2
 8001ca2:	d00d      	beq.n	8001cc0 <HAL_GPIO_Init+0x1e8>
 8001ca4:	687b      	ldr	r3, [r7, #4]
 8001ca6:	4a3e      	ldr	r2, [pc, #248]	; (8001da0 <HAL_GPIO_Init+0x2c8>)
 8001ca8:	4293      	cmp	r3, r2
 8001caa:	d007      	beq.n	8001cbc <HAL_GPIO_Init+0x1e4>
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	4a3d      	ldr	r2, [pc, #244]	; (8001da4 <HAL_GPIO_Init+0x2cc>)
 8001cb0:	4293      	cmp	r3, r2
 8001cb2:	d101      	bne.n	8001cb8 <HAL_GPIO_Init+0x1e0>
 8001cb4:	2303      	movs	r3, #3
 8001cb6:	e006      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cb8:	2304      	movs	r3, #4
 8001cba:	e004      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cbc:	2302      	movs	r3, #2
 8001cbe:	e002      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cc0:	2301      	movs	r3, #1
 8001cc2:	e000      	b.n	8001cc6 <HAL_GPIO_Init+0x1ee>
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001cc8:	f002 0203 	and.w	r2, r2, #3
 8001ccc:	0092      	lsls	r2, r2, #2
 8001cce:	4093      	lsls	r3, r2
 8001cd0:	68fa      	ldr	r2, [r7, #12]
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cd6:	492f      	ldr	r1, [pc, #188]	; (8001d94 <HAL_GPIO_Init+0x2bc>)
 8001cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cda:	089b      	lsrs	r3, r3, #2
 8001cdc:	3302      	adds	r3, #2
 8001cde:	68fa      	ldr	r2, [r7, #12]
 8001ce0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	685b      	ldr	r3, [r3, #4]
 8001ce8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d006      	beq.n	8001cfe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001cf0:	4b2d      	ldr	r3, [pc, #180]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001cf2:	681a      	ldr	r2, [r3, #0]
 8001cf4:	492c      	ldr	r1, [pc, #176]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	69bb      	ldr	r3, [r7, #24]
 8001cf8:	4313      	orrs	r3, r2
 8001cfa:	600b      	str	r3, [r1, #0]
 8001cfc:	e006      	b.n	8001d0c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001cfe:	4b2a      	ldr	r3, [pc, #168]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d00:	681a      	ldr	r2, [r3, #0]
 8001d02:	69bb      	ldr	r3, [r7, #24]
 8001d04:	43db      	mvns	r3, r3
 8001d06:	4928      	ldr	r1, [pc, #160]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d08:	4013      	ands	r3, r2
 8001d0a:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	685b      	ldr	r3, [r3, #4]
 8001d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d006      	beq.n	8001d26 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d18:	4b23      	ldr	r3, [pc, #140]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d1a:	685a      	ldr	r2, [r3, #4]
 8001d1c:	4922      	ldr	r1, [pc, #136]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	69bb      	ldr	r3, [r7, #24]
 8001d20:	4313      	orrs	r3, r2
 8001d22:	604b      	str	r3, [r1, #4]
 8001d24:	e006      	b.n	8001d34 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d26:	4b20      	ldr	r3, [pc, #128]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d28:	685a      	ldr	r2, [r3, #4]
 8001d2a:	69bb      	ldr	r3, [r7, #24]
 8001d2c:	43db      	mvns	r3, r3
 8001d2e:	491e      	ldr	r1, [pc, #120]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d30:	4013      	ands	r3, r2
 8001d32:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	685b      	ldr	r3, [r3, #4]
 8001d38:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d006      	beq.n	8001d4e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d40:	4b19      	ldr	r3, [pc, #100]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d42:	689a      	ldr	r2, [r3, #8]
 8001d44:	4918      	ldr	r1, [pc, #96]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	4313      	orrs	r3, r2
 8001d4a:	608b      	str	r3, [r1, #8]
 8001d4c:	e006      	b.n	8001d5c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d4e:	4b16      	ldr	r3, [pc, #88]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d50:	689a      	ldr	r2, [r3, #8]
 8001d52:	69bb      	ldr	r3, [r7, #24]
 8001d54:	43db      	mvns	r3, r3
 8001d56:	4914      	ldr	r1, [pc, #80]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d58:	4013      	ands	r3, r2
 8001d5a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d021      	beq.n	8001dac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d68:	4b0f      	ldr	r3, [pc, #60]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d6a:	68da      	ldr	r2, [r3, #12]
 8001d6c:	490e      	ldr	r1, [pc, #56]	; (8001da8 <HAL_GPIO_Init+0x2d0>)
 8001d6e:	69bb      	ldr	r3, [r7, #24]
 8001d70:	4313      	orrs	r3, r2
 8001d72:	60cb      	str	r3, [r1, #12]
 8001d74:	e021      	b.n	8001dba <HAL_GPIO_Init+0x2e2>
 8001d76:	bf00      	nop
 8001d78:	10320000 	.word	0x10320000
 8001d7c:	10310000 	.word	0x10310000
 8001d80:	10220000 	.word	0x10220000
 8001d84:	10210000 	.word	0x10210000
 8001d88:	10120000 	.word	0x10120000
 8001d8c:	10110000 	.word	0x10110000
 8001d90:	40021000 	.word	0x40021000
 8001d94:	40010000 	.word	0x40010000
 8001d98:	40010800 	.word	0x40010800
 8001d9c:	40010c00 	.word	0x40010c00
 8001da0:	40011000 	.word	0x40011000
 8001da4:	40011400 	.word	0x40011400
 8001da8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001dae:	68da      	ldr	r2, [r3, #12]
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	43db      	mvns	r3, r3
 8001db4:	4909      	ldr	r1, [pc, #36]	; (8001ddc <HAL_GPIO_Init+0x304>)
 8001db6:	4013      	ands	r3, r2
 8001db8:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dbc:	3301      	adds	r3, #1
 8001dbe:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001dc0:	683b      	ldr	r3, [r7, #0]
 8001dc2:	681a      	ldr	r2, [r3, #0]
 8001dc4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dc6:	fa22 f303 	lsr.w	r3, r2, r3
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	f47f ae8e 	bne.w	8001aec <HAL_GPIO_Init+0x14>
  }
}
 8001dd0:	bf00      	nop
 8001dd2:	bf00      	nop
 8001dd4:	372c      	adds	r7, #44	; 0x2c
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	bc80      	pop	{r7}
 8001dda:	4770      	bx	lr
 8001ddc:	40010400 	.word	0x40010400

08001de0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	460b      	mov	r3, r1
 8001dea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689a      	ldr	r2, [r3, #8]
 8001df0:	887b      	ldrh	r3, [r7, #2]
 8001df2:	4013      	ands	r3, r2
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d002      	beq.n	8001dfe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	73fb      	strb	r3, [r7, #15]
 8001dfc:	e001      	b.n	8001e02 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e04:	4618      	mov	r0, r3
 8001e06:	3714      	adds	r7, #20
 8001e08:	46bd      	mov	sp, r7
 8001e0a:	bc80      	pop	{r7}
 8001e0c:	4770      	bx	lr

08001e0e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e0e:	b480      	push	{r7}
 8001e10:	b083      	sub	sp, #12
 8001e12:	af00      	add	r7, sp, #0
 8001e14:	6078      	str	r0, [r7, #4]
 8001e16:	460b      	mov	r3, r1
 8001e18:	807b      	strh	r3, [r7, #2]
 8001e1a:	4613      	mov	r3, r2
 8001e1c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e1e:	787b      	ldrb	r3, [r7, #1]
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e24:	887a      	ldrh	r2, [r7, #2]
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e2a:	e003      	b.n	8001e34 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e2c:	887b      	ldrh	r3, [r7, #2]
 8001e2e:	041a      	lsls	r2, r3, #16
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	611a      	str	r2, [r3, #16]
}
 8001e34:	bf00      	nop
 8001e36:	370c      	adds	r7, #12
 8001e38:	46bd      	mov	sp, r7
 8001e3a:	bc80      	pop	{r7}
 8001e3c:	4770      	bx	lr
	...

08001e40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	b084      	sub	sp, #16
 8001e44:	af00      	add	r7, sp, #0
 8001e46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d101      	bne.n	8001e52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e12b      	b.n	80020aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e58:	b2db      	uxtb	r3, r3
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d106      	bne.n	8001e6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2200      	movs	r2, #0
 8001e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001e66:	6878      	ldr	r0, [r7, #4]
 8001e68:	f7ff fb5c 	bl	8001524 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2224      	movs	r2, #36	; 0x24
 8001e70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	681a      	ldr	r2, [r3, #0]
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f022 0201 	bic.w	r2, r2, #1
 8001e82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	681a      	ldr	r2, [r3, #0]
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001e92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	681a      	ldr	r2, [r3, #0]
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001ea2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001ea4:	f000 ffea 	bl	8002e7c <HAL_RCC_GetPCLK1Freq>
 8001ea8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	4a81      	ldr	r2, [pc, #516]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001eb0:	4293      	cmp	r3, r2
 8001eb2:	d807      	bhi.n	8001ec4 <HAL_I2C_Init+0x84>
 8001eb4:	68fb      	ldr	r3, [r7, #12]
 8001eb6:	4a80      	ldr	r2, [pc, #512]	; (80020b8 <HAL_I2C_Init+0x278>)
 8001eb8:	4293      	cmp	r3, r2
 8001eba:	bf94      	ite	ls
 8001ebc:	2301      	movls	r3, #1
 8001ebe:	2300      	movhi	r3, #0
 8001ec0:	b2db      	uxtb	r3, r3
 8001ec2:	e006      	b.n	8001ed2 <HAL_I2C_Init+0x92>
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a7d      	ldr	r2, [pc, #500]	; (80020bc <HAL_I2C_Init+0x27c>)
 8001ec8:	4293      	cmp	r3, r2
 8001eca:	bf94      	ite	ls
 8001ecc:	2301      	movls	r3, #1
 8001ece:	2300      	movhi	r3, #0
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d001      	beq.n	8001eda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e0e7      	b.n	80020aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001eda:	68fb      	ldr	r3, [r7, #12]
 8001edc:	4a78      	ldr	r2, [pc, #480]	; (80020c0 <HAL_I2C_Init+0x280>)
 8001ede:	fba2 2303 	umull	r2, r3, r2, r3
 8001ee2:	0c9b      	lsrs	r3, r3, #18
 8001ee4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	68ba      	ldr	r2, [r7, #8]
 8001ef6:	430a      	orrs	r2, r1
 8001ef8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	6a1b      	ldr	r3, [r3, #32]
 8001f00:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	685b      	ldr	r3, [r3, #4]
 8001f08:	4a6a      	ldr	r2, [pc, #424]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001f0a:	4293      	cmp	r3, r2
 8001f0c:	d802      	bhi.n	8001f14 <HAL_I2C_Init+0xd4>
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	3301      	adds	r3, #1
 8001f12:	e009      	b.n	8001f28 <HAL_I2C_Init+0xe8>
 8001f14:	68bb      	ldr	r3, [r7, #8]
 8001f16:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001f1a:	fb02 f303 	mul.w	r3, r2, r3
 8001f1e:	4a69      	ldr	r2, [pc, #420]	; (80020c4 <HAL_I2C_Init+0x284>)
 8001f20:	fba2 2303 	umull	r2, r3, r2, r3
 8001f24:	099b      	lsrs	r3, r3, #6
 8001f26:	3301      	adds	r3, #1
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	6812      	ldr	r2, [r2, #0]
 8001f2c:	430b      	orrs	r3, r1
 8001f2e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	69db      	ldr	r3, [r3, #28]
 8001f36:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001f3a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	495c      	ldr	r1, [pc, #368]	; (80020b4 <HAL_I2C_Init+0x274>)
 8001f44:	428b      	cmp	r3, r1
 8001f46:	d819      	bhi.n	8001f7c <HAL_I2C_Init+0x13c>
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	1e59      	subs	r1, r3, #1
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	005b      	lsls	r3, r3, #1
 8001f52:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f56:	1c59      	adds	r1, r3, #1
 8001f58:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001f5c:	400b      	ands	r3, r1
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d00a      	beq.n	8001f78 <HAL_I2C_Init+0x138>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	1e59      	subs	r1, r3, #1
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685b      	ldr	r3, [r3, #4]
 8001f6a:	005b      	lsls	r3, r3, #1
 8001f6c:	fbb1 f3f3 	udiv	r3, r1, r3
 8001f70:	3301      	adds	r3, #1
 8001f72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f76:	e051      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f78:	2304      	movs	r3, #4
 8001f7a:	e04f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2b00      	cmp	r3, #0
 8001f82:	d111      	bne.n	8001fa8 <HAL_I2C_Init+0x168>
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	1e58      	subs	r0, r3, #1
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6859      	ldr	r1, [r3, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	440b      	add	r3, r1
 8001f92:	fbb0 f3f3 	udiv	r3, r0, r3
 8001f96:	3301      	adds	r3, #1
 8001f98:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	bf0c      	ite	eq
 8001fa0:	2301      	moveq	r3, #1
 8001fa2:	2300      	movne	r3, #0
 8001fa4:	b2db      	uxtb	r3, r3
 8001fa6:	e012      	b.n	8001fce <HAL_I2C_Init+0x18e>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	1e58      	subs	r0, r3, #1
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	6859      	ldr	r1, [r3, #4]
 8001fb0:	460b      	mov	r3, r1
 8001fb2:	009b      	lsls	r3, r3, #2
 8001fb4:	440b      	add	r3, r1
 8001fb6:	0099      	lsls	r1, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	fbb0 f3f3 	udiv	r3, r0, r3
 8001fbe:	3301      	adds	r3, #1
 8001fc0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	bf0c      	ite	eq
 8001fc8:	2301      	moveq	r3, #1
 8001fca:	2300      	movne	r3, #0
 8001fcc:	b2db      	uxtb	r3, r3
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d001      	beq.n	8001fd6 <HAL_I2C_Init+0x196>
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	e022      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	689b      	ldr	r3, [r3, #8]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d10e      	bne.n	8001ffc <HAL_I2C_Init+0x1bc>
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	1e58      	subs	r0, r3, #1
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	6859      	ldr	r1, [r3, #4]
 8001fe6:	460b      	mov	r3, r1
 8001fe8:	005b      	lsls	r3, r3, #1
 8001fea:	440b      	add	r3, r1
 8001fec:	fbb0 f3f3 	udiv	r3, r0, r3
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001ff6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001ffa:	e00f      	b.n	800201c <HAL_I2C_Init+0x1dc>
 8001ffc:	68fb      	ldr	r3, [r7, #12]
 8001ffe:	1e58      	subs	r0, r3, #1
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6859      	ldr	r1, [r3, #4]
 8002004:	460b      	mov	r3, r1
 8002006:	009b      	lsls	r3, r3, #2
 8002008:	440b      	add	r3, r1
 800200a:	0099      	lsls	r1, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002012:	3301      	adds	r3, #1
 8002014:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002018:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800201c:	6879      	ldr	r1, [r7, #4]
 800201e:	6809      	ldr	r1, [r1, #0]
 8002020:	4313      	orrs	r3, r2
 8002022:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	69da      	ldr	r2, [r3, #28]
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	431a      	orrs	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800204a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	6911      	ldr	r1, [r2, #16]
 8002052:	687a      	ldr	r2, [r7, #4]
 8002054:	68d2      	ldr	r2, [r2, #12]
 8002056:	4311      	orrs	r1, r2
 8002058:	687a      	ldr	r2, [r7, #4]
 800205a:	6812      	ldr	r2, [r2, #0]
 800205c:	430b      	orrs	r3, r1
 800205e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	68db      	ldr	r3, [r3, #12]
 8002066:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	695a      	ldr	r2, [r3, #20]
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	699b      	ldr	r3, [r3, #24]
 8002072:	431a      	orrs	r2, r3
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	430a      	orrs	r2, r1
 800207a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	681a      	ldr	r2, [r3, #0]
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	f042 0201 	orr.w	r2, r2, #1
 800208a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2200      	movs	r2, #0
 8002090:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2220      	movs	r2, #32
 8002096:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	2200      	movs	r2, #0
 800209e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	2200      	movs	r2, #0
 80020a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80020a8:	2300      	movs	r3, #0
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	000186a0 	.word	0x000186a0
 80020b8:	001e847f 	.word	0x001e847f
 80020bc:	003d08ff 	.word	0x003d08ff
 80020c0:	431bde83 	.word	0x431bde83
 80020c4:	10624dd3 	.word	0x10624dd3

080020c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	b088      	sub	sp, #32
 80020cc:	af02      	add	r7, sp, #8
 80020ce:	60f8      	str	r0, [r7, #12]
 80020d0:	607a      	str	r2, [r7, #4]
 80020d2:	461a      	mov	r2, r3
 80020d4:	460b      	mov	r3, r1
 80020d6:	817b      	strh	r3, [r7, #10]
 80020d8:	4613      	mov	r3, r2
 80020da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80020dc:	f7ff fbea 	bl	80018b4 <HAL_GetTick>
 80020e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	2b20      	cmp	r3, #32
 80020ec:	f040 80e0 	bne.w	80022b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80020f0:	697b      	ldr	r3, [r7, #20]
 80020f2:	9300      	str	r3, [sp, #0]
 80020f4:	2319      	movs	r3, #25
 80020f6:	2201      	movs	r2, #1
 80020f8:	4970      	ldr	r1, [pc, #448]	; (80022bc <HAL_I2C_Master_Transmit+0x1f4>)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f964 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002106:	2302      	movs	r3, #2
 8002108:	e0d3      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002110:	2b01      	cmp	r3, #1
 8002112:	d101      	bne.n	8002118 <HAL_I2C_Master_Transmit+0x50>
 8002114:	2302      	movs	r3, #2
 8002116:	e0cc      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002118:	68fb      	ldr	r3, [r7, #12]
 800211a:	2201      	movs	r2, #1
 800211c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002120:	68fb      	ldr	r3, [r7, #12]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f003 0301 	and.w	r3, r3, #1
 800212a:	2b01      	cmp	r3, #1
 800212c:	d007      	beq.n	800213e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681a      	ldr	r2, [r3, #0]
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f042 0201 	orr.w	r2, r2, #1
 800213c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	681a      	ldr	r2, [r3, #0]
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800214c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800214e:	68fb      	ldr	r3, [r7, #12]
 8002150:	2221      	movs	r2, #33	; 0x21
 8002152:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2210      	movs	r2, #16
 800215a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800215e:	68fb      	ldr	r3, [r7, #12]
 8002160:	2200      	movs	r2, #0
 8002162:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	687a      	ldr	r2, [r7, #4]
 8002168:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800216a:	68fb      	ldr	r3, [r7, #12]
 800216c:	893a      	ldrh	r2, [r7, #8]
 800216e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002170:	68fb      	ldr	r3, [r7, #12]
 8002172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002174:	b29a      	uxth	r2, r3
 8002176:	68fb      	ldr	r3, [r7, #12]
 8002178:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	4a50      	ldr	r2, [pc, #320]	; (80022c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800217e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002180:	8979      	ldrh	r1, [r7, #10]
 8002182:	697b      	ldr	r3, [r7, #20]
 8002184:	6a3a      	ldr	r2, [r7, #32]
 8002186:	68f8      	ldr	r0, [r7, #12]
 8002188:	f000 f89c 	bl	80022c4 <I2C_MasterRequestWrite>
 800218c:	4603      	mov	r3, r0
 800218e:	2b00      	cmp	r3, #0
 8002190:	d001      	beq.n	8002196 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002192:	2301      	movs	r3, #1
 8002194:	e08d      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	695b      	ldr	r3, [r3, #20]
 80021a0:	613b      	str	r3, [r7, #16]
 80021a2:	68fb      	ldr	r3, [r7, #12]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	699b      	ldr	r3, [r3, #24]
 80021a8:	613b      	str	r3, [r7, #16]
 80021aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80021ac:	e066      	b.n	800227c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80021ae:	697a      	ldr	r2, [r7, #20]
 80021b0:	6a39      	ldr	r1, [r7, #32]
 80021b2:	68f8      	ldr	r0, [r7, #12]
 80021b4:	f000 f9de 	bl	8002574 <I2C_WaitOnTXEFlagUntilTimeout>
 80021b8:	4603      	mov	r3, r0
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d00d      	beq.n	80021da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	2b04      	cmp	r3, #4
 80021c4:	d107      	bne.n	80021d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80021d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e06b      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80021da:	68fb      	ldr	r3, [r7, #12]
 80021dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021de:	781a      	ldrb	r2, [r3, #0]
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ea:	1c5a      	adds	r2, r3, #1
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80021f4:	b29b      	uxth	r3, r3
 80021f6:	3b01      	subs	r3, #1
 80021f8:	b29a      	uxth	r2, r3
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002202:	3b01      	subs	r3, #1
 8002204:	b29a      	uxth	r2, r3
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	695b      	ldr	r3, [r3, #20]
 8002210:	f003 0304 	and.w	r3, r3, #4
 8002214:	2b04      	cmp	r3, #4
 8002216:	d11b      	bne.n	8002250 <HAL_I2C_Master_Transmit+0x188>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800221c:	2b00      	cmp	r3, #0
 800221e:	d017      	beq.n	8002250 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002224:	781a      	ldrb	r2, [r3, #0]
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002230:	1c5a      	adds	r2, r3, #1
 8002232:	68fb      	ldr	r3, [r7, #12]
 8002234:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800223a:	b29b      	uxth	r3, r3
 800223c:	3b01      	subs	r3, #1
 800223e:	b29a      	uxth	r2, r3
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002248:	3b01      	subs	r3, #1
 800224a:	b29a      	uxth	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002250:	697a      	ldr	r2, [r7, #20]
 8002252:	6a39      	ldr	r1, [r7, #32]
 8002254:	68f8      	ldr	r0, [r7, #12]
 8002256:	f000 f9ce 	bl	80025f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800225a:	4603      	mov	r3, r0
 800225c:	2b00      	cmp	r3, #0
 800225e:	d00d      	beq.n	800227c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	2b04      	cmp	r3, #4
 8002266:	d107      	bne.n	8002278 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	68fb      	ldr	r3, [r7, #12]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002276:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002278:	2301      	movs	r3, #1
 800227a:	e01a      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800227c:	68fb      	ldr	r3, [r7, #12]
 800227e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002280:	2b00      	cmp	r3, #0
 8002282:	d194      	bne.n	80021ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681a      	ldr	r2, [r3, #0]
 800228a:	68fb      	ldr	r3, [r7, #12]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002292:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	2220      	movs	r2, #32
 8002298:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2200      	movs	r2, #0
 80022a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	2200      	movs	r2, #0
 80022a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80022ac:	2300      	movs	r3, #0
 80022ae:	e000      	b.n	80022b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80022b0:	2302      	movs	r3, #2
  }
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3718      	adds	r7, #24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bd80      	pop	{r7, pc}
 80022ba:	bf00      	nop
 80022bc:	00100002 	.word	0x00100002
 80022c0:	ffff0000 	.word	0xffff0000

080022c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80022c4:	b580      	push	{r7, lr}
 80022c6:	b088      	sub	sp, #32
 80022c8:	af02      	add	r7, sp, #8
 80022ca:	60f8      	str	r0, [r7, #12]
 80022cc:	607a      	str	r2, [r7, #4]
 80022ce:	603b      	str	r3, [r7, #0]
 80022d0:	460b      	mov	r3, r1
 80022d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80022d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	2b08      	cmp	r3, #8
 80022de:	d006      	beq.n	80022ee <I2C_MasterRequestWrite+0x2a>
 80022e0:	697b      	ldr	r3, [r7, #20]
 80022e2:	2b01      	cmp	r3, #1
 80022e4:	d003      	beq.n	80022ee <I2C_MasterRequestWrite+0x2a>
 80022e6:	697b      	ldr	r3, [r7, #20]
 80022e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80022ec:	d108      	bne.n	8002300 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681a      	ldr	r2, [r3, #0]
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80022fc:	601a      	str	r2, [r3, #0]
 80022fe:	e00b      	b.n	8002318 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002304:	2b12      	cmp	r3, #18
 8002306:	d107      	bne.n	8002318 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	681a      	ldr	r2, [r3, #0]
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002316:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	9300      	str	r3, [sp, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002324:	68f8      	ldr	r0, [r7, #12]
 8002326:	f000 f84f 	bl	80023c8 <I2C_WaitOnFlagUntilTimeout>
 800232a:	4603      	mov	r3, r0
 800232c:	2b00      	cmp	r3, #0
 800232e:	d00d      	beq.n	800234c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800233a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800233e:	d103      	bne.n	8002348 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002346:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002348:	2303      	movs	r3, #3
 800234a:	e035      	b.n	80023b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002354:	d108      	bne.n	8002368 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002356:	897b      	ldrh	r3, [r7, #10]
 8002358:	b2db      	uxtb	r3, r3
 800235a:	461a      	mov	r2, r3
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002364:	611a      	str	r2, [r3, #16]
 8002366:	e01b      	b.n	80023a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002368:	897b      	ldrh	r3, [r7, #10]
 800236a:	11db      	asrs	r3, r3, #7
 800236c:	b2db      	uxtb	r3, r3
 800236e:	f003 0306 	and.w	r3, r3, #6
 8002372:	b2db      	uxtb	r3, r3
 8002374:	f063 030f 	orn	r3, r3, #15
 8002378:	b2da      	uxtb	r2, r3
 800237a:	68fb      	ldr	r3, [r7, #12]
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002380:	683b      	ldr	r3, [r7, #0]
 8002382:	687a      	ldr	r2, [r7, #4]
 8002384:	490e      	ldr	r1, [pc, #56]	; (80023c0 <I2C_MasterRequestWrite+0xfc>)
 8002386:	68f8      	ldr	r0, [r7, #12]
 8002388:	f000 f875 	bl	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	e010      	b.n	80023b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002396:	897b      	ldrh	r3, [r7, #10]
 8002398:	b2da      	uxtb	r2, r3
 800239a:	68fb      	ldr	r3, [r7, #12]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	687a      	ldr	r2, [r7, #4]
 80023a4:	4907      	ldr	r1, [pc, #28]	; (80023c4 <I2C_MasterRequestWrite+0x100>)
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	f000 f865 	bl	8002476 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80023ac:	4603      	mov	r3, r0
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d001      	beq.n	80023b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80023b2:	2301      	movs	r3, #1
 80023b4:	e000      	b.n	80023b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80023b6:	2300      	movs	r3, #0
}
 80023b8:	4618      	mov	r0, r3
 80023ba:	3718      	adds	r7, #24
 80023bc:	46bd      	mov	sp, r7
 80023be:	bd80      	pop	{r7, pc}
 80023c0:	00010008 	.word	0x00010008
 80023c4:	00010002 	.word	0x00010002

080023c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b084      	sub	sp, #16
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	60f8      	str	r0, [r7, #12]
 80023d0:	60b9      	str	r1, [r7, #8]
 80023d2:	603b      	str	r3, [r7, #0]
 80023d4:	4613      	mov	r3, r2
 80023d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80023d8:	e025      	b.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023da:	683b      	ldr	r3, [r7, #0]
 80023dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023e0:	d021      	beq.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80023e2:	f7ff fa67 	bl	80018b4 <HAL_GetTick>
 80023e6:	4602      	mov	r2, r0
 80023e8:	69bb      	ldr	r3, [r7, #24]
 80023ea:	1ad3      	subs	r3, r2, r3
 80023ec:	683a      	ldr	r2, [r7, #0]
 80023ee:	429a      	cmp	r2, r3
 80023f0:	d302      	bcc.n	80023f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80023f2:	683b      	ldr	r3, [r7, #0]
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d116      	bne.n	8002426 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	2200      	movs	r2, #0
 80023fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	2220      	movs	r2, #32
 8002402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002406:	68fb      	ldr	r3, [r7, #12]
 8002408:	2200      	movs	r2, #0
 800240a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002412:	f043 0220 	orr.w	r2, r3, #32
 8002416:	68fb      	ldr	r3, [r7, #12]
 8002418:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	2200      	movs	r2, #0
 800241e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e023      	b.n	800246e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002426:	68bb      	ldr	r3, [r7, #8]
 8002428:	0c1b      	lsrs	r3, r3, #16
 800242a:	b2db      	uxtb	r3, r3
 800242c:	2b01      	cmp	r3, #1
 800242e:	d10d      	bne.n	800244c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	695b      	ldr	r3, [r3, #20]
 8002436:	43da      	mvns	r2, r3
 8002438:	68bb      	ldr	r3, [r7, #8]
 800243a:	4013      	ands	r3, r2
 800243c:	b29b      	uxth	r3, r3
 800243e:	2b00      	cmp	r3, #0
 8002440:	bf0c      	ite	eq
 8002442:	2301      	moveq	r3, #1
 8002444:	2300      	movne	r3, #0
 8002446:	b2db      	uxtb	r3, r3
 8002448:	461a      	mov	r2, r3
 800244a:	e00c      	b.n	8002466 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	699b      	ldr	r3, [r3, #24]
 8002452:	43da      	mvns	r2, r3
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4013      	ands	r3, r2
 8002458:	b29b      	uxth	r3, r3
 800245a:	2b00      	cmp	r3, #0
 800245c:	bf0c      	ite	eq
 800245e:	2301      	moveq	r3, #1
 8002460:	2300      	movne	r3, #0
 8002462:	b2db      	uxtb	r3, r3
 8002464:	461a      	mov	r2, r3
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	429a      	cmp	r2, r3
 800246a:	d0b6      	beq.n	80023da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800246c:	2300      	movs	r3, #0
}
 800246e:	4618      	mov	r0, r3
 8002470:	3710      	adds	r7, #16
 8002472:	46bd      	mov	sp, r7
 8002474:	bd80      	pop	{r7, pc}

08002476 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002476:	b580      	push	{r7, lr}
 8002478:	b084      	sub	sp, #16
 800247a:	af00      	add	r7, sp, #0
 800247c:	60f8      	str	r0, [r7, #12]
 800247e:	60b9      	str	r1, [r7, #8]
 8002480:	607a      	str	r2, [r7, #4]
 8002482:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002484:	e051      	b.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002486:	68fb      	ldr	r3, [r7, #12]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	695b      	ldr	r3, [r3, #20]
 800248c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002490:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002494:	d123      	bne.n	80024de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002496:	68fb      	ldr	r3, [r7, #12]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	681a      	ldr	r2, [r3, #0]
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80024a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	681b      	ldr	r3, [r3, #0]
 80024aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80024ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	2200      	movs	r2, #0
 80024b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2220      	movs	r2, #32
 80024ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80024c6:	68fb      	ldr	r3, [r7, #12]
 80024c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ca:	f043 0204 	orr.w	r2, r3, #4
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	2200      	movs	r2, #0
 80024d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	e046      	b.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80024e4:	d021      	beq.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e6:	f7ff f9e5 	bl	80018b4 <HAL_GetTick>
 80024ea:	4602      	mov	r2, r0
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	1ad3      	subs	r3, r2, r3
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	429a      	cmp	r2, r3
 80024f4:	d302      	bcc.n	80024fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d116      	bne.n	800252a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80024fc:	68fb      	ldr	r3, [r7, #12]
 80024fe:	2200      	movs	r2, #0
 8002500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002502:	68fb      	ldr	r3, [r7, #12]
 8002504:	2220      	movs	r2, #32
 8002506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	2200      	movs	r2, #0
 800250e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002516:	f043 0220 	orr.w	r2, r3, #32
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	2200      	movs	r2, #0
 8002522:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e020      	b.n	800256c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	0c1b      	lsrs	r3, r3, #16
 800252e:	b2db      	uxtb	r3, r3
 8002530:	2b01      	cmp	r3, #1
 8002532:	d10c      	bne.n	800254e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	695b      	ldr	r3, [r3, #20]
 800253a:	43da      	mvns	r2, r3
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	4013      	ands	r3, r2
 8002540:	b29b      	uxth	r3, r3
 8002542:	2b00      	cmp	r3, #0
 8002544:	bf14      	ite	ne
 8002546:	2301      	movne	r3, #1
 8002548:	2300      	moveq	r3, #0
 800254a:	b2db      	uxtb	r3, r3
 800254c:	e00b      	b.n	8002566 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	43da      	mvns	r2, r3
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	4013      	ands	r3, r2
 800255a:	b29b      	uxth	r3, r3
 800255c:	2b00      	cmp	r3, #0
 800255e:	bf14      	ite	ne
 8002560:	2301      	movne	r3, #1
 8002562:	2300      	moveq	r3, #0
 8002564:	b2db      	uxtb	r3, r3
 8002566:	2b00      	cmp	r3, #0
 8002568:	d18d      	bne.n	8002486 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800256a:	2300      	movs	r3, #0
}
 800256c:	4618      	mov	r0, r3
 800256e:	3710      	adds	r7, #16
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}

08002574 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002574:	b580      	push	{r7, lr}
 8002576:	b084      	sub	sp, #16
 8002578:	af00      	add	r7, sp, #0
 800257a:	60f8      	str	r0, [r7, #12]
 800257c:	60b9      	str	r1, [r7, #8]
 800257e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002580:	e02d      	b.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002582:	68f8      	ldr	r0, [r7, #12]
 8002584:	f000 f878 	bl	8002678 <I2C_IsAcknowledgeFailed>
 8002588:	4603      	mov	r3, r0
 800258a:	2b00      	cmp	r3, #0
 800258c:	d001      	beq.n	8002592 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800258e:	2301      	movs	r3, #1
 8002590:	e02d      	b.n	80025ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002592:	68bb      	ldr	r3, [r7, #8]
 8002594:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002598:	d021      	beq.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800259a:	f7ff f98b 	bl	80018b4 <HAL_GetTick>
 800259e:	4602      	mov	r2, r0
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	68ba      	ldr	r2, [r7, #8]
 80025a6:	429a      	cmp	r2, r3
 80025a8:	d302      	bcc.n	80025b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80025aa:	68bb      	ldr	r3, [r7, #8]
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d116      	bne.n	80025de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f043 0220 	orr.w	r2, r3, #32
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e007      	b.n	80025ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80025de:	68fb      	ldr	r3, [r7, #12]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	695b      	ldr	r3, [r3, #20]
 80025e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80025e8:	2b80      	cmp	r3, #128	; 0x80
 80025ea:	d1ca      	bne.n	8002582 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80025ec:	2300      	movs	r3, #0
}
 80025ee:	4618      	mov	r0, r3
 80025f0:	3710      	adds	r7, #16
 80025f2:	46bd      	mov	sp, r7
 80025f4:	bd80      	pop	{r7, pc}

080025f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80025f6:	b580      	push	{r7, lr}
 80025f8:	b084      	sub	sp, #16
 80025fa:	af00      	add	r7, sp, #0
 80025fc:	60f8      	str	r0, [r7, #12]
 80025fe:	60b9      	str	r1, [r7, #8]
 8002600:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002602:	e02d      	b.n	8002660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002604:	68f8      	ldr	r0, [r7, #12]
 8002606:	f000 f837 	bl	8002678 <I2C_IsAcknowledgeFailed>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d001      	beq.n	8002614 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	e02d      	b.n	8002670 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002614:	68bb      	ldr	r3, [r7, #8]
 8002616:	f1b3 3fff 	cmp.w	r3, #4294967295
 800261a:	d021      	beq.n	8002660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800261c:	f7ff f94a 	bl	80018b4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	68ba      	ldr	r2, [r7, #8]
 8002628:	429a      	cmp	r2, r3
 800262a:	d302      	bcc.n	8002632 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	2b00      	cmp	r3, #0
 8002630:	d116      	bne.n	8002660 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	2200      	movs	r2, #0
 8002636:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002638:	68fb      	ldr	r3, [r7, #12]
 800263a:	2220      	movs	r2, #32
 800263c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2200      	movs	r2, #0
 8002644:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264c:	f043 0220 	orr.w	r2, r3, #32
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002654:	68fb      	ldr	r3, [r7, #12]
 8002656:	2200      	movs	r2, #0
 8002658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800265c:	2301      	movs	r3, #1
 800265e:	e007      	b.n	8002670 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	695b      	ldr	r3, [r3, #20]
 8002666:	f003 0304 	and.w	r3, r3, #4
 800266a:	2b04      	cmp	r3, #4
 800266c:	d1ca      	bne.n	8002604 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800266e:	2300      	movs	r3, #0
}
 8002670:	4618      	mov	r0, r3
 8002672:	3710      	adds	r7, #16
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}

08002678 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002678:	b480      	push	{r7}
 800267a:	b083      	sub	sp, #12
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	695b      	ldr	r3, [r3, #20]
 8002686:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800268a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800268e:	d11b      	bne.n	80026c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002698:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	2200      	movs	r2, #0
 800269e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	2220      	movs	r2, #32
 80026a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	2200      	movs	r2, #0
 80026ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026b4:	f043 0204 	orr.w	r2, r3, #4
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2200      	movs	r2, #0
 80026c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80026c4:	2301      	movs	r3, #1
 80026c6:	e000      	b.n	80026ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80026c8:	2300      	movs	r3, #0
}
 80026ca:	4618      	mov	r0, r3
 80026cc:	370c      	adds	r7, #12
 80026ce:	46bd      	mov	sp, r7
 80026d0:	bc80      	pop	{r7}
 80026d2:	4770      	bx	lr

080026d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b086      	sub	sp, #24
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e272      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	681b      	ldr	r3, [r3, #0]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	f000 8087 	beq.w	8002802 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80026f4:	4b92      	ldr	r3, [pc, #584]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80026f6:	685b      	ldr	r3, [r3, #4]
 80026f8:	f003 030c 	and.w	r3, r3, #12
 80026fc:	2b04      	cmp	r3, #4
 80026fe:	d00c      	beq.n	800271a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002700:	4b8f      	ldr	r3, [pc, #572]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f003 030c 	and.w	r3, r3, #12
 8002708:	2b08      	cmp	r3, #8
 800270a:	d112      	bne.n	8002732 <HAL_RCC_OscConfig+0x5e>
 800270c:	4b8c      	ldr	r3, [pc, #560]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800270e:	685b      	ldr	r3, [r3, #4]
 8002710:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002714:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002718:	d10b      	bne.n	8002732 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800271a:	4b89      	ldr	r3, [pc, #548]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d06c      	beq.n	8002800 <HAL_RCC_OscConfig+0x12c>
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	2b00      	cmp	r3, #0
 800272c:	d168      	bne.n	8002800 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800272e:	2301      	movs	r3, #1
 8002730:	e24c      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	685b      	ldr	r3, [r3, #4]
 8002736:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800273a:	d106      	bne.n	800274a <HAL_RCC_OscConfig+0x76>
 800273c:	4b80      	ldr	r3, [pc, #512]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4a7f      	ldr	r2, [pc, #508]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002742:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002746:	6013      	str	r3, [r2, #0]
 8002748:	e02e      	b.n	80027a8 <HAL_RCC_OscConfig+0xd4>
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d10c      	bne.n	800276c <HAL_RCC_OscConfig+0x98>
 8002752:	4b7b      	ldr	r3, [pc, #492]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4a7a      	ldr	r2, [pc, #488]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002758:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800275c:	6013      	str	r3, [r2, #0]
 800275e:	4b78      	ldr	r3, [pc, #480]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4a77      	ldr	r2, [pc, #476]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002764:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002768:	6013      	str	r3, [r2, #0]
 800276a:	e01d      	b.n	80027a8 <HAL_RCC_OscConfig+0xd4>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	685b      	ldr	r3, [r3, #4]
 8002770:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002774:	d10c      	bne.n	8002790 <HAL_RCC_OscConfig+0xbc>
 8002776:	4b72      	ldr	r3, [pc, #456]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a71      	ldr	r2, [pc, #452]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800277c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002780:	6013      	str	r3, [r2, #0]
 8002782:	4b6f      	ldr	r3, [pc, #444]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a6e      	ldr	r2, [pc, #440]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002788:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800278c:	6013      	str	r3, [r2, #0]
 800278e:	e00b      	b.n	80027a8 <HAL_RCC_OscConfig+0xd4>
 8002790:	4b6b      	ldr	r3, [pc, #428]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	4a6a      	ldr	r2, [pc, #424]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002796:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800279a:	6013      	str	r3, [r2, #0]
 800279c:	4b68      	ldr	r3, [pc, #416]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	4a67      	ldr	r2, [pc, #412]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80027a2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	685b      	ldr	r3, [r3, #4]
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d013      	beq.n	80027d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff f880 	bl	80018b4 <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027b8:	f7ff f87c 	bl	80018b4 <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b64      	cmp	r3, #100	; 0x64
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e200      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ca:	4b5d      	ldr	r3, [pc, #372]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d0f0      	beq.n	80027b8 <HAL_RCC_OscConfig+0xe4>
 80027d6:	e014      	b.n	8002802 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027d8:	f7ff f86c 	bl	80018b4 <HAL_GetTick>
 80027dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027de:	e008      	b.n	80027f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80027e0:	f7ff f868 	bl	80018b4 <HAL_GetTick>
 80027e4:	4602      	mov	r2, r0
 80027e6:	693b      	ldr	r3, [r7, #16]
 80027e8:	1ad3      	subs	r3, r2, r3
 80027ea:	2b64      	cmp	r3, #100	; 0x64
 80027ec:	d901      	bls.n	80027f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80027ee:	2303      	movs	r3, #3
 80027f0:	e1ec      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80027f2:	4b53      	ldr	r3, [pc, #332]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d1f0      	bne.n	80027e0 <HAL_RCC_OscConfig+0x10c>
 80027fe:	e000      	b.n	8002802 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002800:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	f003 0302 	and.w	r3, r3, #2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d063      	beq.n	80028d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800280e:	4b4c      	ldr	r3, [pc, #304]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f003 030c 	and.w	r3, r3, #12
 8002816:	2b00      	cmp	r3, #0
 8002818:	d00b      	beq.n	8002832 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800281a:	4b49      	ldr	r3, [pc, #292]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800281c:	685b      	ldr	r3, [r3, #4]
 800281e:	f003 030c 	and.w	r3, r3, #12
 8002822:	2b08      	cmp	r3, #8
 8002824:	d11c      	bne.n	8002860 <HAL_RCC_OscConfig+0x18c>
 8002826:	4b46      	ldr	r3, [pc, #280]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282e:	2b00      	cmp	r3, #0
 8002830:	d116      	bne.n	8002860 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002832:	4b43      	ldr	r3, [pc, #268]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	f003 0302 	and.w	r3, r3, #2
 800283a:	2b00      	cmp	r3, #0
 800283c:	d005      	beq.n	800284a <HAL_RCC_OscConfig+0x176>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	691b      	ldr	r3, [r3, #16]
 8002842:	2b01      	cmp	r3, #1
 8002844:	d001      	beq.n	800284a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002846:	2301      	movs	r3, #1
 8002848:	e1c0      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800284a:	4b3d      	ldr	r3, [pc, #244]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	695b      	ldr	r3, [r3, #20]
 8002856:	00db      	lsls	r3, r3, #3
 8002858:	4939      	ldr	r1, [pc, #228]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800285a:	4313      	orrs	r3, r2
 800285c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800285e:	e03a      	b.n	80028d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	691b      	ldr	r3, [r3, #16]
 8002864:	2b00      	cmp	r3, #0
 8002866:	d020      	beq.n	80028aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002868:	4b36      	ldr	r3, [pc, #216]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 800286a:	2201      	movs	r2, #1
 800286c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800286e:	f7ff f821 	bl	80018b4 <HAL_GetTick>
 8002872:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002874:	e008      	b.n	8002888 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002876:	f7ff f81d 	bl	80018b4 <HAL_GetTick>
 800287a:	4602      	mov	r2, r0
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	1ad3      	subs	r3, r2, r3
 8002880:	2b02      	cmp	r3, #2
 8002882:	d901      	bls.n	8002888 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e1a1      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002888:	4b2d      	ldr	r3, [pc, #180]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0302 	and.w	r3, r3, #2
 8002890:	2b00      	cmp	r3, #0
 8002892:	d0f0      	beq.n	8002876 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002894:	4b2a      	ldr	r3, [pc, #168]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	695b      	ldr	r3, [r3, #20]
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4927      	ldr	r1, [pc, #156]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80028a4:	4313      	orrs	r3, r2
 80028a6:	600b      	str	r3, [r1, #0]
 80028a8:	e015      	b.n	80028d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80028aa:	4b26      	ldr	r3, [pc, #152]	; (8002944 <HAL_RCC_OscConfig+0x270>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b0:	f7ff f800 	bl	80018b4 <HAL_GetTick>
 80028b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028b6:	e008      	b.n	80028ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028b8:	f7fe fffc 	bl	80018b4 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	2b02      	cmp	r3, #2
 80028c4:	d901      	bls.n	80028ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80028c6:	2303      	movs	r3, #3
 80028c8:	e180      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80028ca:	4b1d      	ldr	r3, [pc, #116]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 80028cc:	681b      	ldr	r3, [r3, #0]
 80028ce:	f003 0302 	and.w	r3, r3, #2
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d1f0      	bne.n	80028b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	f003 0308 	and.w	r3, r3, #8
 80028de:	2b00      	cmp	r3, #0
 80028e0:	d03a      	beq.n	8002958 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	699b      	ldr	r3, [r3, #24]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d019      	beq.n	800291e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028ea:	4b17      	ldr	r3, [pc, #92]	; (8002948 <HAL_RCC_OscConfig+0x274>)
 80028ec:	2201      	movs	r2, #1
 80028ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80028f0:	f7fe ffe0 	bl	80018b4 <HAL_GetTick>
 80028f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80028f6:	e008      	b.n	800290a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028f8:	f7fe ffdc 	bl	80018b4 <HAL_GetTick>
 80028fc:	4602      	mov	r2, r0
 80028fe:	693b      	ldr	r3, [r7, #16]
 8002900:	1ad3      	subs	r3, r2, r3
 8002902:	2b02      	cmp	r3, #2
 8002904:	d901      	bls.n	800290a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002906:	2303      	movs	r3, #3
 8002908:	e160      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800290a:	4b0d      	ldr	r3, [pc, #52]	; (8002940 <HAL_RCC_OscConfig+0x26c>)
 800290c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800290e:	f003 0302 	and.w	r3, r3, #2
 8002912:	2b00      	cmp	r3, #0
 8002914:	d0f0      	beq.n	80028f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002916:	2001      	movs	r0, #1
 8002918:	f000 fac4 	bl	8002ea4 <RCC_Delay>
 800291c:	e01c      	b.n	8002958 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800291e:	4b0a      	ldr	r3, [pc, #40]	; (8002948 <HAL_RCC_OscConfig+0x274>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002924:	f7fe ffc6 	bl	80018b4 <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800292a:	e00f      	b.n	800294c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800292c:	f7fe ffc2 	bl	80018b4 <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d908      	bls.n	800294c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e146      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	42420000 	.word	0x42420000
 8002948:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800294c:	4b92      	ldr	r3, [pc, #584]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 800294e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002950:	f003 0302 	and.w	r3, r3, #2
 8002954:	2b00      	cmp	r3, #0
 8002956:	d1e9      	bne.n	800292c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0304 	and.w	r3, r3, #4
 8002960:	2b00      	cmp	r3, #0
 8002962:	f000 80a6 	beq.w	8002ab2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002966:	2300      	movs	r3, #0
 8002968:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800296a:	4b8b      	ldr	r3, [pc, #556]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 800296c:	69db      	ldr	r3, [r3, #28]
 800296e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002972:	2b00      	cmp	r3, #0
 8002974:	d10d      	bne.n	8002992 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002976:	4b88      	ldr	r3, [pc, #544]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002978:	69db      	ldr	r3, [r3, #28]
 800297a:	4a87      	ldr	r2, [pc, #540]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 800297c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002980:	61d3      	str	r3, [r2, #28]
 8002982:	4b85      	ldr	r3, [pc, #532]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002984:	69db      	ldr	r3, [r3, #28]
 8002986:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800298a:	60bb      	str	r3, [r7, #8]
 800298c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800298e:	2301      	movs	r3, #1
 8002990:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002992:	4b82      	ldr	r3, [pc, #520]	; (8002b9c <HAL_RCC_OscConfig+0x4c8>)
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800299a:	2b00      	cmp	r3, #0
 800299c:	d118      	bne.n	80029d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800299e:	4b7f      	ldr	r3, [pc, #508]	; (8002b9c <HAL_RCC_OscConfig+0x4c8>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a7e      	ldr	r2, [pc, #504]	; (8002b9c <HAL_RCC_OscConfig+0x4c8>)
 80029a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80029aa:	f7fe ff83 	bl	80018b4 <HAL_GetTick>
 80029ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029b0:	e008      	b.n	80029c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80029b2:	f7fe ff7f 	bl	80018b4 <HAL_GetTick>
 80029b6:	4602      	mov	r2, r0
 80029b8:	693b      	ldr	r3, [r7, #16]
 80029ba:	1ad3      	subs	r3, r2, r3
 80029bc:	2b64      	cmp	r3, #100	; 0x64
 80029be:	d901      	bls.n	80029c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80029c0:	2303      	movs	r3, #3
 80029c2:	e103      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80029c4:	4b75      	ldr	r3, [pc, #468]	; (8002b9c <HAL_RCC_OscConfig+0x4c8>)
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d0f0      	beq.n	80029b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	68db      	ldr	r3, [r3, #12]
 80029d4:	2b01      	cmp	r3, #1
 80029d6:	d106      	bne.n	80029e6 <HAL_RCC_OscConfig+0x312>
 80029d8:	4b6f      	ldr	r3, [pc, #444]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 80029da:	6a1b      	ldr	r3, [r3, #32]
 80029dc:	4a6e      	ldr	r2, [pc, #440]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 80029de:	f043 0301 	orr.w	r3, r3, #1
 80029e2:	6213      	str	r3, [r2, #32]
 80029e4:	e02d      	b.n	8002a42 <HAL_RCC_OscConfig+0x36e>
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	68db      	ldr	r3, [r3, #12]
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d10c      	bne.n	8002a08 <HAL_RCC_OscConfig+0x334>
 80029ee:	4b6a      	ldr	r3, [pc, #424]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 80029f0:	6a1b      	ldr	r3, [r3, #32]
 80029f2:	4a69      	ldr	r2, [pc, #420]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 80029f4:	f023 0301 	bic.w	r3, r3, #1
 80029f8:	6213      	str	r3, [r2, #32]
 80029fa:	4b67      	ldr	r3, [pc, #412]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 80029fc:	6a1b      	ldr	r3, [r3, #32]
 80029fe:	4a66      	ldr	r2, [pc, #408]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a00:	f023 0304 	bic.w	r3, r3, #4
 8002a04:	6213      	str	r3, [r2, #32]
 8002a06:	e01c      	b.n	8002a42 <HAL_RCC_OscConfig+0x36e>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	68db      	ldr	r3, [r3, #12]
 8002a0c:	2b05      	cmp	r3, #5
 8002a0e:	d10c      	bne.n	8002a2a <HAL_RCC_OscConfig+0x356>
 8002a10:	4b61      	ldr	r3, [pc, #388]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a12:	6a1b      	ldr	r3, [r3, #32]
 8002a14:	4a60      	ldr	r2, [pc, #384]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a16:	f043 0304 	orr.w	r3, r3, #4
 8002a1a:	6213      	str	r3, [r2, #32]
 8002a1c:	4b5e      	ldr	r3, [pc, #376]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a1e:	6a1b      	ldr	r3, [r3, #32]
 8002a20:	4a5d      	ldr	r2, [pc, #372]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a22:	f043 0301 	orr.w	r3, r3, #1
 8002a26:	6213      	str	r3, [r2, #32]
 8002a28:	e00b      	b.n	8002a42 <HAL_RCC_OscConfig+0x36e>
 8002a2a:	4b5b      	ldr	r3, [pc, #364]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	4a5a      	ldr	r2, [pc, #360]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6213      	str	r3, [r2, #32]
 8002a36:	4b58      	ldr	r3, [pc, #352]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a38:	6a1b      	ldr	r3, [r3, #32]
 8002a3a:	4a57      	ldr	r2, [pc, #348]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a3c:	f023 0304 	bic.w	r3, r3, #4
 8002a40:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	68db      	ldr	r3, [r3, #12]
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d015      	beq.n	8002a76 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a4a:	f7fe ff33 	bl	80018b4 <HAL_GetTick>
 8002a4e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a50:	e00a      	b.n	8002a68 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a52:	f7fe ff2f 	bl	80018b4 <HAL_GetTick>
 8002a56:	4602      	mov	r2, r0
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	1ad3      	subs	r3, r2, r3
 8002a5c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a60:	4293      	cmp	r3, r2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e0b1      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002a68:	4b4b      	ldr	r3, [pc, #300]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a6a:	6a1b      	ldr	r3, [r3, #32]
 8002a6c:	f003 0302 	and.w	r3, r3, #2
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0ee      	beq.n	8002a52 <HAL_RCC_OscConfig+0x37e>
 8002a74:	e014      	b.n	8002aa0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002a76:	f7fe ff1d 	bl	80018b4 <HAL_GetTick>
 8002a7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a7c:	e00a      	b.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7e:	f7fe ff19 	bl	80018b4 <HAL_GetTick>
 8002a82:	4602      	mov	r2, r0
 8002a84:	693b      	ldr	r3, [r7, #16]
 8002a86:	1ad3      	subs	r3, r2, r3
 8002a88:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d901      	bls.n	8002a94 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002a90:	2303      	movs	r3, #3
 8002a92:	e09b      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002a94:	4b40      	ldr	r3, [pc, #256]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002a96:	6a1b      	ldr	r3, [r3, #32]
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ee      	bne.n	8002a7e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002aa0:	7dfb      	ldrb	r3, [r7, #23]
 8002aa2:	2b01      	cmp	r3, #1
 8002aa4:	d105      	bne.n	8002ab2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002aa6:	4b3c      	ldr	r3, [pc, #240]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002aa8:	69db      	ldr	r3, [r3, #28]
 8002aaa:	4a3b      	ldr	r2, [pc, #236]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002aac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ab0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f000 8087 	beq.w	8002bca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002abc:	4b36      	ldr	r3, [pc, #216]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002abe:	685b      	ldr	r3, [r3, #4]
 8002ac0:	f003 030c 	and.w	r3, r3, #12
 8002ac4:	2b08      	cmp	r3, #8
 8002ac6:	d061      	beq.n	8002b8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	69db      	ldr	r3, [r3, #28]
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d146      	bne.n	8002b5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ad0:	4b33      	ldr	r3, [pc, #204]	; (8002ba0 <HAL_RCC_OscConfig+0x4cc>)
 8002ad2:	2200      	movs	r2, #0
 8002ad4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ad6:	f7fe feed 	bl	80018b4 <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ade:	f7fe fee9 	bl	80018b4 <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e06d      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002af0:	4b29      	ldr	r3, [pc, #164]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d1f0      	bne.n	8002ade <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6a1b      	ldr	r3, [r3, #32]
 8002b00:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b04:	d108      	bne.n	8002b18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b06:	4b24      	ldr	r3, [pc, #144]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002b08:	685b      	ldr	r3, [r3, #4]
 8002b0a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	689b      	ldr	r3, [r3, #8]
 8002b12:	4921      	ldr	r1, [pc, #132]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002b14:	4313      	orrs	r3, r2
 8002b16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b18:	4b1f      	ldr	r3, [pc, #124]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6a19      	ldr	r1, [r3, #32]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	430b      	orrs	r3, r1
 8002b2a:	491b      	ldr	r1, [pc, #108]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002b2c:	4313      	orrs	r3, r2
 8002b2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002b30:	4b1b      	ldr	r3, [pc, #108]	; (8002ba0 <HAL_RCC_OscConfig+0x4cc>)
 8002b32:	2201      	movs	r2, #1
 8002b34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b36:	f7fe febd 	bl	80018b4 <HAL_GetTick>
 8002b3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b3c:	e008      	b.n	8002b50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b3e:	f7fe feb9 	bl	80018b4 <HAL_GetTick>
 8002b42:	4602      	mov	r2, r0
 8002b44:	693b      	ldr	r3, [r7, #16]
 8002b46:	1ad3      	subs	r3, r2, r3
 8002b48:	2b02      	cmp	r3, #2
 8002b4a:	d901      	bls.n	8002b50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002b4c:	2303      	movs	r3, #3
 8002b4e:	e03d      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002b50:	4b11      	ldr	r3, [pc, #68]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d0f0      	beq.n	8002b3e <HAL_RCC_OscConfig+0x46a>
 8002b5c:	e035      	b.n	8002bca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b5e:	4b10      	ldr	r3, [pc, #64]	; (8002ba0 <HAL_RCC_OscConfig+0x4cc>)
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b64:	f7fe fea6 	bl	80018b4 <HAL_GetTick>
 8002b68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b6a:	e008      	b.n	8002b7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b6c:	f7fe fea2 	bl	80018b4 <HAL_GetTick>
 8002b70:	4602      	mov	r2, r0
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	2b02      	cmp	r3, #2
 8002b78:	d901      	bls.n	8002b7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002b7a:	2303      	movs	r3, #3
 8002b7c:	e026      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b7e:	4b06      	ldr	r3, [pc, #24]	; (8002b98 <HAL_RCC_OscConfig+0x4c4>)
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b86:	2b00      	cmp	r3, #0
 8002b88:	d1f0      	bne.n	8002b6c <HAL_RCC_OscConfig+0x498>
 8002b8a:	e01e      	b.n	8002bca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	69db      	ldr	r3, [r3, #28]
 8002b90:	2b01      	cmp	r3, #1
 8002b92:	d107      	bne.n	8002ba4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002b94:	2301      	movs	r3, #1
 8002b96:	e019      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
 8002b98:	40021000 	.word	0x40021000
 8002b9c:	40007000 	.word	0x40007000
 8002ba0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002ba4:	4b0b      	ldr	r3, [pc, #44]	; (8002bd4 <HAL_RCC_OscConfig+0x500>)
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002baa:	68fb      	ldr	r3, [r7, #12]
 8002bac:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6a1b      	ldr	r3, [r3, #32]
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d106      	bne.n	8002bc6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002bc2:	429a      	cmp	r2, r3
 8002bc4:	d001      	beq.n	8002bca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002bc6:	2301      	movs	r3, #1
 8002bc8:	e000      	b.n	8002bcc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002bca:	2300      	movs	r3, #0
}
 8002bcc:	4618      	mov	r0, r3
 8002bce:	3718      	adds	r7, #24
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	bd80      	pop	{r7, pc}
 8002bd4:	40021000 	.word	0x40021000

08002bd8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bd8:	b580      	push	{r7, lr}
 8002bda:	b084      	sub	sp, #16
 8002bdc:	af00      	add	r7, sp, #0
 8002bde:	6078      	str	r0, [r7, #4]
 8002be0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d101      	bne.n	8002bec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002be8:	2301      	movs	r3, #1
 8002bea:	e0d0      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002bec:	4b6a      	ldr	r3, [pc, #424]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	f003 0307 	and.w	r3, r3, #7
 8002bf4:	683a      	ldr	r2, [r7, #0]
 8002bf6:	429a      	cmp	r2, r3
 8002bf8:	d910      	bls.n	8002c1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bfa:	4b67      	ldr	r3, [pc, #412]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	f023 0207 	bic.w	r2, r3, #7
 8002c02:	4965      	ldr	r1, [pc, #404]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c04:	683b      	ldr	r3, [r7, #0]
 8002c06:	4313      	orrs	r3, r2
 8002c08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c0a:	4b63      	ldr	r3, [pc, #396]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	f003 0307 	and.w	r3, r3, #7
 8002c12:	683a      	ldr	r2, [r7, #0]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	d001      	beq.n	8002c1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e0b8      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 0302 	and.w	r3, r3, #2
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d020      	beq.n	8002c6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f003 0304 	and.w	r3, r3, #4
 8002c30:	2b00      	cmp	r3, #0
 8002c32:	d005      	beq.n	8002c40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002c34:	4b59      	ldr	r3, [pc, #356]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	4a58      	ldr	r2, [pc, #352]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c3a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002c3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	f003 0308 	and.w	r3, r3, #8
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d005      	beq.n	8002c58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002c4c:	4b53      	ldr	r3, [pc, #332]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c4e:	685b      	ldr	r3, [r3, #4]
 8002c50:	4a52      	ldr	r2, [pc, #328]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c52:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002c56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c58:	4b50      	ldr	r3, [pc, #320]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c5a:	685b      	ldr	r3, [r3, #4]
 8002c5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	689b      	ldr	r3, [r3, #8]
 8002c64:	494d      	ldr	r1, [pc, #308]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c66:	4313      	orrs	r3, r2
 8002c68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f003 0301 	and.w	r3, r3, #1
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d040      	beq.n	8002cf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d107      	bne.n	8002c8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002c7e:	4b47      	ldr	r3, [pc, #284]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d115      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e07f      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	685b      	ldr	r3, [r3, #4]
 8002c92:	2b02      	cmp	r3, #2
 8002c94:	d107      	bne.n	8002ca6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c96:	4b41      	ldr	r3, [pc, #260]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d109      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e073      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca6:	4b3d      	ldr	r3, [pc, #244]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d101      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e06b      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002cb6:	4b39      	ldr	r3, [pc, #228]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	f023 0203 	bic.w	r2, r3, #3
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	4936      	ldr	r1, [pc, #216]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc4:	4313      	orrs	r3, r2
 8002cc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002cc8:	f7fe fdf4 	bl	80018b4 <HAL_GetTick>
 8002ccc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cce:	e00a      	b.n	8002ce6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cd0:	f7fe fdf0 	bl	80018b4 <HAL_GetTick>
 8002cd4:	4602      	mov	r2, r0
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	1ad3      	subs	r3, r2, r3
 8002cda:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cde:	4293      	cmp	r3, r2
 8002ce0:	d901      	bls.n	8002ce6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002ce2:	2303      	movs	r3, #3
 8002ce4:	e053      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ce6:	4b2d      	ldr	r3, [pc, #180]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	f003 020c 	and.w	r2, r3, #12
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	685b      	ldr	r3, [r3, #4]
 8002cf2:	009b      	lsls	r3, r3, #2
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	d1eb      	bne.n	8002cd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cf8:	4b27      	ldr	r3, [pc, #156]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002cfa:	681b      	ldr	r3, [r3, #0]
 8002cfc:	f003 0307 	and.w	r3, r3, #7
 8002d00:	683a      	ldr	r2, [r7, #0]
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d210      	bcs.n	8002d28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d06:	4b24      	ldr	r3, [pc, #144]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f023 0207 	bic.w	r2, r3, #7
 8002d0e:	4922      	ldr	r1, [pc, #136]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d16:	4b20      	ldr	r3, [pc, #128]	; (8002d98 <HAL_RCC_ClockConfig+0x1c0>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0307 	and.w	r3, r3, #7
 8002d1e:	683a      	ldr	r2, [r7, #0]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	d001      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d24:	2301      	movs	r3, #1
 8002d26:	e032      	b.n	8002d8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0304 	and.w	r3, r3, #4
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d008      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d34:	4b19      	ldr	r3, [pc, #100]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d36:	685b      	ldr	r3, [r3, #4]
 8002d38:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68db      	ldr	r3, [r3, #12]
 8002d40:	4916      	ldr	r1, [pc, #88]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d42:	4313      	orrs	r3, r2
 8002d44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f003 0308 	and.w	r3, r3, #8
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d009      	beq.n	8002d66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002d52:	4b12      	ldr	r3, [pc, #72]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d54:	685b      	ldr	r3, [r3, #4]
 8002d56:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	691b      	ldr	r3, [r3, #16]
 8002d5e:	00db      	lsls	r3, r3, #3
 8002d60:	490e      	ldr	r1, [pc, #56]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d62:	4313      	orrs	r3, r2
 8002d64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002d66:	f000 f821 	bl	8002dac <HAL_RCC_GetSysClockFreq>
 8002d6a:	4602      	mov	r2, r0
 8002d6c:	4b0b      	ldr	r3, [pc, #44]	; (8002d9c <HAL_RCC_ClockConfig+0x1c4>)
 8002d6e:	685b      	ldr	r3, [r3, #4]
 8002d70:	091b      	lsrs	r3, r3, #4
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	490a      	ldr	r1, [pc, #40]	; (8002da0 <HAL_RCC_ClockConfig+0x1c8>)
 8002d78:	5ccb      	ldrb	r3, [r1, r3]
 8002d7a:	fa22 f303 	lsr.w	r3, r2, r3
 8002d7e:	4a09      	ldr	r2, [pc, #36]	; (8002da4 <HAL_RCC_ClockConfig+0x1cc>)
 8002d80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002d82:	4b09      	ldr	r3, [pc, #36]	; (8002da8 <HAL_RCC_ClockConfig+0x1d0>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	4618      	mov	r0, r3
 8002d88:	f7fe fd52 	bl	8001830 <HAL_InitTick>

  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}
 8002d96:	bf00      	nop
 8002d98:	40022000 	.word	0x40022000
 8002d9c:	40021000 	.word	0x40021000
 8002da0:	08007d68 	.word	0x08007d68
 8002da4:	20000000 	.word	0x20000000
 8002da8:	20000004 	.word	0x20000004

08002dac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dac:	b490      	push	{r4, r7}
 8002dae:	b08a      	sub	sp, #40	; 0x28
 8002db0:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002db2:	4b29      	ldr	r3, [pc, #164]	; (8002e58 <HAL_RCC_GetSysClockFreq+0xac>)
 8002db4:	1d3c      	adds	r4, r7, #4
 8002db6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002db8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002dbc:	f240 2301 	movw	r3, #513	; 0x201
 8002dc0:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	61fb      	str	r3, [r7, #28]
 8002dc6:	2300      	movs	r3, #0
 8002dc8:	61bb      	str	r3, [r7, #24]
 8002dca:	2300      	movs	r3, #0
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dce:	2300      	movs	r3, #0
 8002dd0:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002dd6:	4b21      	ldr	r3, [pc, #132]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002dd8:	685b      	ldr	r3, [r3, #4]
 8002dda:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	2b04      	cmp	r3, #4
 8002de4:	d002      	beq.n	8002dec <HAL_RCC_GetSysClockFreq+0x40>
 8002de6:	2b08      	cmp	r3, #8
 8002de8:	d003      	beq.n	8002df2 <HAL_RCC_GetSysClockFreq+0x46>
 8002dea:	e02b      	b.n	8002e44 <HAL_RCC_GetSysClockFreq+0x98>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002dec:	4b1c      	ldr	r3, [pc, #112]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002dee:	623b      	str	r3, [r7, #32]
      break;
 8002df0:	e02b      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	0c9b      	lsrs	r3, r3, #18
 8002df6:	f003 030f 	and.w	r3, r3, #15
 8002dfa:	3328      	adds	r3, #40	; 0x28
 8002dfc:	443b      	add	r3, r7
 8002dfe:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e02:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e04:	69fb      	ldr	r3, [r7, #28]
 8002e06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d012      	beq.n	8002e34 <HAL_RCC_GetSysClockFreq+0x88>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e0e:	4b13      	ldr	r3, [pc, #76]	; (8002e5c <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e10:	685b      	ldr	r3, [r3, #4]
 8002e12:	0c5b      	lsrs	r3, r3, #17
 8002e14:	f003 0301 	and.w	r3, r3, #1
 8002e18:	3328      	adds	r3, #40	; 0x28
 8002e1a:	443b      	add	r3, r7
 8002e1c:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e20:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	4a0e      	ldr	r2, [pc, #56]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e26:	fb03 f202 	mul.w	r2, r3, r2
 8002e2a:	69bb      	ldr	r3, [r7, #24]
 8002e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e30:	627b      	str	r3, [r7, #36]	; 0x24
 8002e32:	e004      	b.n	8002e3e <HAL_RCC_GetSysClockFreq+0x92>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002e34:	697b      	ldr	r3, [r7, #20]
 8002e36:	4a0b      	ldr	r2, [pc, #44]	; (8002e64 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e38:	fb02 f303 	mul.w	r3, r2, r3
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e40:	623b      	str	r3, [r7, #32]
      break;
 8002e42:	e002      	b.n	8002e4a <HAL_RCC_GetSysClockFreq+0x9e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002e44:	4b06      	ldr	r3, [pc, #24]	; (8002e60 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e46:	623b      	str	r3, [r7, #32]
      break;
 8002e48:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002e4a:	6a3b      	ldr	r3, [r7, #32]
}
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	3728      	adds	r7, #40	; 0x28
 8002e50:	46bd      	mov	sp, r7
 8002e52:	bc90      	pop	{r4, r7}
 8002e54:	4770      	bx	lr
 8002e56:	bf00      	nop
 8002e58:	08007d58 	.word	0x08007d58
 8002e5c:	40021000 	.word	0x40021000
 8002e60:	007a1200 	.word	0x007a1200
 8002e64:	003d0900 	.word	0x003d0900

08002e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002e6c:	4b02      	ldr	r3, [pc, #8]	; (8002e78 <HAL_RCC_GetHCLKFreq+0x10>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
}
 8002e70:	4618      	mov	r0, r3
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bc80      	pop	{r7}
 8002e76:	4770      	bx	lr
 8002e78:	20000000 	.word	0x20000000

08002e7c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002e7c:	b580      	push	{r7, lr}
 8002e7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002e80:	f7ff fff2 	bl	8002e68 <HAL_RCC_GetHCLKFreq>
 8002e84:	4602      	mov	r2, r0
 8002e86:	4b05      	ldr	r3, [pc, #20]	; (8002e9c <HAL_RCC_GetPCLK1Freq+0x20>)
 8002e88:	685b      	ldr	r3, [r3, #4]
 8002e8a:	0a1b      	lsrs	r3, r3, #8
 8002e8c:	f003 0307 	and.w	r3, r3, #7
 8002e90:	4903      	ldr	r1, [pc, #12]	; (8002ea0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002e92:	5ccb      	ldrb	r3, [r1, r3]
 8002e94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002e98:	4618      	mov	r0, r3
 8002e9a:	bd80      	pop	{r7, pc}
 8002e9c:	40021000 	.word	0x40021000
 8002ea0:	08007d78 	.word	0x08007d78

08002ea4 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	b085      	sub	sp, #20
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002eac:	4b0a      	ldr	r3, [pc, #40]	; (8002ed8 <RCC_Delay+0x34>)
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4a0a      	ldr	r2, [pc, #40]	; (8002edc <RCC_Delay+0x38>)
 8002eb2:	fba2 2303 	umull	r2, r3, r2, r3
 8002eb6:	0a5b      	lsrs	r3, r3, #9
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	fb02 f303 	mul.w	r3, r2, r3
 8002ebe:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002ec0:	bf00      	nop
  }
  while (Delay --);
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	1e5a      	subs	r2, r3, #1
 8002ec6:	60fa      	str	r2, [r7, #12]
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1f9      	bne.n	8002ec0 <RCC_Delay+0x1c>
}
 8002ecc:	bf00      	nop
 8002ece:	bf00      	nop
 8002ed0:	3714      	adds	r7, #20
 8002ed2:	46bd      	mov	sp, r7
 8002ed4:	bc80      	pop	{r7}
 8002ed6:	4770      	bx	lr
 8002ed8:	20000000 	.word	0x20000000
 8002edc:	10624dd3 	.word	0x10624dd3

08002ee0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b082      	sub	sp, #8
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e041      	b.n	8002f76 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d106      	bne.n	8002f0c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2200      	movs	r2, #0
 8002f02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002f06:	6878      	ldr	r0, [r7, #4]
 8002f08:	f7fe fb4a 	bl	80015a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	2202      	movs	r2, #2
 8002f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681a      	ldr	r2, [r3, #0]
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3304      	adds	r3, #4
 8002f1c:	4619      	mov	r1, r3
 8002f1e:	4610      	mov	r0, r2
 8002f20:	f000 f93c 	bl	800319c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	2201      	movs	r2, #1
 8002f28:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	2201      	movs	r2, #1
 8002f30:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	2201      	movs	r2, #1
 8002f38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2201      	movs	r2, #1
 8002f48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	2201      	movs	r2, #1
 8002f50:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	2201      	movs	r2, #1
 8002f58:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	2201      	movs	r2, #1
 8002f68:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	2201      	movs	r2, #1
 8002f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002f74:	2300      	movs	r3, #0
}
 8002f76:	4618      	mov	r0, r3
 8002f78:	3708      	adds	r7, #8
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bd80      	pop	{r7, pc}
	...

08002f80 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8002f80:	b480      	push	{r7}
 8002f82:	b085      	sub	sp, #20
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d001      	beq.n	8002f98 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	e032      	b.n	8002ffe <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	2202      	movs	r2, #2
 8002f9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4a18      	ldr	r2, [pc, #96]	; (8003008 <HAL_TIM_Base_Start+0x88>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d00e      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x48>
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fb2:	d009      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x48>
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a14      	ldr	r2, [pc, #80]	; (800300c <HAL_TIM_Base_Start+0x8c>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d004      	beq.n	8002fc8 <HAL_TIM_Base_Start+0x48>
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4a13      	ldr	r2, [pc, #76]	; (8003010 <HAL_TIM_Base_Start+0x90>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d111      	bne.n	8002fec <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689b      	ldr	r3, [r3, #8]
 8002fce:	f003 0307 	and.w	r3, r3, #7
 8002fd2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fd4:	68fb      	ldr	r3, [r7, #12]
 8002fd6:	2b06      	cmp	r3, #6
 8002fd8:	d010      	beq.n	8002ffc <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	681b      	ldr	r3, [r3, #0]
 8002fde:	681a      	ldr	r2, [r3, #0]
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f042 0201 	orr.w	r2, r2, #1
 8002fe8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002fea:	e007      	b.n	8002ffc <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	681a      	ldr	r2, [r3, #0]
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f042 0201 	orr.w	r2, r2, #1
 8002ffa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ffc:	2300      	movs	r3, #0
}
 8002ffe:	4618      	mov	r0, r3
 8003000:	3714      	adds	r7, #20
 8003002:	46bd      	mov	sp, r7
 8003004:	bc80      	pop	{r7}
 8003006:	4770      	bx	lr
 8003008:	40012c00 	.word	0x40012c00
 800300c:	40000400 	.word	0x40000400
 8003010:	40000800 	.word	0x40000800

08003014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b084      	sub	sp, #16
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
 800301c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003024:	2b01      	cmp	r3, #1
 8003026:	d101      	bne.n	800302c <HAL_TIM_ConfigClockSource+0x18>
 8003028:	2302      	movs	r3, #2
 800302a:	e0b3      	b.n	8003194 <HAL_TIM_ConfigClockSource+0x180>
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2201      	movs	r2, #1
 8003030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	2202      	movs	r2, #2
 8003038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800304a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003052:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	681b      	ldr	r3, [r3, #0]
 8003058:	68fa      	ldr	r2, [r7, #12]
 800305a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800305c:	683b      	ldr	r3, [r7, #0]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003064:	d03e      	beq.n	80030e4 <HAL_TIM_ConfigClockSource+0xd0>
 8003066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800306a:	f200 8087 	bhi.w	800317c <HAL_TIM_ConfigClockSource+0x168>
 800306e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003072:	f000 8085 	beq.w	8003180 <HAL_TIM_ConfigClockSource+0x16c>
 8003076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800307a:	d87f      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 800307c:	2b70      	cmp	r3, #112	; 0x70
 800307e:	d01a      	beq.n	80030b6 <HAL_TIM_ConfigClockSource+0xa2>
 8003080:	2b70      	cmp	r3, #112	; 0x70
 8003082:	d87b      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 8003084:	2b60      	cmp	r3, #96	; 0x60
 8003086:	d050      	beq.n	800312a <HAL_TIM_ConfigClockSource+0x116>
 8003088:	2b60      	cmp	r3, #96	; 0x60
 800308a:	d877      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 800308c:	2b50      	cmp	r3, #80	; 0x50
 800308e:	d03c      	beq.n	800310a <HAL_TIM_ConfigClockSource+0xf6>
 8003090:	2b50      	cmp	r3, #80	; 0x50
 8003092:	d873      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 8003094:	2b40      	cmp	r3, #64	; 0x40
 8003096:	d058      	beq.n	800314a <HAL_TIM_ConfigClockSource+0x136>
 8003098:	2b40      	cmp	r3, #64	; 0x40
 800309a:	d86f      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 800309c:	2b30      	cmp	r3, #48	; 0x30
 800309e:	d064      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x156>
 80030a0:	2b30      	cmp	r3, #48	; 0x30
 80030a2:	d86b      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 80030a4:	2b20      	cmp	r3, #32
 80030a6:	d060      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x156>
 80030a8:	2b20      	cmp	r3, #32
 80030aa:	d867      	bhi.n	800317c <HAL_TIM_ConfigClockSource+0x168>
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d05c      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x156>
 80030b0:	2b10      	cmp	r3, #16
 80030b2:	d05a      	beq.n	800316a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80030b4:	e062      	b.n	800317c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6818      	ldr	r0, [r3, #0]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	6899      	ldr	r1, [r3, #8]
 80030be:	683b      	ldr	r3, [r7, #0]
 80030c0:	685a      	ldr	r2, [r3, #4]
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	68db      	ldr	r3, [r3, #12]
 80030c6:	f000 f942 	bl	800334e <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	689b      	ldr	r3, [r3, #8]
 80030d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80030d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	68fa      	ldr	r2, [r7, #12]
 80030e0:	609a      	str	r2, [r3, #8]
      break;
 80030e2:	e04e      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6818      	ldr	r0, [r3, #0]
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	6899      	ldr	r1, [r3, #8]
 80030ec:	683b      	ldr	r3, [r7, #0]
 80030ee:	685a      	ldr	r2, [r3, #4]
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	68db      	ldr	r3, [r3, #12]
 80030f4:	f000 f92b 	bl	800334e <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	689a      	ldr	r2, [r3, #8]
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003106:	609a      	str	r2, [r3, #8]
      break;
 8003108:	e03b      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	683b      	ldr	r3, [r7, #0]
 8003110:	6859      	ldr	r1, [r3, #4]
 8003112:	683b      	ldr	r3, [r7, #0]
 8003114:	68db      	ldr	r3, [r3, #12]
 8003116:	461a      	mov	r2, r3
 8003118:	f000 f8a2 	bl	8003260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	2150      	movs	r1, #80	; 0x50
 8003122:	4618      	mov	r0, r3
 8003124:	f000 f8f9 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8003128:	e02b      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	6818      	ldr	r0, [r3, #0]
 800312e:	683b      	ldr	r3, [r7, #0]
 8003130:	6859      	ldr	r1, [r3, #4]
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	68db      	ldr	r3, [r3, #12]
 8003136:	461a      	mov	r2, r3
 8003138:	f000 f8c0 	bl	80032bc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	2160      	movs	r1, #96	; 0x60
 8003142:	4618      	mov	r0, r3
 8003144:	f000 f8e9 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8003148:	e01b      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	6818      	ldr	r0, [r3, #0]
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	6859      	ldr	r1, [r3, #4]
 8003152:	683b      	ldr	r3, [r7, #0]
 8003154:	68db      	ldr	r3, [r3, #12]
 8003156:	461a      	mov	r2, r3
 8003158:	f000 f882 	bl	8003260 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	2140      	movs	r1, #64	; 0x40
 8003162:	4618      	mov	r0, r3
 8003164:	f000 f8d9 	bl	800331a <TIM_ITRx_SetConfig>
      break;
 8003168:	e00b      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4619      	mov	r1, r3
 8003174:	4610      	mov	r0, r2
 8003176:	f000 f8d0 	bl	800331a <TIM_ITRx_SetConfig>
        break;
 800317a:	e002      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800317c:	bf00      	nop
 800317e:	e000      	b.n	8003182 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003180:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2200      	movs	r2, #0
 800318e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003192:	2300      	movs	r3, #0
}
 8003194:	4618      	mov	r0, r3
 8003196:	3710      	adds	r7, #16
 8003198:	46bd      	mov	sp, r7
 800319a:	bd80      	pop	{r7, pc}

0800319c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800319c:	b480      	push	{r7}
 800319e:	b085      	sub	sp, #20
 80031a0:	af00      	add	r7, sp, #0
 80031a2:	6078      	str	r0, [r7, #4]
 80031a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	4a29      	ldr	r2, [pc, #164]	; (8003254 <TIM_Base_SetConfig+0xb8>)
 80031b0:	4293      	cmp	r3, r2
 80031b2:	d00b      	beq.n	80031cc <TIM_Base_SetConfig+0x30>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ba:	d007      	beq.n	80031cc <TIM_Base_SetConfig+0x30>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a26      	ldr	r2, [pc, #152]	; (8003258 <TIM_Base_SetConfig+0xbc>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d003      	beq.n	80031cc <TIM_Base_SetConfig+0x30>
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	4a25      	ldr	r2, [pc, #148]	; (800325c <TIM_Base_SetConfig+0xc0>)
 80031c8:	4293      	cmp	r3, r2
 80031ca:	d108      	bne.n	80031de <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80031d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	68fa      	ldr	r2, [r7, #12]
 80031da:	4313      	orrs	r3, r2
 80031dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a1c      	ldr	r2, [pc, #112]	; (8003254 <TIM_Base_SetConfig+0xb8>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d00b      	beq.n	80031fe <TIM_Base_SetConfig+0x62>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80031ec:	d007      	beq.n	80031fe <TIM_Base_SetConfig+0x62>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a19      	ldr	r2, [pc, #100]	; (8003258 <TIM_Base_SetConfig+0xbc>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d003      	beq.n	80031fe <TIM_Base_SetConfig+0x62>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	4a18      	ldr	r2, [pc, #96]	; (800325c <TIM_Base_SetConfig+0xc0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d108      	bne.n	8003210 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003204:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	68db      	ldr	r3, [r3, #12]
 800320a:	68fa      	ldr	r2, [r7, #12]
 800320c:	4313      	orrs	r3, r2
 800320e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003210:	68fb      	ldr	r3, [r7, #12]
 8003212:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	695b      	ldr	r3, [r3, #20]
 800321a:	4313      	orrs	r3, r2
 800321c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	68fa      	ldr	r2, [r7, #12]
 8003222:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	689a      	ldr	r2, [r3, #8]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	681a      	ldr	r2, [r3, #0]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a07      	ldr	r2, [pc, #28]	; (8003254 <TIM_Base_SetConfig+0xb8>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d103      	bne.n	8003244 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	2201      	movs	r2, #1
 8003248:	615a      	str	r2, [r3, #20]
}
 800324a:	bf00      	nop
 800324c:	3714      	adds	r7, #20
 800324e:	46bd      	mov	sp, r7
 8003250:	bc80      	pop	{r7}
 8003252:	4770      	bx	lr
 8003254:	40012c00 	.word	0x40012c00
 8003258:	40000400 	.word	0x40000400
 800325c:	40000800 	.word	0x40000800

08003260 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003260:	b480      	push	{r7}
 8003262:	b087      	sub	sp, #28
 8003264:	af00      	add	r7, sp, #0
 8003266:	60f8      	str	r0, [r7, #12]
 8003268:	60b9      	str	r1, [r7, #8]
 800326a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a1b      	ldr	r3, [r3, #32]
 8003270:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	6a1b      	ldr	r3, [r3, #32]
 8003276:	f023 0201 	bic.w	r2, r3, #1
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	699b      	ldr	r3, [r3, #24]
 8003282:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003284:	693b      	ldr	r3, [r7, #16]
 8003286:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800328a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	011b      	lsls	r3, r3, #4
 8003290:	693a      	ldr	r2, [r7, #16]
 8003292:	4313      	orrs	r3, r2
 8003294:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003296:	697b      	ldr	r3, [r7, #20]
 8003298:	f023 030a 	bic.w	r3, r3, #10
 800329c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800329e:	697a      	ldr	r2, [r7, #20]
 80032a0:	68bb      	ldr	r3, [r7, #8]
 80032a2:	4313      	orrs	r3, r2
 80032a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	693a      	ldr	r2, [r7, #16]
 80032aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	697a      	ldr	r2, [r7, #20]
 80032b0:	621a      	str	r2, [r3, #32]
}
 80032b2:	bf00      	nop
 80032b4:	371c      	adds	r7, #28
 80032b6:	46bd      	mov	sp, r7
 80032b8:	bc80      	pop	{r7}
 80032ba:	4770      	bx	lr

080032bc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80032bc:	b480      	push	{r7}
 80032be:	b087      	sub	sp, #28
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	6a1b      	ldr	r3, [r3, #32]
 80032cc:	f023 0210 	bic.w	r2, r3, #16
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	699b      	ldr	r3, [r3, #24]
 80032d8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	6a1b      	ldr	r3, [r3, #32]
 80032de:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80032e0:	697b      	ldr	r3, [r7, #20]
 80032e2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80032e6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	031b      	lsls	r3, r3, #12
 80032ec:	697a      	ldr	r2, [r7, #20]
 80032ee:	4313      	orrs	r3, r2
 80032f0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80032f2:	693b      	ldr	r3, [r7, #16]
 80032f4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80032f8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80032fa:	68bb      	ldr	r3, [r7, #8]
 80032fc:	011b      	lsls	r3, r3, #4
 80032fe:	693a      	ldr	r2, [r7, #16]
 8003300:	4313      	orrs	r3, r2
 8003302:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	697a      	ldr	r2, [r7, #20]
 8003308:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	693a      	ldr	r2, [r7, #16]
 800330e:	621a      	str	r2, [r3, #32]
}
 8003310:	bf00      	nop
 8003312:	371c      	adds	r7, #28
 8003314:	46bd      	mov	sp, r7
 8003316:	bc80      	pop	{r7}
 8003318:	4770      	bx	lr

0800331a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800331a:	b480      	push	{r7}
 800331c:	b085      	sub	sp, #20
 800331e:	af00      	add	r7, sp, #0
 8003320:	6078      	str	r0, [r7, #4]
 8003322:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003330:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003332:	683a      	ldr	r2, [r7, #0]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	4313      	orrs	r3, r2
 8003338:	f043 0307 	orr.w	r3, r3, #7
 800333c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	68fa      	ldr	r2, [r7, #12]
 8003342:	609a      	str	r2, [r3, #8]
}
 8003344:	bf00      	nop
 8003346:	3714      	adds	r7, #20
 8003348:	46bd      	mov	sp, r7
 800334a:	bc80      	pop	{r7}
 800334c:	4770      	bx	lr

0800334e <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800334e:	b480      	push	{r7}
 8003350:	b087      	sub	sp, #28
 8003352:	af00      	add	r7, sp, #0
 8003354:	60f8      	str	r0, [r7, #12]
 8003356:	60b9      	str	r1, [r7, #8]
 8003358:	607a      	str	r2, [r7, #4]
 800335a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800335c:	68fb      	ldr	r3, [r7, #12]
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003362:	697b      	ldr	r3, [r7, #20]
 8003364:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003368:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800336a:	683b      	ldr	r3, [r7, #0]
 800336c:	021a      	lsls	r2, r3, #8
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	431a      	orrs	r2, r3
 8003372:	68bb      	ldr	r3, [r7, #8]
 8003374:	4313      	orrs	r3, r2
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	697a      	ldr	r2, [r7, #20]
 8003380:	609a      	str	r2, [r3, #8]
}
 8003382:	bf00      	nop
 8003384:	371c      	adds	r7, #28
 8003386:	46bd      	mov	sp, r7
 8003388:	bc80      	pop	{r7}
 800338a:	4770      	bx	lr

0800338c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800338c:	b480      	push	{r7}
 800338e:	b085      	sub	sp, #20
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
 8003394:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800339c:	2b01      	cmp	r3, #1
 800339e:	d101      	bne.n	80033a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80033a0:	2302      	movs	r3, #2
 80033a2:	e046      	b.n	8003432 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2201      	movs	r2, #1
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	2202      	movs	r2, #2
 80033b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	68fa      	ldr	r2, [r7, #12]
 80033d2:	4313      	orrs	r3, r2
 80033d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	68fa      	ldr	r2, [r7, #12]
 80033dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a16      	ldr	r2, [pc, #88]	; (800343c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80033e4:	4293      	cmp	r3, r2
 80033e6:	d00e      	beq.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f0:	d009      	beq.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	4a12      	ldr	r2, [pc, #72]	; (8003440 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	d004      	beq.n	8003406 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a10      	ldr	r2, [pc, #64]	; (8003444 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d10c      	bne.n	8003420 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800340c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	685b      	ldr	r3, [r3, #4]
 8003412:	68ba      	ldr	r2, [r7, #8]
 8003414:	4313      	orrs	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	2201      	movs	r2, #1
 8003424:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2200      	movs	r2, #0
 800342c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003430:	2300      	movs	r3, #0
}
 8003432:	4618      	mov	r0, r3
 8003434:	3714      	adds	r7, #20
 8003436:	46bd      	mov	sp, r7
 8003438:	bc80      	pop	{r7}
 800343a:	4770      	bx	lr
 800343c:	40012c00 	.word	0x40012c00
 8003440:	40000400 	.word	0x40000400
 8003444:	40000800 	.word	0x40000800

08003448 <__errno>:
 8003448:	4b01      	ldr	r3, [pc, #4]	; (8003450 <__errno+0x8>)
 800344a:	6818      	ldr	r0, [r3, #0]
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	2000000c 	.word	0x2000000c

08003454 <__libc_init_array>:
 8003454:	b570      	push	{r4, r5, r6, lr}
 8003456:	2600      	movs	r6, #0
 8003458:	4d0c      	ldr	r5, [pc, #48]	; (800348c <__libc_init_array+0x38>)
 800345a:	4c0d      	ldr	r4, [pc, #52]	; (8003490 <__libc_init_array+0x3c>)
 800345c:	1b64      	subs	r4, r4, r5
 800345e:	10a4      	asrs	r4, r4, #2
 8003460:	42a6      	cmp	r6, r4
 8003462:	d109      	bne.n	8003478 <__libc_init_array+0x24>
 8003464:	f004 fc52 	bl	8007d0c <_init>
 8003468:	2600      	movs	r6, #0
 800346a:	4d0a      	ldr	r5, [pc, #40]	; (8003494 <__libc_init_array+0x40>)
 800346c:	4c0a      	ldr	r4, [pc, #40]	; (8003498 <__libc_init_array+0x44>)
 800346e:	1b64      	subs	r4, r4, r5
 8003470:	10a4      	asrs	r4, r4, #2
 8003472:	42a6      	cmp	r6, r4
 8003474:	d105      	bne.n	8003482 <__libc_init_array+0x2e>
 8003476:	bd70      	pop	{r4, r5, r6, pc}
 8003478:	f855 3b04 	ldr.w	r3, [r5], #4
 800347c:	4798      	blx	r3
 800347e:	3601      	adds	r6, #1
 8003480:	e7ee      	b.n	8003460 <__libc_init_array+0xc>
 8003482:	f855 3b04 	ldr.w	r3, [r5], #4
 8003486:	4798      	blx	r3
 8003488:	3601      	adds	r6, #1
 800348a:	e7f2      	b.n	8003472 <__libc_init_array+0x1e>
 800348c:	08008224 	.word	0x08008224
 8003490:	08008224 	.word	0x08008224
 8003494:	08008224 	.word	0x08008224
 8003498:	08008228 	.word	0x08008228

0800349c <memset>:
 800349c:	4603      	mov	r3, r0
 800349e:	4402      	add	r2, r0
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d100      	bne.n	80034a6 <memset+0xa>
 80034a4:	4770      	bx	lr
 80034a6:	f803 1b01 	strb.w	r1, [r3], #1
 80034aa:	e7f9      	b.n	80034a0 <memset+0x4>

080034ac <__cvt>:
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034b2:	461f      	mov	r7, r3
 80034b4:	bfbb      	ittet	lt
 80034b6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80034ba:	461f      	movlt	r7, r3
 80034bc:	2300      	movge	r3, #0
 80034be:	232d      	movlt	r3, #45	; 0x2d
 80034c0:	b088      	sub	sp, #32
 80034c2:	4614      	mov	r4, r2
 80034c4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80034c6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80034c8:	7013      	strb	r3, [r2, #0]
 80034ca:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80034cc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80034d0:	f023 0820 	bic.w	r8, r3, #32
 80034d4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80034d8:	d005      	beq.n	80034e6 <__cvt+0x3a>
 80034da:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80034de:	d100      	bne.n	80034e2 <__cvt+0x36>
 80034e0:	3501      	adds	r5, #1
 80034e2:	2302      	movs	r3, #2
 80034e4:	e000      	b.n	80034e8 <__cvt+0x3c>
 80034e6:	2303      	movs	r3, #3
 80034e8:	aa07      	add	r2, sp, #28
 80034ea:	9204      	str	r2, [sp, #16]
 80034ec:	aa06      	add	r2, sp, #24
 80034ee:	e9cd a202 	strd	sl, r2, [sp, #8]
 80034f2:	e9cd 3500 	strd	r3, r5, [sp]
 80034f6:	4622      	mov	r2, r4
 80034f8:	463b      	mov	r3, r7
 80034fa:	f001 fd85 	bl	8005008 <_dtoa_r>
 80034fe:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8003502:	4606      	mov	r6, r0
 8003504:	d102      	bne.n	800350c <__cvt+0x60>
 8003506:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8003508:	07db      	lsls	r3, r3, #31
 800350a:	d522      	bpl.n	8003552 <__cvt+0xa6>
 800350c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8003510:	eb06 0905 	add.w	r9, r6, r5
 8003514:	d110      	bne.n	8003538 <__cvt+0x8c>
 8003516:	7833      	ldrb	r3, [r6, #0]
 8003518:	2b30      	cmp	r3, #48	; 0x30
 800351a:	d10a      	bne.n	8003532 <__cvt+0x86>
 800351c:	2200      	movs	r2, #0
 800351e:	2300      	movs	r3, #0
 8003520:	4620      	mov	r0, r4
 8003522:	4639      	mov	r1, r7
 8003524:	f7fd fa40 	bl	80009a8 <__aeabi_dcmpeq>
 8003528:	b918      	cbnz	r0, 8003532 <__cvt+0x86>
 800352a:	f1c5 0501 	rsb	r5, r5, #1
 800352e:	f8ca 5000 	str.w	r5, [sl]
 8003532:	f8da 3000 	ldr.w	r3, [sl]
 8003536:	4499      	add	r9, r3
 8003538:	2200      	movs	r2, #0
 800353a:	2300      	movs	r3, #0
 800353c:	4620      	mov	r0, r4
 800353e:	4639      	mov	r1, r7
 8003540:	f7fd fa32 	bl	80009a8 <__aeabi_dcmpeq>
 8003544:	b108      	cbz	r0, 800354a <__cvt+0x9e>
 8003546:	f8cd 901c 	str.w	r9, [sp, #28]
 800354a:	2230      	movs	r2, #48	; 0x30
 800354c:	9b07      	ldr	r3, [sp, #28]
 800354e:	454b      	cmp	r3, r9
 8003550:	d307      	bcc.n	8003562 <__cvt+0xb6>
 8003552:	4630      	mov	r0, r6
 8003554:	9b07      	ldr	r3, [sp, #28]
 8003556:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8003558:	1b9b      	subs	r3, r3, r6
 800355a:	6013      	str	r3, [r2, #0]
 800355c:	b008      	add	sp, #32
 800355e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003562:	1c59      	adds	r1, r3, #1
 8003564:	9107      	str	r1, [sp, #28]
 8003566:	701a      	strb	r2, [r3, #0]
 8003568:	e7f0      	b.n	800354c <__cvt+0xa0>

0800356a <__exponent>:
 800356a:	4603      	mov	r3, r0
 800356c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800356e:	2900      	cmp	r1, #0
 8003570:	f803 2b02 	strb.w	r2, [r3], #2
 8003574:	bfb6      	itet	lt
 8003576:	222d      	movlt	r2, #45	; 0x2d
 8003578:	222b      	movge	r2, #43	; 0x2b
 800357a:	4249      	neglt	r1, r1
 800357c:	2909      	cmp	r1, #9
 800357e:	7042      	strb	r2, [r0, #1]
 8003580:	dd2b      	ble.n	80035da <__exponent+0x70>
 8003582:	f10d 0407 	add.w	r4, sp, #7
 8003586:	46a4      	mov	ip, r4
 8003588:	270a      	movs	r7, #10
 800358a:	fb91 f6f7 	sdiv	r6, r1, r7
 800358e:	460a      	mov	r2, r1
 8003590:	46a6      	mov	lr, r4
 8003592:	fb07 1516 	mls	r5, r7, r6, r1
 8003596:	2a63      	cmp	r2, #99	; 0x63
 8003598:	f105 0530 	add.w	r5, r5, #48	; 0x30
 800359c:	4631      	mov	r1, r6
 800359e:	f104 34ff 	add.w	r4, r4, #4294967295
 80035a2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80035a6:	dcf0      	bgt.n	800358a <__exponent+0x20>
 80035a8:	3130      	adds	r1, #48	; 0x30
 80035aa:	f1ae 0502 	sub.w	r5, lr, #2
 80035ae:	f804 1c01 	strb.w	r1, [r4, #-1]
 80035b2:	4629      	mov	r1, r5
 80035b4:	1c44      	adds	r4, r0, #1
 80035b6:	4561      	cmp	r1, ip
 80035b8:	d30a      	bcc.n	80035d0 <__exponent+0x66>
 80035ba:	f10d 0209 	add.w	r2, sp, #9
 80035be:	eba2 020e 	sub.w	r2, r2, lr
 80035c2:	4565      	cmp	r5, ip
 80035c4:	bf88      	it	hi
 80035c6:	2200      	movhi	r2, #0
 80035c8:	4413      	add	r3, r2
 80035ca:	1a18      	subs	r0, r3, r0
 80035cc:	b003      	add	sp, #12
 80035ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035d0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80035d4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80035d8:	e7ed      	b.n	80035b6 <__exponent+0x4c>
 80035da:	2330      	movs	r3, #48	; 0x30
 80035dc:	3130      	adds	r1, #48	; 0x30
 80035de:	7083      	strb	r3, [r0, #2]
 80035e0:	70c1      	strb	r1, [r0, #3]
 80035e2:	1d03      	adds	r3, r0, #4
 80035e4:	e7f1      	b.n	80035ca <__exponent+0x60>
	...

080035e8 <_printf_float>:
 80035e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035ec:	b091      	sub	sp, #68	; 0x44
 80035ee:	460c      	mov	r4, r1
 80035f0:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 80035f4:	4616      	mov	r6, r2
 80035f6:	461f      	mov	r7, r3
 80035f8:	4605      	mov	r5, r0
 80035fa:	f002 fe59 	bl	80062b0 <_localeconv_r>
 80035fe:	6803      	ldr	r3, [r0, #0]
 8003600:	4618      	mov	r0, r3
 8003602:	9309      	str	r3, [sp, #36]	; 0x24
 8003604:	f7fc fda4 	bl	8000150 <strlen>
 8003608:	2300      	movs	r3, #0
 800360a:	930e      	str	r3, [sp, #56]	; 0x38
 800360c:	f8d8 3000 	ldr.w	r3, [r8]
 8003610:	900a      	str	r0, [sp, #40]	; 0x28
 8003612:	3307      	adds	r3, #7
 8003614:	f023 0307 	bic.w	r3, r3, #7
 8003618:	f103 0208 	add.w	r2, r3, #8
 800361c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8003620:	f8d4 b000 	ldr.w	fp, [r4]
 8003624:	f8c8 2000 	str.w	r2, [r8]
 8003628:	e9d3 2300 	ldrd	r2, r3, [r3]
 800362c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8003630:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8003634:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8003638:	930b      	str	r3, [sp, #44]	; 0x2c
 800363a:	f04f 32ff 	mov.w	r2, #4294967295
 800363e:	4640      	mov	r0, r8
 8003640:	4b9c      	ldr	r3, [pc, #624]	; (80038b4 <_printf_float+0x2cc>)
 8003642:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003644:	f7fd f9e2 	bl	8000a0c <__aeabi_dcmpun>
 8003648:	bb70      	cbnz	r0, 80036a8 <_printf_float+0xc0>
 800364a:	f04f 32ff 	mov.w	r2, #4294967295
 800364e:	4640      	mov	r0, r8
 8003650:	4b98      	ldr	r3, [pc, #608]	; (80038b4 <_printf_float+0x2cc>)
 8003652:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003654:	f7fd f9bc 	bl	80009d0 <__aeabi_dcmple>
 8003658:	bb30      	cbnz	r0, 80036a8 <_printf_float+0xc0>
 800365a:	2200      	movs	r2, #0
 800365c:	2300      	movs	r3, #0
 800365e:	4640      	mov	r0, r8
 8003660:	4651      	mov	r1, sl
 8003662:	f7fd f9ab 	bl	80009bc <__aeabi_dcmplt>
 8003666:	b110      	cbz	r0, 800366e <_printf_float+0x86>
 8003668:	232d      	movs	r3, #45	; 0x2d
 800366a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800366e:	4b92      	ldr	r3, [pc, #584]	; (80038b8 <_printf_float+0x2d0>)
 8003670:	4892      	ldr	r0, [pc, #584]	; (80038bc <_printf_float+0x2d4>)
 8003672:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8003676:	bf94      	ite	ls
 8003678:	4698      	movls	r8, r3
 800367a:	4680      	movhi	r8, r0
 800367c:	2303      	movs	r3, #3
 800367e:	f04f 0a00 	mov.w	sl, #0
 8003682:	6123      	str	r3, [r4, #16]
 8003684:	f02b 0304 	bic.w	r3, fp, #4
 8003688:	6023      	str	r3, [r4, #0]
 800368a:	4633      	mov	r3, r6
 800368c:	4621      	mov	r1, r4
 800368e:	4628      	mov	r0, r5
 8003690:	9700      	str	r7, [sp, #0]
 8003692:	aa0f      	add	r2, sp, #60	; 0x3c
 8003694:	f000 f9d4 	bl	8003a40 <_printf_common>
 8003698:	3001      	adds	r0, #1
 800369a:	f040 8090 	bne.w	80037be <_printf_float+0x1d6>
 800369e:	f04f 30ff 	mov.w	r0, #4294967295
 80036a2:	b011      	add	sp, #68	; 0x44
 80036a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80036a8:	4642      	mov	r2, r8
 80036aa:	4653      	mov	r3, sl
 80036ac:	4640      	mov	r0, r8
 80036ae:	4651      	mov	r1, sl
 80036b0:	f7fd f9ac 	bl	8000a0c <__aeabi_dcmpun>
 80036b4:	b148      	cbz	r0, 80036ca <_printf_float+0xe2>
 80036b6:	f1ba 0f00 	cmp.w	sl, #0
 80036ba:	bfb8      	it	lt
 80036bc:	232d      	movlt	r3, #45	; 0x2d
 80036be:	4880      	ldr	r0, [pc, #512]	; (80038c0 <_printf_float+0x2d8>)
 80036c0:	bfb8      	it	lt
 80036c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80036c6:	4b7f      	ldr	r3, [pc, #508]	; (80038c4 <_printf_float+0x2dc>)
 80036c8:	e7d3      	b.n	8003672 <_printf_float+0x8a>
 80036ca:	6863      	ldr	r3, [r4, #4]
 80036cc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80036d0:	1c5a      	adds	r2, r3, #1
 80036d2:	d142      	bne.n	800375a <_printf_float+0x172>
 80036d4:	2306      	movs	r3, #6
 80036d6:	6063      	str	r3, [r4, #4]
 80036d8:	2200      	movs	r2, #0
 80036da:	9206      	str	r2, [sp, #24]
 80036dc:	aa0e      	add	r2, sp, #56	; 0x38
 80036de:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80036e2:	aa0d      	add	r2, sp, #52	; 0x34
 80036e4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80036e8:	9203      	str	r2, [sp, #12]
 80036ea:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80036ee:	e9cd 3201 	strd	r3, r2, [sp, #4]
 80036f2:	6023      	str	r3, [r4, #0]
 80036f4:	6863      	ldr	r3, [r4, #4]
 80036f6:	4642      	mov	r2, r8
 80036f8:	9300      	str	r3, [sp, #0]
 80036fa:	4628      	mov	r0, r5
 80036fc:	4653      	mov	r3, sl
 80036fe:	910b      	str	r1, [sp, #44]	; 0x2c
 8003700:	f7ff fed4 	bl	80034ac <__cvt>
 8003704:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8003706:	4680      	mov	r8, r0
 8003708:	2947      	cmp	r1, #71	; 0x47
 800370a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800370c:	d108      	bne.n	8003720 <_printf_float+0x138>
 800370e:	1cc8      	adds	r0, r1, #3
 8003710:	db02      	blt.n	8003718 <_printf_float+0x130>
 8003712:	6863      	ldr	r3, [r4, #4]
 8003714:	4299      	cmp	r1, r3
 8003716:	dd40      	ble.n	800379a <_printf_float+0x1b2>
 8003718:	f1a9 0902 	sub.w	r9, r9, #2
 800371c:	fa5f f989 	uxtb.w	r9, r9
 8003720:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8003724:	d81f      	bhi.n	8003766 <_printf_float+0x17e>
 8003726:	464a      	mov	r2, r9
 8003728:	3901      	subs	r1, #1
 800372a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800372e:	910d      	str	r1, [sp, #52]	; 0x34
 8003730:	f7ff ff1b 	bl	800356a <__exponent>
 8003734:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003736:	4682      	mov	sl, r0
 8003738:	1813      	adds	r3, r2, r0
 800373a:	2a01      	cmp	r2, #1
 800373c:	6123      	str	r3, [r4, #16]
 800373e:	dc02      	bgt.n	8003746 <_printf_float+0x15e>
 8003740:	6822      	ldr	r2, [r4, #0]
 8003742:	07d2      	lsls	r2, r2, #31
 8003744:	d501      	bpl.n	800374a <_printf_float+0x162>
 8003746:	3301      	adds	r3, #1
 8003748:	6123      	str	r3, [r4, #16]
 800374a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800374e:	2b00      	cmp	r3, #0
 8003750:	d09b      	beq.n	800368a <_printf_float+0xa2>
 8003752:	232d      	movs	r3, #45	; 0x2d
 8003754:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003758:	e797      	b.n	800368a <_printf_float+0xa2>
 800375a:	2947      	cmp	r1, #71	; 0x47
 800375c:	d1bc      	bne.n	80036d8 <_printf_float+0xf0>
 800375e:	2b00      	cmp	r3, #0
 8003760:	d1ba      	bne.n	80036d8 <_printf_float+0xf0>
 8003762:	2301      	movs	r3, #1
 8003764:	e7b7      	b.n	80036d6 <_printf_float+0xee>
 8003766:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800376a:	d118      	bne.n	800379e <_printf_float+0x1b6>
 800376c:	2900      	cmp	r1, #0
 800376e:	6863      	ldr	r3, [r4, #4]
 8003770:	dd0b      	ble.n	800378a <_printf_float+0x1a2>
 8003772:	6121      	str	r1, [r4, #16]
 8003774:	b913      	cbnz	r3, 800377c <_printf_float+0x194>
 8003776:	6822      	ldr	r2, [r4, #0]
 8003778:	07d0      	lsls	r0, r2, #31
 800377a:	d502      	bpl.n	8003782 <_printf_float+0x19a>
 800377c:	3301      	adds	r3, #1
 800377e:	440b      	add	r3, r1
 8003780:	6123      	str	r3, [r4, #16]
 8003782:	f04f 0a00 	mov.w	sl, #0
 8003786:	65a1      	str	r1, [r4, #88]	; 0x58
 8003788:	e7df      	b.n	800374a <_printf_float+0x162>
 800378a:	b913      	cbnz	r3, 8003792 <_printf_float+0x1aa>
 800378c:	6822      	ldr	r2, [r4, #0]
 800378e:	07d2      	lsls	r2, r2, #31
 8003790:	d501      	bpl.n	8003796 <_printf_float+0x1ae>
 8003792:	3302      	adds	r3, #2
 8003794:	e7f4      	b.n	8003780 <_printf_float+0x198>
 8003796:	2301      	movs	r3, #1
 8003798:	e7f2      	b.n	8003780 <_printf_float+0x198>
 800379a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800379e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80037a0:	4299      	cmp	r1, r3
 80037a2:	db05      	blt.n	80037b0 <_printf_float+0x1c8>
 80037a4:	6823      	ldr	r3, [r4, #0]
 80037a6:	6121      	str	r1, [r4, #16]
 80037a8:	07d8      	lsls	r0, r3, #31
 80037aa:	d5ea      	bpl.n	8003782 <_printf_float+0x19a>
 80037ac:	1c4b      	adds	r3, r1, #1
 80037ae:	e7e7      	b.n	8003780 <_printf_float+0x198>
 80037b0:	2900      	cmp	r1, #0
 80037b2:	bfcc      	ite	gt
 80037b4:	2201      	movgt	r2, #1
 80037b6:	f1c1 0202 	rsble	r2, r1, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	e7e0      	b.n	8003780 <_printf_float+0x198>
 80037be:	6823      	ldr	r3, [r4, #0]
 80037c0:	055a      	lsls	r2, r3, #21
 80037c2:	d407      	bmi.n	80037d4 <_printf_float+0x1ec>
 80037c4:	6923      	ldr	r3, [r4, #16]
 80037c6:	4642      	mov	r2, r8
 80037c8:	4631      	mov	r1, r6
 80037ca:	4628      	mov	r0, r5
 80037cc:	47b8      	blx	r7
 80037ce:	3001      	adds	r0, #1
 80037d0:	d12b      	bne.n	800382a <_printf_float+0x242>
 80037d2:	e764      	b.n	800369e <_printf_float+0xb6>
 80037d4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80037d8:	f240 80dd 	bls.w	8003996 <_printf_float+0x3ae>
 80037dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80037e0:	2200      	movs	r2, #0
 80037e2:	2300      	movs	r3, #0
 80037e4:	f7fd f8e0 	bl	80009a8 <__aeabi_dcmpeq>
 80037e8:	2800      	cmp	r0, #0
 80037ea:	d033      	beq.n	8003854 <_printf_float+0x26c>
 80037ec:	2301      	movs	r3, #1
 80037ee:	4631      	mov	r1, r6
 80037f0:	4628      	mov	r0, r5
 80037f2:	4a35      	ldr	r2, [pc, #212]	; (80038c8 <_printf_float+0x2e0>)
 80037f4:	47b8      	blx	r7
 80037f6:	3001      	adds	r0, #1
 80037f8:	f43f af51 	beq.w	800369e <_printf_float+0xb6>
 80037fc:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8003800:	429a      	cmp	r2, r3
 8003802:	db02      	blt.n	800380a <_printf_float+0x222>
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	07d8      	lsls	r0, r3, #31
 8003808:	d50f      	bpl.n	800382a <_printf_float+0x242>
 800380a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800380e:	4631      	mov	r1, r6
 8003810:	4628      	mov	r0, r5
 8003812:	47b8      	blx	r7
 8003814:	3001      	adds	r0, #1
 8003816:	f43f af42 	beq.w	800369e <_printf_float+0xb6>
 800381a:	f04f 0800 	mov.w	r8, #0
 800381e:	f104 091a 	add.w	r9, r4, #26
 8003822:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003824:	3b01      	subs	r3, #1
 8003826:	4543      	cmp	r3, r8
 8003828:	dc09      	bgt.n	800383e <_printf_float+0x256>
 800382a:	6823      	ldr	r3, [r4, #0]
 800382c:	079b      	lsls	r3, r3, #30
 800382e:	f100 8102 	bmi.w	8003a36 <_printf_float+0x44e>
 8003832:	68e0      	ldr	r0, [r4, #12]
 8003834:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8003836:	4298      	cmp	r0, r3
 8003838:	bfb8      	it	lt
 800383a:	4618      	movlt	r0, r3
 800383c:	e731      	b.n	80036a2 <_printf_float+0xba>
 800383e:	2301      	movs	r3, #1
 8003840:	464a      	mov	r2, r9
 8003842:	4631      	mov	r1, r6
 8003844:	4628      	mov	r0, r5
 8003846:	47b8      	blx	r7
 8003848:	3001      	adds	r0, #1
 800384a:	f43f af28 	beq.w	800369e <_printf_float+0xb6>
 800384e:	f108 0801 	add.w	r8, r8, #1
 8003852:	e7e6      	b.n	8003822 <_printf_float+0x23a>
 8003854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003856:	2b00      	cmp	r3, #0
 8003858:	dc38      	bgt.n	80038cc <_printf_float+0x2e4>
 800385a:	2301      	movs	r3, #1
 800385c:	4631      	mov	r1, r6
 800385e:	4628      	mov	r0, r5
 8003860:	4a19      	ldr	r2, [pc, #100]	; (80038c8 <_printf_float+0x2e0>)
 8003862:	47b8      	blx	r7
 8003864:	3001      	adds	r0, #1
 8003866:	f43f af1a 	beq.w	800369e <_printf_float+0xb6>
 800386a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800386e:	4313      	orrs	r3, r2
 8003870:	d102      	bne.n	8003878 <_printf_float+0x290>
 8003872:	6823      	ldr	r3, [r4, #0]
 8003874:	07d9      	lsls	r1, r3, #31
 8003876:	d5d8      	bpl.n	800382a <_printf_float+0x242>
 8003878:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800387c:	4631      	mov	r1, r6
 800387e:	4628      	mov	r0, r5
 8003880:	47b8      	blx	r7
 8003882:	3001      	adds	r0, #1
 8003884:	f43f af0b 	beq.w	800369e <_printf_float+0xb6>
 8003888:	f04f 0900 	mov.w	r9, #0
 800388c:	f104 0a1a 	add.w	sl, r4, #26
 8003890:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8003892:	425b      	negs	r3, r3
 8003894:	454b      	cmp	r3, r9
 8003896:	dc01      	bgt.n	800389c <_printf_float+0x2b4>
 8003898:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800389a:	e794      	b.n	80037c6 <_printf_float+0x1de>
 800389c:	2301      	movs	r3, #1
 800389e:	4652      	mov	r2, sl
 80038a0:	4631      	mov	r1, r6
 80038a2:	4628      	mov	r0, r5
 80038a4:	47b8      	blx	r7
 80038a6:	3001      	adds	r0, #1
 80038a8:	f43f aef9 	beq.w	800369e <_printf_float+0xb6>
 80038ac:	f109 0901 	add.w	r9, r9, #1
 80038b0:	e7ee      	b.n	8003890 <_printf_float+0x2a8>
 80038b2:	bf00      	nop
 80038b4:	7fefffff 	.word	0x7fefffff
 80038b8:	08007d84 	.word	0x08007d84
 80038bc:	08007d88 	.word	0x08007d88
 80038c0:	08007d90 	.word	0x08007d90
 80038c4:	08007d8c 	.word	0x08007d8c
 80038c8:	08007d94 	.word	0x08007d94
 80038cc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80038ce:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80038d0:	429a      	cmp	r2, r3
 80038d2:	bfa8      	it	ge
 80038d4:	461a      	movge	r2, r3
 80038d6:	2a00      	cmp	r2, #0
 80038d8:	4691      	mov	r9, r2
 80038da:	dc37      	bgt.n	800394c <_printf_float+0x364>
 80038dc:	f04f 0b00 	mov.w	fp, #0
 80038e0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80038e4:	f104 021a 	add.w	r2, r4, #26
 80038e8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80038ec:	ebaa 0309 	sub.w	r3, sl, r9
 80038f0:	455b      	cmp	r3, fp
 80038f2:	dc33      	bgt.n	800395c <_printf_float+0x374>
 80038f4:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80038f8:	429a      	cmp	r2, r3
 80038fa:	db3b      	blt.n	8003974 <_printf_float+0x38c>
 80038fc:	6823      	ldr	r3, [r4, #0]
 80038fe:	07da      	lsls	r2, r3, #31
 8003900:	d438      	bmi.n	8003974 <_printf_float+0x38c>
 8003902:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8003904:	990d      	ldr	r1, [sp, #52]	; 0x34
 8003906:	eba3 020a 	sub.w	r2, r3, sl
 800390a:	eba3 0901 	sub.w	r9, r3, r1
 800390e:	4591      	cmp	r9, r2
 8003910:	bfa8      	it	ge
 8003912:	4691      	movge	r9, r2
 8003914:	f1b9 0f00 	cmp.w	r9, #0
 8003918:	dc34      	bgt.n	8003984 <_printf_float+0x39c>
 800391a:	f04f 0800 	mov.w	r8, #0
 800391e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003922:	f104 0a1a 	add.w	sl, r4, #26
 8003926:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800392a:	1a9b      	subs	r3, r3, r2
 800392c:	eba3 0309 	sub.w	r3, r3, r9
 8003930:	4543      	cmp	r3, r8
 8003932:	f77f af7a 	ble.w	800382a <_printf_float+0x242>
 8003936:	2301      	movs	r3, #1
 8003938:	4652      	mov	r2, sl
 800393a:	4631      	mov	r1, r6
 800393c:	4628      	mov	r0, r5
 800393e:	47b8      	blx	r7
 8003940:	3001      	adds	r0, #1
 8003942:	f43f aeac 	beq.w	800369e <_printf_float+0xb6>
 8003946:	f108 0801 	add.w	r8, r8, #1
 800394a:	e7ec      	b.n	8003926 <_printf_float+0x33e>
 800394c:	4613      	mov	r3, r2
 800394e:	4631      	mov	r1, r6
 8003950:	4642      	mov	r2, r8
 8003952:	4628      	mov	r0, r5
 8003954:	47b8      	blx	r7
 8003956:	3001      	adds	r0, #1
 8003958:	d1c0      	bne.n	80038dc <_printf_float+0x2f4>
 800395a:	e6a0      	b.n	800369e <_printf_float+0xb6>
 800395c:	2301      	movs	r3, #1
 800395e:	4631      	mov	r1, r6
 8003960:	4628      	mov	r0, r5
 8003962:	920b      	str	r2, [sp, #44]	; 0x2c
 8003964:	47b8      	blx	r7
 8003966:	3001      	adds	r0, #1
 8003968:	f43f ae99 	beq.w	800369e <_printf_float+0xb6>
 800396c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800396e:	f10b 0b01 	add.w	fp, fp, #1
 8003972:	e7b9      	b.n	80038e8 <_printf_float+0x300>
 8003974:	4631      	mov	r1, r6
 8003976:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800397a:	4628      	mov	r0, r5
 800397c:	47b8      	blx	r7
 800397e:	3001      	adds	r0, #1
 8003980:	d1bf      	bne.n	8003902 <_printf_float+0x31a>
 8003982:	e68c      	b.n	800369e <_printf_float+0xb6>
 8003984:	464b      	mov	r3, r9
 8003986:	4631      	mov	r1, r6
 8003988:	4628      	mov	r0, r5
 800398a:	eb08 020a 	add.w	r2, r8, sl
 800398e:	47b8      	blx	r7
 8003990:	3001      	adds	r0, #1
 8003992:	d1c2      	bne.n	800391a <_printf_float+0x332>
 8003994:	e683      	b.n	800369e <_printf_float+0xb6>
 8003996:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8003998:	2a01      	cmp	r2, #1
 800399a:	dc01      	bgt.n	80039a0 <_printf_float+0x3b8>
 800399c:	07db      	lsls	r3, r3, #31
 800399e:	d537      	bpl.n	8003a10 <_printf_float+0x428>
 80039a0:	2301      	movs	r3, #1
 80039a2:	4642      	mov	r2, r8
 80039a4:	4631      	mov	r1, r6
 80039a6:	4628      	mov	r0, r5
 80039a8:	47b8      	blx	r7
 80039aa:	3001      	adds	r0, #1
 80039ac:	f43f ae77 	beq.w	800369e <_printf_float+0xb6>
 80039b0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80039b4:	4631      	mov	r1, r6
 80039b6:	4628      	mov	r0, r5
 80039b8:	47b8      	blx	r7
 80039ba:	3001      	adds	r0, #1
 80039bc:	f43f ae6f 	beq.w	800369e <_printf_float+0xb6>
 80039c0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80039c4:	2200      	movs	r2, #0
 80039c6:	2300      	movs	r3, #0
 80039c8:	f7fc ffee 	bl	80009a8 <__aeabi_dcmpeq>
 80039cc:	b9d8      	cbnz	r0, 8003a06 <_printf_float+0x41e>
 80039ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039d0:	f108 0201 	add.w	r2, r8, #1
 80039d4:	3b01      	subs	r3, #1
 80039d6:	4631      	mov	r1, r6
 80039d8:	4628      	mov	r0, r5
 80039da:	47b8      	blx	r7
 80039dc:	3001      	adds	r0, #1
 80039de:	d10e      	bne.n	80039fe <_printf_float+0x416>
 80039e0:	e65d      	b.n	800369e <_printf_float+0xb6>
 80039e2:	2301      	movs	r3, #1
 80039e4:	464a      	mov	r2, r9
 80039e6:	4631      	mov	r1, r6
 80039e8:	4628      	mov	r0, r5
 80039ea:	47b8      	blx	r7
 80039ec:	3001      	adds	r0, #1
 80039ee:	f43f ae56 	beq.w	800369e <_printf_float+0xb6>
 80039f2:	f108 0801 	add.w	r8, r8, #1
 80039f6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80039f8:	3b01      	subs	r3, #1
 80039fa:	4543      	cmp	r3, r8
 80039fc:	dcf1      	bgt.n	80039e2 <_printf_float+0x3fa>
 80039fe:	4653      	mov	r3, sl
 8003a00:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8003a04:	e6e0      	b.n	80037c8 <_printf_float+0x1e0>
 8003a06:	f04f 0800 	mov.w	r8, #0
 8003a0a:	f104 091a 	add.w	r9, r4, #26
 8003a0e:	e7f2      	b.n	80039f6 <_printf_float+0x40e>
 8003a10:	2301      	movs	r3, #1
 8003a12:	4642      	mov	r2, r8
 8003a14:	e7df      	b.n	80039d6 <_printf_float+0x3ee>
 8003a16:	2301      	movs	r3, #1
 8003a18:	464a      	mov	r2, r9
 8003a1a:	4631      	mov	r1, r6
 8003a1c:	4628      	mov	r0, r5
 8003a1e:	47b8      	blx	r7
 8003a20:	3001      	adds	r0, #1
 8003a22:	f43f ae3c 	beq.w	800369e <_printf_float+0xb6>
 8003a26:	f108 0801 	add.w	r8, r8, #1
 8003a2a:	68e3      	ldr	r3, [r4, #12]
 8003a2c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8003a2e:	1a5b      	subs	r3, r3, r1
 8003a30:	4543      	cmp	r3, r8
 8003a32:	dcf0      	bgt.n	8003a16 <_printf_float+0x42e>
 8003a34:	e6fd      	b.n	8003832 <_printf_float+0x24a>
 8003a36:	f04f 0800 	mov.w	r8, #0
 8003a3a:	f104 0919 	add.w	r9, r4, #25
 8003a3e:	e7f4      	b.n	8003a2a <_printf_float+0x442>

08003a40 <_printf_common>:
 8003a40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003a44:	4616      	mov	r6, r2
 8003a46:	4699      	mov	r9, r3
 8003a48:	688a      	ldr	r2, [r1, #8]
 8003a4a:	690b      	ldr	r3, [r1, #16]
 8003a4c:	4607      	mov	r7, r0
 8003a4e:	4293      	cmp	r3, r2
 8003a50:	bfb8      	it	lt
 8003a52:	4613      	movlt	r3, r2
 8003a54:	6033      	str	r3, [r6, #0]
 8003a56:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8003a5a:	460c      	mov	r4, r1
 8003a5c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003a60:	b10a      	cbz	r2, 8003a66 <_printf_common+0x26>
 8003a62:	3301      	adds	r3, #1
 8003a64:	6033      	str	r3, [r6, #0]
 8003a66:	6823      	ldr	r3, [r4, #0]
 8003a68:	0699      	lsls	r1, r3, #26
 8003a6a:	bf42      	ittt	mi
 8003a6c:	6833      	ldrmi	r3, [r6, #0]
 8003a6e:	3302      	addmi	r3, #2
 8003a70:	6033      	strmi	r3, [r6, #0]
 8003a72:	6825      	ldr	r5, [r4, #0]
 8003a74:	f015 0506 	ands.w	r5, r5, #6
 8003a78:	d106      	bne.n	8003a88 <_printf_common+0x48>
 8003a7a:	f104 0a19 	add.w	sl, r4, #25
 8003a7e:	68e3      	ldr	r3, [r4, #12]
 8003a80:	6832      	ldr	r2, [r6, #0]
 8003a82:	1a9b      	subs	r3, r3, r2
 8003a84:	42ab      	cmp	r3, r5
 8003a86:	dc28      	bgt.n	8003ada <_printf_common+0x9a>
 8003a88:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8003a8c:	1e13      	subs	r3, r2, #0
 8003a8e:	6822      	ldr	r2, [r4, #0]
 8003a90:	bf18      	it	ne
 8003a92:	2301      	movne	r3, #1
 8003a94:	0692      	lsls	r2, r2, #26
 8003a96:	d42d      	bmi.n	8003af4 <_printf_common+0xb4>
 8003a98:	4649      	mov	r1, r9
 8003a9a:	4638      	mov	r0, r7
 8003a9c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003aa0:	47c0      	blx	r8
 8003aa2:	3001      	adds	r0, #1
 8003aa4:	d020      	beq.n	8003ae8 <_printf_common+0xa8>
 8003aa6:	6823      	ldr	r3, [r4, #0]
 8003aa8:	68e5      	ldr	r5, [r4, #12]
 8003aaa:	f003 0306 	and.w	r3, r3, #6
 8003aae:	2b04      	cmp	r3, #4
 8003ab0:	bf18      	it	ne
 8003ab2:	2500      	movne	r5, #0
 8003ab4:	6832      	ldr	r2, [r6, #0]
 8003ab6:	f04f 0600 	mov.w	r6, #0
 8003aba:	68a3      	ldr	r3, [r4, #8]
 8003abc:	bf08      	it	eq
 8003abe:	1aad      	subeq	r5, r5, r2
 8003ac0:	6922      	ldr	r2, [r4, #16]
 8003ac2:	bf08      	it	eq
 8003ac4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003ac8:	4293      	cmp	r3, r2
 8003aca:	bfc4      	itt	gt
 8003acc:	1a9b      	subgt	r3, r3, r2
 8003ace:	18ed      	addgt	r5, r5, r3
 8003ad0:	341a      	adds	r4, #26
 8003ad2:	42b5      	cmp	r5, r6
 8003ad4:	d11a      	bne.n	8003b0c <_printf_common+0xcc>
 8003ad6:	2000      	movs	r0, #0
 8003ad8:	e008      	b.n	8003aec <_printf_common+0xac>
 8003ada:	2301      	movs	r3, #1
 8003adc:	4652      	mov	r2, sl
 8003ade:	4649      	mov	r1, r9
 8003ae0:	4638      	mov	r0, r7
 8003ae2:	47c0      	blx	r8
 8003ae4:	3001      	adds	r0, #1
 8003ae6:	d103      	bne.n	8003af0 <_printf_common+0xb0>
 8003ae8:	f04f 30ff 	mov.w	r0, #4294967295
 8003aec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003af0:	3501      	adds	r5, #1
 8003af2:	e7c4      	b.n	8003a7e <_printf_common+0x3e>
 8003af4:	2030      	movs	r0, #48	; 0x30
 8003af6:	18e1      	adds	r1, r4, r3
 8003af8:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8003afc:	1c5a      	adds	r2, r3, #1
 8003afe:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8003b02:	4422      	add	r2, r4
 8003b04:	3302      	adds	r3, #2
 8003b06:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8003b0a:	e7c5      	b.n	8003a98 <_printf_common+0x58>
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	4622      	mov	r2, r4
 8003b10:	4649      	mov	r1, r9
 8003b12:	4638      	mov	r0, r7
 8003b14:	47c0      	blx	r8
 8003b16:	3001      	adds	r0, #1
 8003b18:	d0e6      	beq.n	8003ae8 <_printf_common+0xa8>
 8003b1a:	3601      	adds	r6, #1
 8003b1c:	e7d9      	b.n	8003ad2 <_printf_common+0x92>
	...

08003b20 <_printf_i>:
 8003b20:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003b24:	7e0f      	ldrb	r7, [r1, #24]
 8003b26:	4691      	mov	r9, r2
 8003b28:	2f78      	cmp	r7, #120	; 0x78
 8003b2a:	4680      	mov	r8, r0
 8003b2c:	460c      	mov	r4, r1
 8003b2e:	469a      	mov	sl, r3
 8003b30:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8003b32:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8003b36:	d807      	bhi.n	8003b48 <_printf_i+0x28>
 8003b38:	2f62      	cmp	r7, #98	; 0x62
 8003b3a:	d80a      	bhi.n	8003b52 <_printf_i+0x32>
 8003b3c:	2f00      	cmp	r7, #0
 8003b3e:	f000 80d9 	beq.w	8003cf4 <_printf_i+0x1d4>
 8003b42:	2f58      	cmp	r7, #88	; 0x58
 8003b44:	f000 80a4 	beq.w	8003c90 <_printf_i+0x170>
 8003b48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003b4c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8003b50:	e03a      	b.n	8003bc8 <_printf_i+0xa8>
 8003b52:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8003b56:	2b15      	cmp	r3, #21
 8003b58:	d8f6      	bhi.n	8003b48 <_printf_i+0x28>
 8003b5a:	a101      	add	r1, pc, #4	; (adr r1, 8003b60 <_printf_i+0x40>)
 8003b5c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003b60:	08003bb9 	.word	0x08003bb9
 8003b64:	08003bcd 	.word	0x08003bcd
 8003b68:	08003b49 	.word	0x08003b49
 8003b6c:	08003b49 	.word	0x08003b49
 8003b70:	08003b49 	.word	0x08003b49
 8003b74:	08003b49 	.word	0x08003b49
 8003b78:	08003bcd 	.word	0x08003bcd
 8003b7c:	08003b49 	.word	0x08003b49
 8003b80:	08003b49 	.word	0x08003b49
 8003b84:	08003b49 	.word	0x08003b49
 8003b88:	08003b49 	.word	0x08003b49
 8003b8c:	08003cdb 	.word	0x08003cdb
 8003b90:	08003bfd 	.word	0x08003bfd
 8003b94:	08003cbd 	.word	0x08003cbd
 8003b98:	08003b49 	.word	0x08003b49
 8003b9c:	08003b49 	.word	0x08003b49
 8003ba0:	08003cfd 	.word	0x08003cfd
 8003ba4:	08003b49 	.word	0x08003b49
 8003ba8:	08003bfd 	.word	0x08003bfd
 8003bac:	08003b49 	.word	0x08003b49
 8003bb0:	08003b49 	.word	0x08003b49
 8003bb4:	08003cc5 	.word	0x08003cc5
 8003bb8:	682b      	ldr	r3, [r5, #0]
 8003bba:	1d1a      	adds	r2, r3, #4
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	602a      	str	r2, [r5, #0]
 8003bc0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003bc4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003bc8:	2301      	movs	r3, #1
 8003bca:	e0a4      	b.n	8003d16 <_printf_i+0x1f6>
 8003bcc:	6820      	ldr	r0, [r4, #0]
 8003bce:	6829      	ldr	r1, [r5, #0]
 8003bd0:	0606      	lsls	r6, r0, #24
 8003bd2:	f101 0304 	add.w	r3, r1, #4
 8003bd6:	d50a      	bpl.n	8003bee <_printf_i+0xce>
 8003bd8:	680e      	ldr	r6, [r1, #0]
 8003bda:	602b      	str	r3, [r5, #0]
 8003bdc:	2e00      	cmp	r6, #0
 8003bde:	da03      	bge.n	8003be8 <_printf_i+0xc8>
 8003be0:	232d      	movs	r3, #45	; 0x2d
 8003be2:	4276      	negs	r6, r6
 8003be4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003be8:	230a      	movs	r3, #10
 8003bea:	485e      	ldr	r0, [pc, #376]	; (8003d64 <_printf_i+0x244>)
 8003bec:	e019      	b.n	8003c22 <_printf_i+0x102>
 8003bee:	680e      	ldr	r6, [r1, #0]
 8003bf0:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003bf4:	602b      	str	r3, [r5, #0]
 8003bf6:	bf18      	it	ne
 8003bf8:	b236      	sxthne	r6, r6
 8003bfa:	e7ef      	b.n	8003bdc <_printf_i+0xbc>
 8003bfc:	682b      	ldr	r3, [r5, #0]
 8003bfe:	6820      	ldr	r0, [r4, #0]
 8003c00:	1d19      	adds	r1, r3, #4
 8003c02:	6029      	str	r1, [r5, #0]
 8003c04:	0601      	lsls	r1, r0, #24
 8003c06:	d501      	bpl.n	8003c0c <_printf_i+0xec>
 8003c08:	681e      	ldr	r6, [r3, #0]
 8003c0a:	e002      	b.n	8003c12 <_printf_i+0xf2>
 8003c0c:	0646      	lsls	r6, r0, #25
 8003c0e:	d5fb      	bpl.n	8003c08 <_printf_i+0xe8>
 8003c10:	881e      	ldrh	r6, [r3, #0]
 8003c12:	2f6f      	cmp	r7, #111	; 0x6f
 8003c14:	bf0c      	ite	eq
 8003c16:	2308      	moveq	r3, #8
 8003c18:	230a      	movne	r3, #10
 8003c1a:	4852      	ldr	r0, [pc, #328]	; (8003d64 <_printf_i+0x244>)
 8003c1c:	2100      	movs	r1, #0
 8003c1e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8003c22:	6865      	ldr	r5, [r4, #4]
 8003c24:	2d00      	cmp	r5, #0
 8003c26:	bfa8      	it	ge
 8003c28:	6821      	ldrge	r1, [r4, #0]
 8003c2a:	60a5      	str	r5, [r4, #8]
 8003c2c:	bfa4      	itt	ge
 8003c2e:	f021 0104 	bicge.w	r1, r1, #4
 8003c32:	6021      	strge	r1, [r4, #0]
 8003c34:	b90e      	cbnz	r6, 8003c3a <_printf_i+0x11a>
 8003c36:	2d00      	cmp	r5, #0
 8003c38:	d04d      	beq.n	8003cd6 <_printf_i+0x1b6>
 8003c3a:	4615      	mov	r5, r2
 8003c3c:	fbb6 f1f3 	udiv	r1, r6, r3
 8003c40:	fb03 6711 	mls	r7, r3, r1, r6
 8003c44:	5dc7      	ldrb	r7, [r0, r7]
 8003c46:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8003c4a:	4637      	mov	r7, r6
 8003c4c:	42bb      	cmp	r3, r7
 8003c4e:	460e      	mov	r6, r1
 8003c50:	d9f4      	bls.n	8003c3c <_printf_i+0x11c>
 8003c52:	2b08      	cmp	r3, #8
 8003c54:	d10b      	bne.n	8003c6e <_printf_i+0x14e>
 8003c56:	6823      	ldr	r3, [r4, #0]
 8003c58:	07de      	lsls	r6, r3, #31
 8003c5a:	d508      	bpl.n	8003c6e <_printf_i+0x14e>
 8003c5c:	6923      	ldr	r3, [r4, #16]
 8003c5e:	6861      	ldr	r1, [r4, #4]
 8003c60:	4299      	cmp	r1, r3
 8003c62:	bfde      	ittt	le
 8003c64:	2330      	movle	r3, #48	; 0x30
 8003c66:	f805 3c01 	strble.w	r3, [r5, #-1]
 8003c6a:	f105 35ff 	addle.w	r5, r5, #4294967295
 8003c6e:	1b52      	subs	r2, r2, r5
 8003c70:	6122      	str	r2, [r4, #16]
 8003c72:	464b      	mov	r3, r9
 8003c74:	4621      	mov	r1, r4
 8003c76:	4640      	mov	r0, r8
 8003c78:	f8cd a000 	str.w	sl, [sp]
 8003c7c:	aa03      	add	r2, sp, #12
 8003c7e:	f7ff fedf 	bl	8003a40 <_printf_common>
 8003c82:	3001      	adds	r0, #1
 8003c84:	d14c      	bne.n	8003d20 <_printf_i+0x200>
 8003c86:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8a:	b004      	add	sp, #16
 8003c8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003c90:	4834      	ldr	r0, [pc, #208]	; (8003d64 <_printf_i+0x244>)
 8003c92:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8003c96:	6829      	ldr	r1, [r5, #0]
 8003c98:	6823      	ldr	r3, [r4, #0]
 8003c9a:	f851 6b04 	ldr.w	r6, [r1], #4
 8003c9e:	6029      	str	r1, [r5, #0]
 8003ca0:	061d      	lsls	r5, r3, #24
 8003ca2:	d514      	bpl.n	8003cce <_printf_i+0x1ae>
 8003ca4:	07df      	lsls	r7, r3, #31
 8003ca6:	bf44      	itt	mi
 8003ca8:	f043 0320 	orrmi.w	r3, r3, #32
 8003cac:	6023      	strmi	r3, [r4, #0]
 8003cae:	b91e      	cbnz	r6, 8003cb8 <_printf_i+0x198>
 8003cb0:	6823      	ldr	r3, [r4, #0]
 8003cb2:	f023 0320 	bic.w	r3, r3, #32
 8003cb6:	6023      	str	r3, [r4, #0]
 8003cb8:	2310      	movs	r3, #16
 8003cba:	e7af      	b.n	8003c1c <_printf_i+0xfc>
 8003cbc:	6823      	ldr	r3, [r4, #0]
 8003cbe:	f043 0320 	orr.w	r3, r3, #32
 8003cc2:	6023      	str	r3, [r4, #0]
 8003cc4:	2378      	movs	r3, #120	; 0x78
 8003cc6:	4828      	ldr	r0, [pc, #160]	; (8003d68 <_printf_i+0x248>)
 8003cc8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003ccc:	e7e3      	b.n	8003c96 <_printf_i+0x176>
 8003cce:	0659      	lsls	r1, r3, #25
 8003cd0:	bf48      	it	mi
 8003cd2:	b2b6      	uxthmi	r6, r6
 8003cd4:	e7e6      	b.n	8003ca4 <_printf_i+0x184>
 8003cd6:	4615      	mov	r5, r2
 8003cd8:	e7bb      	b.n	8003c52 <_printf_i+0x132>
 8003cda:	682b      	ldr	r3, [r5, #0]
 8003cdc:	6826      	ldr	r6, [r4, #0]
 8003cde:	1d18      	adds	r0, r3, #4
 8003ce0:	6961      	ldr	r1, [r4, #20]
 8003ce2:	6028      	str	r0, [r5, #0]
 8003ce4:	0635      	lsls	r5, r6, #24
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	d501      	bpl.n	8003cee <_printf_i+0x1ce>
 8003cea:	6019      	str	r1, [r3, #0]
 8003cec:	e002      	b.n	8003cf4 <_printf_i+0x1d4>
 8003cee:	0670      	lsls	r0, r6, #25
 8003cf0:	d5fb      	bpl.n	8003cea <_printf_i+0x1ca>
 8003cf2:	8019      	strh	r1, [r3, #0]
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	4615      	mov	r5, r2
 8003cf8:	6123      	str	r3, [r4, #16]
 8003cfa:	e7ba      	b.n	8003c72 <_printf_i+0x152>
 8003cfc:	682b      	ldr	r3, [r5, #0]
 8003cfe:	2100      	movs	r1, #0
 8003d00:	1d1a      	adds	r2, r3, #4
 8003d02:	602a      	str	r2, [r5, #0]
 8003d04:	681d      	ldr	r5, [r3, #0]
 8003d06:	6862      	ldr	r2, [r4, #4]
 8003d08:	4628      	mov	r0, r5
 8003d0a:	f002 faef 	bl	80062ec <memchr>
 8003d0e:	b108      	cbz	r0, 8003d14 <_printf_i+0x1f4>
 8003d10:	1b40      	subs	r0, r0, r5
 8003d12:	6060      	str	r0, [r4, #4]
 8003d14:	6863      	ldr	r3, [r4, #4]
 8003d16:	6123      	str	r3, [r4, #16]
 8003d18:	2300      	movs	r3, #0
 8003d1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8003d1e:	e7a8      	b.n	8003c72 <_printf_i+0x152>
 8003d20:	462a      	mov	r2, r5
 8003d22:	4649      	mov	r1, r9
 8003d24:	4640      	mov	r0, r8
 8003d26:	6923      	ldr	r3, [r4, #16]
 8003d28:	47d0      	blx	sl
 8003d2a:	3001      	adds	r0, #1
 8003d2c:	d0ab      	beq.n	8003c86 <_printf_i+0x166>
 8003d2e:	6823      	ldr	r3, [r4, #0]
 8003d30:	079b      	lsls	r3, r3, #30
 8003d32:	d413      	bmi.n	8003d5c <_printf_i+0x23c>
 8003d34:	68e0      	ldr	r0, [r4, #12]
 8003d36:	9b03      	ldr	r3, [sp, #12]
 8003d38:	4298      	cmp	r0, r3
 8003d3a:	bfb8      	it	lt
 8003d3c:	4618      	movlt	r0, r3
 8003d3e:	e7a4      	b.n	8003c8a <_printf_i+0x16a>
 8003d40:	2301      	movs	r3, #1
 8003d42:	4632      	mov	r2, r6
 8003d44:	4649      	mov	r1, r9
 8003d46:	4640      	mov	r0, r8
 8003d48:	47d0      	blx	sl
 8003d4a:	3001      	adds	r0, #1
 8003d4c:	d09b      	beq.n	8003c86 <_printf_i+0x166>
 8003d4e:	3501      	adds	r5, #1
 8003d50:	68e3      	ldr	r3, [r4, #12]
 8003d52:	9903      	ldr	r1, [sp, #12]
 8003d54:	1a5b      	subs	r3, r3, r1
 8003d56:	42ab      	cmp	r3, r5
 8003d58:	dcf2      	bgt.n	8003d40 <_printf_i+0x220>
 8003d5a:	e7eb      	b.n	8003d34 <_printf_i+0x214>
 8003d5c:	2500      	movs	r5, #0
 8003d5e:	f104 0619 	add.w	r6, r4, #25
 8003d62:	e7f5      	b.n	8003d50 <_printf_i+0x230>
 8003d64:	08007d96 	.word	0x08007d96
 8003d68:	08007da7 	.word	0x08007da7

08003d6c <_scanf_float>:
 8003d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d70:	b087      	sub	sp, #28
 8003d72:	9303      	str	r3, [sp, #12]
 8003d74:	688b      	ldr	r3, [r1, #8]
 8003d76:	4617      	mov	r7, r2
 8003d78:	1e5a      	subs	r2, r3, #1
 8003d7a:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8003d7e:	bf85      	ittet	hi
 8003d80:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8003d84:	195b      	addhi	r3, r3, r5
 8003d86:	2300      	movls	r3, #0
 8003d88:	9302      	strhi	r3, [sp, #8]
 8003d8a:	bf88      	it	hi
 8003d8c:	f240 135d 	movwhi	r3, #349	; 0x15d
 8003d90:	468b      	mov	fp, r1
 8003d92:	f04f 0500 	mov.w	r5, #0
 8003d96:	bf8c      	ite	hi
 8003d98:	608b      	strhi	r3, [r1, #8]
 8003d9a:	9302      	strls	r3, [sp, #8]
 8003d9c:	680b      	ldr	r3, [r1, #0]
 8003d9e:	4680      	mov	r8, r0
 8003da0:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8003da4:	f84b 3b1c 	str.w	r3, [fp], #28
 8003da8:	460c      	mov	r4, r1
 8003daa:	465e      	mov	r6, fp
 8003dac:	46aa      	mov	sl, r5
 8003dae:	46a9      	mov	r9, r5
 8003db0:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8003db4:	9501      	str	r5, [sp, #4]
 8003db6:	68a2      	ldr	r2, [r4, #8]
 8003db8:	b152      	cbz	r2, 8003dd0 <_scanf_float+0x64>
 8003dba:	683b      	ldr	r3, [r7, #0]
 8003dbc:	781b      	ldrb	r3, [r3, #0]
 8003dbe:	2b4e      	cmp	r3, #78	; 0x4e
 8003dc0:	d864      	bhi.n	8003e8c <_scanf_float+0x120>
 8003dc2:	2b40      	cmp	r3, #64	; 0x40
 8003dc4:	d83c      	bhi.n	8003e40 <_scanf_float+0xd4>
 8003dc6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8003dca:	b2c8      	uxtb	r0, r1
 8003dcc:	280e      	cmp	r0, #14
 8003dce:	d93a      	bls.n	8003e46 <_scanf_float+0xda>
 8003dd0:	f1b9 0f00 	cmp.w	r9, #0
 8003dd4:	d003      	beq.n	8003dde <_scanf_float+0x72>
 8003dd6:	6823      	ldr	r3, [r4, #0]
 8003dd8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003ddc:	6023      	str	r3, [r4, #0]
 8003dde:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003de2:	f1ba 0f01 	cmp.w	sl, #1
 8003de6:	f200 8113 	bhi.w	8004010 <_scanf_float+0x2a4>
 8003dea:	455e      	cmp	r6, fp
 8003dec:	f200 8105 	bhi.w	8003ffa <_scanf_float+0x28e>
 8003df0:	2501      	movs	r5, #1
 8003df2:	4628      	mov	r0, r5
 8003df4:	b007      	add	sp, #28
 8003df6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003dfa:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8003dfe:	2a0d      	cmp	r2, #13
 8003e00:	d8e6      	bhi.n	8003dd0 <_scanf_float+0x64>
 8003e02:	a101      	add	r1, pc, #4	; (adr r1, 8003e08 <_scanf_float+0x9c>)
 8003e04:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8003e08:	08003f47 	.word	0x08003f47
 8003e0c:	08003dd1 	.word	0x08003dd1
 8003e10:	08003dd1 	.word	0x08003dd1
 8003e14:	08003dd1 	.word	0x08003dd1
 8003e18:	08003fa7 	.word	0x08003fa7
 8003e1c:	08003f7f 	.word	0x08003f7f
 8003e20:	08003dd1 	.word	0x08003dd1
 8003e24:	08003dd1 	.word	0x08003dd1
 8003e28:	08003f55 	.word	0x08003f55
 8003e2c:	08003dd1 	.word	0x08003dd1
 8003e30:	08003dd1 	.word	0x08003dd1
 8003e34:	08003dd1 	.word	0x08003dd1
 8003e38:	08003dd1 	.word	0x08003dd1
 8003e3c:	08003f0d 	.word	0x08003f0d
 8003e40:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8003e44:	e7db      	b.n	8003dfe <_scanf_float+0x92>
 8003e46:	290e      	cmp	r1, #14
 8003e48:	d8c2      	bhi.n	8003dd0 <_scanf_float+0x64>
 8003e4a:	a001      	add	r0, pc, #4	; (adr r0, 8003e50 <_scanf_float+0xe4>)
 8003e4c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8003e50:	08003eff 	.word	0x08003eff
 8003e54:	08003dd1 	.word	0x08003dd1
 8003e58:	08003eff 	.word	0x08003eff
 8003e5c:	08003f93 	.word	0x08003f93
 8003e60:	08003dd1 	.word	0x08003dd1
 8003e64:	08003ead 	.word	0x08003ead
 8003e68:	08003ee9 	.word	0x08003ee9
 8003e6c:	08003ee9 	.word	0x08003ee9
 8003e70:	08003ee9 	.word	0x08003ee9
 8003e74:	08003ee9 	.word	0x08003ee9
 8003e78:	08003ee9 	.word	0x08003ee9
 8003e7c:	08003ee9 	.word	0x08003ee9
 8003e80:	08003ee9 	.word	0x08003ee9
 8003e84:	08003ee9 	.word	0x08003ee9
 8003e88:	08003ee9 	.word	0x08003ee9
 8003e8c:	2b6e      	cmp	r3, #110	; 0x6e
 8003e8e:	d809      	bhi.n	8003ea4 <_scanf_float+0x138>
 8003e90:	2b60      	cmp	r3, #96	; 0x60
 8003e92:	d8b2      	bhi.n	8003dfa <_scanf_float+0x8e>
 8003e94:	2b54      	cmp	r3, #84	; 0x54
 8003e96:	d077      	beq.n	8003f88 <_scanf_float+0x21c>
 8003e98:	2b59      	cmp	r3, #89	; 0x59
 8003e9a:	d199      	bne.n	8003dd0 <_scanf_float+0x64>
 8003e9c:	2d07      	cmp	r5, #7
 8003e9e:	d197      	bne.n	8003dd0 <_scanf_float+0x64>
 8003ea0:	2508      	movs	r5, #8
 8003ea2:	e029      	b.n	8003ef8 <_scanf_float+0x18c>
 8003ea4:	2b74      	cmp	r3, #116	; 0x74
 8003ea6:	d06f      	beq.n	8003f88 <_scanf_float+0x21c>
 8003ea8:	2b79      	cmp	r3, #121	; 0x79
 8003eaa:	e7f6      	b.n	8003e9a <_scanf_float+0x12e>
 8003eac:	6821      	ldr	r1, [r4, #0]
 8003eae:	05c8      	lsls	r0, r1, #23
 8003eb0:	d51a      	bpl.n	8003ee8 <_scanf_float+0x17c>
 8003eb2:	9b02      	ldr	r3, [sp, #8]
 8003eb4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8003eb8:	6021      	str	r1, [r4, #0]
 8003eba:	f109 0901 	add.w	r9, r9, #1
 8003ebe:	b11b      	cbz	r3, 8003ec8 <_scanf_float+0x15c>
 8003ec0:	3b01      	subs	r3, #1
 8003ec2:	3201      	adds	r2, #1
 8003ec4:	9302      	str	r3, [sp, #8]
 8003ec6:	60a2      	str	r2, [r4, #8]
 8003ec8:	68a3      	ldr	r3, [r4, #8]
 8003eca:	3b01      	subs	r3, #1
 8003ecc:	60a3      	str	r3, [r4, #8]
 8003ece:	6923      	ldr	r3, [r4, #16]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	6123      	str	r3, [r4, #16]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	3b01      	subs	r3, #1
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	607b      	str	r3, [r7, #4]
 8003edc:	f340 8084 	ble.w	8003fe8 <_scanf_float+0x27c>
 8003ee0:	683b      	ldr	r3, [r7, #0]
 8003ee2:	3301      	adds	r3, #1
 8003ee4:	603b      	str	r3, [r7, #0]
 8003ee6:	e766      	b.n	8003db6 <_scanf_float+0x4a>
 8003ee8:	eb1a 0f05 	cmn.w	sl, r5
 8003eec:	f47f af70 	bne.w	8003dd0 <_scanf_float+0x64>
 8003ef0:	6822      	ldr	r2, [r4, #0]
 8003ef2:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8003ef6:	6022      	str	r2, [r4, #0]
 8003ef8:	f806 3b01 	strb.w	r3, [r6], #1
 8003efc:	e7e4      	b.n	8003ec8 <_scanf_float+0x15c>
 8003efe:	6822      	ldr	r2, [r4, #0]
 8003f00:	0610      	lsls	r0, r2, #24
 8003f02:	f57f af65 	bpl.w	8003dd0 <_scanf_float+0x64>
 8003f06:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f0a:	e7f4      	b.n	8003ef6 <_scanf_float+0x18a>
 8003f0c:	f1ba 0f00 	cmp.w	sl, #0
 8003f10:	d10e      	bne.n	8003f30 <_scanf_float+0x1c4>
 8003f12:	f1b9 0f00 	cmp.w	r9, #0
 8003f16:	d10e      	bne.n	8003f36 <_scanf_float+0x1ca>
 8003f18:	6822      	ldr	r2, [r4, #0]
 8003f1a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003f1e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003f22:	d108      	bne.n	8003f36 <_scanf_float+0x1ca>
 8003f24:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003f28:	f04f 0a01 	mov.w	sl, #1
 8003f2c:	6022      	str	r2, [r4, #0]
 8003f2e:	e7e3      	b.n	8003ef8 <_scanf_float+0x18c>
 8003f30:	f1ba 0f02 	cmp.w	sl, #2
 8003f34:	d055      	beq.n	8003fe2 <_scanf_float+0x276>
 8003f36:	2d01      	cmp	r5, #1
 8003f38:	d002      	beq.n	8003f40 <_scanf_float+0x1d4>
 8003f3a:	2d04      	cmp	r5, #4
 8003f3c:	f47f af48 	bne.w	8003dd0 <_scanf_float+0x64>
 8003f40:	3501      	adds	r5, #1
 8003f42:	b2ed      	uxtb	r5, r5
 8003f44:	e7d8      	b.n	8003ef8 <_scanf_float+0x18c>
 8003f46:	f1ba 0f01 	cmp.w	sl, #1
 8003f4a:	f47f af41 	bne.w	8003dd0 <_scanf_float+0x64>
 8003f4e:	f04f 0a02 	mov.w	sl, #2
 8003f52:	e7d1      	b.n	8003ef8 <_scanf_float+0x18c>
 8003f54:	b97d      	cbnz	r5, 8003f76 <_scanf_float+0x20a>
 8003f56:	f1b9 0f00 	cmp.w	r9, #0
 8003f5a:	f47f af3c 	bne.w	8003dd6 <_scanf_float+0x6a>
 8003f5e:	6822      	ldr	r2, [r4, #0]
 8003f60:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8003f64:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8003f68:	f47f af39 	bne.w	8003dde <_scanf_float+0x72>
 8003f6c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003f70:	2501      	movs	r5, #1
 8003f72:	6022      	str	r2, [r4, #0]
 8003f74:	e7c0      	b.n	8003ef8 <_scanf_float+0x18c>
 8003f76:	2d03      	cmp	r5, #3
 8003f78:	d0e2      	beq.n	8003f40 <_scanf_float+0x1d4>
 8003f7a:	2d05      	cmp	r5, #5
 8003f7c:	e7de      	b.n	8003f3c <_scanf_float+0x1d0>
 8003f7e:	2d02      	cmp	r5, #2
 8003f80:	f47f af26 	bne.w	8003dd0 <_scanf_float+0x64>
 8003f84:	2503      	movs	r5, #3
 8003f86:	e7b7      	b.n	8003ef8 <_scanf_float+0x18c>
 8003f88:	2d06      	cmp	r5, #6
 8003f8a:	f47f af21 	bne.w	8003dd0 <_scanf_float+0x64>
 8003f8e:	2507      	movs	r5, #7
 8003f90:	e7b2      	b.n	8003ef8 <_scanf_float+0x18c>
 8003f92:	6822      	ldr	r2, [r4, #0]
 8003f94:	0591      	lsls	r1, r2, #22
 8003f96:	f57f af1b 	bpl.w	8003dd0 <_scanf_float+0x64>
 8003f9a:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8003f9e:	6022      	str	r2, [r4, #0]
 8003fa0:	f8cd 9004 	str.w	r9, [sp, #4]
 8003fa4:	e7a8      	b.n	8003ef8 <_scanf_float+0x18c>
 8003fa6:	6822      	ldr	r2, [r4, #0]
 8003fa8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8003fac:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8003fb0:	d006      	beq.n	8003fc0 <_scanf_float+0x254>
 8003fb2:	0550      	lsls	r0, r2, #21
 8003fb4:	f57f af0c 	bpl.w	8003dd0 <_scanf_float+0x64>
 8003fb8:	f1b9 0f00 	cmp.w	r9, #0
 8003fbc:	f43f af0f 	beq.w	8003dde <_scanf_float+0x72>
 8003fc0:	0591      	lsls	r1, r2, #22
 8003fc2:	bf58      	it	pl
 8003fc4:	9901      	ldrpl	r1, [sp, #4]
 8003fc6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8003fca:	bf58      	it	pl
 8003fcc:	eba9 0101 	subpl.w	r1, r9, r1
 8003fd0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 8003fd4:	f04f 0900 	mov.w	r9, #0
 8003fd8:	bf58      	it	pl
 8003fda:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8003fde:	6022      	str	r2, [r4, #0]
 8003fe0:	e78a      	b.n	8003ef8 <_scanf_float+0x18c>
 8003fe2:	f04f 0a03 	mov.w	sl, #3
 8003fe6:	e787      	b.n	8003ef8 <_scanf_float+0x18c>
 8003fe8:	4639      	mov	r1, r7
 8003fea:	4640      	mov	r0, r8
 8003fec:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8003ff0:	4798      	blx	r3
 8003ff2:	2800      	cmp	r0, #0
 8003ff4:	f43f aedf 	beq.w	8003db6 <_scanf_float+0x4a>
 8003ff8:	e6ea      	b.n	8003dd0 <_scanf_float+0x64>
 8003ffa:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8003ffe:	463a      	mov	r2, r7
 8004000:	4640      	mov	r0, r8
 8004002:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8004006:	4798      	blx	r3
 8004008:	6923      	ldr	r3, [r4, #16]
 800400a:	3b01      	subs	r3, #1
 800400c:	6123      	str	r3, [r4, #16]
 800400e:	e6ec      	b.n	8003dea <_scanf_float+0x7e>
 8004010:	1e6b      	subs	r3, r5, #1
 8004012:	2b06      	cmp	r3, #6
 8004014:	d825      	bhi.n	8004062 <_scanf_float+0x2f6>
 8004016:	2d02      	cmp	r5, #2
 8004018:	d836      	bhi.n	8004088 <_scanf_float+0x31c>
 800401a:	455e      	cmp	r6, fp
 800401c:	f67f aee8 	bls.w	8003df0 <_scanf_float+0x84>
 8004020:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004024:	463a      	mov	r2, r7
 8004026:	4640      	mov	r0, r8
 8004028:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800402c:	4798      	blx	r3
 800402e:	6923      	ldr	r3, [r4, #16]
 8004030:	3b01      	subs	r3, #1
 8004032:	6123      	str	r3, [r4, #16]
 8004034:	e7f1      	b.n	800401a <_scanf_float+0x2ae>
 8004036:	9802      	ldr	r0, [sp, #8]
 8004038:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800403c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8004040:	463a      	mov	r2, r7
 8004042:	9002      	str	r0, [sp, #8]
 8004044:	4640      	mov	r0, r8
 8004046:	4798      	blx	r3
 8004048:	6923      	ldr	r3, [r4, #16]
 800404a:	3b01      	subs	r3, #1
 800404c:	6123      	str	r3, [r4, #16]
 800404e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8004052:	fa5f fa8a 	uxtb.w	sl, sl
 8004056:	f1ba 0f02 	cmp.w	sl, #2
 800405a:	d1ec      	bne.n	8004036 <_scanf_float+0x2ca>
 800405c:	3d03      	subs	r5, #3
 800405e:	b2ed      	uxtb	r5, r5
 8004060:	1b76      	subs	r6, r6, r5
 8004062:	6823      	ldr	r3, [r4, #0]
 8004064:	05da      	lsls	r2, r3, #23
 8004066:	d52f      	bpl.n	80040c8 <_scanf_float+0x35c>
 8004068:	055b      	lsls	r3, r3, #21
 800406a:	d510      	bpl.n	800408e <_scanf_float+0x322>
 800406c:	455e      	cmp	r6, fp
 800406e:	f67f aebf 	bls.w	8003df0 <_scanf_float+0x84>
 8004072:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8004076:	463a      	mov	r2, r7
 8004078:	4640      	mov	r0, r8
 800407a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800407e:	4798      	blx	r3
 8004080:	6923      	ldr	r3, [r4, #16]
 8004082:	3b01      	subs	r3, #1
 8004084:	6123      	str	r3, [r4, #16]
 8004086:	e7f1      	b.n	800406c <_scanf_float+0x300>
 8004088:	46aa      	mov	sl, r5
 800408a:	9602      	str	r6, [sp, #8]
 800408c:	e7df      	b.n	800404e <_scanf_float+0x2e2>
 800408e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8004092:	6923      	ldr	r3, [r4, #16]
 8004094:	2965      	cmp	r1, #101	; 0x65
 8004096:	f103 33ff 	add.w	r3, r3, #4294967295
 800409a:	f106 35ff 	add.w	r5, r6, #4294967295
 800409e:	6123      	str	r3, [r4, #16]
 80040a0:	d00c      	beq.n	80040bc <_scanf_float+0x350>
 80040a2:	2945      	cmp	r1, #69	; 0x45
 80040a4:	d00a      	beq.n	80040bc <_scanf_float+0x350>
 80040a6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80040aa:	463a      	mov	r2, r7
 80040ac:	4640      	mov	r0, r8
 80040ae:	4798      	blx	r3
 80040b0:	6923      	ldr	r3, [r4, #16]
 80040b2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80040b6:	3b01      	subs	r3, #1
 80040b8:	1eb5      	subs	r5, r6, #2
 80040ba:	6123      	str	r3, [r4, #16]
 80040bc:	463a      	mov	r2, r7
 80040be:	4640      	mov	r0, r8
 80040c0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80040c4:	4798      	blx	r3
 80040c6:	462e      	mov	r6, r5
 80040c8:	6825      	ldr	r5, [r4, #0]
 80040ca:	f015 0510 	ands.w	r5, r5, #16
 80040ce:	d155      	bne.n	800417c <_scanf_float+0x410>
 80040d0:	7035      	strb	r5, [r6, #0]
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80040d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040dc:	d11b      	bne.n	8004116 <_scanf_float+0x3aa>
 80040de:	9b01      	ldr	r3, [sp, #4]
 80040e0:	454b      	cmp	r3, r9
 80040e2:	eba3 0209 	sub.w	r2, r3, r9
 80040e6:	d123      	bne.n	8004130 <_scanf_float+0x3c4>
 80040e8:	2200      	movs	r2, #0
 80040ea:	4659      	mov	r1, fp
 80040ec:	4640      	mov	r0, r8
 80040ee:	f000 fe7b 	bl	8004de8 <_strtod_r>
 80040f2:	6822      	ldr	r2, [r4, #0]
 80040f4:	9b03      	ldr	r3, [sp, #12]
 80040f6:	f012 0f02 	tst.w	r2, #2
 80040fa:	4606      	mov	r6, r0
 80040fc:	460f      	mov	r7, r1
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	d021      	beq.n	8004146 <_scanf_float+0x3da>
 8004102:	1d1a      	adds	r2, r3, #4
 8004104:	9903      	ldr	r1, [sp, #12]
 8004106:	600a      	str	r2, [r1, #0]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	e9c3 6700 	strd	r6, r7, [r3]
 800410e:	68e3      	ldr	r3, [r4, #12]
 8004110:	3301      	adds	r3, #1
 8004112:	60e3      	str	r3, [r4, #12]
 8004114:	e66d      	b.n	8003df2 <_scanf_float+0x86>
 8004116:	9b04      	ldr	r3, [sp, #16]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0e5      	beq.n	80040e8 <_scanf_float+0x37c>
 800411c:	9905      	ldr	r1, [sp, #20]
 800411e:	230a      	movs	r3, #10
 8004120:	462a      	mov	r2, r5
 8004122:	4640      	mov	r0, r8
 8004124:	3101      	adds	r1, #1
 8004126:	f000 fee1 	bl	8004eec <_strtol_r>
 800412a:	9b04      	ldr	r3, [sp, #16]
 800412c:	9e05      	ldr	r6, [sp, #20]
 800412e:	1ac2      	subs	r2, r0, r3
 8004130:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8004134:	429e      	cmp	r6, r3
 8004136:	bf28      	it	cs
 8004138:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800413c:	4630      	mov	r0, r6
 800413e:	4910      	ldr	r1, [pc, #64]	; (8004180 <_scanf_float+0x414>)
 8004140:	f000 f826 	bl	8004190 <siprintf>
 8004144:	e7d0      	b.n	80040e8 <_scanf_float+0x37c>
 8004146:	f012 0f04 	tst.w	r2, #4
 800414a:	f103 0204 	add.w	r2, r3, #4
 800414e:	d1d9      	bne.n	8004104 <_scanf_float+0x398>
 8004150:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8004154:	f8cc 2000 	str.w	r2, [ip]
 8004158:	f8d3 8000 	ldr.w	r8, [r3]
 800415c:	4602      	mov	r2, r0
 800415e:	460b      	mov	r3, r1
 8004160:	f7fc fc54 	bl	8000a0c <__aeabi_dcmpun>
 8004164:	b128      	cbz	r0, 8004172 <_scanf_float+0x406>
 8004166:	4807      	ldr	r0, [pc, #28]	; (8004184 <_scanf_float+0x418>)
 8004168:	f000 f80e 	bl	8004188 <nanf>
 800416c:	f8c8 0000 	str.w	r0, [r8]
 8004170:	e7cd      	b.n	800410e <_scanf_float+0x3a2>
 8004172:	4630      	mov	r0, r6
 8004174:	4639      	mov	r1, r7
 8004176:	f7fc fca7 	bl	8000ac8 <__aeabi_d2f>
 800417a:	e7f7      	b.n	800416c <_scanf_float+0x400>
 800417c:	2500      	movs	r5, #0
 800417e:	e638      	b.n	8003df2 <_scanf_float+0x86>
 8004180:	08007db8 	.word	0x08007db8
 8004184:	080081c0 	.word	0x080081c0

08004188 <nanf>:
 8004188:	4800      	ldr	r0, [pc, #0]	; (800418c <nanf+0x4>)
 800418a:	4770      	bx	lr
 800418c:	7fc00000 	.word	0x7fc00000

08004190 <siprintf>:
 8004190:	b40e      	push	{r1, r2, r3}
 8004192:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004196:	b500      	push	{lr}
 8004198:	b09c      	sub	sp, #112	; 0x70
 800419a:	ab1d      	add	r3, sp, #116	; 0x74
 800419c:	9002      	str	r0, [sp, #8]
 800419e:	9006      	str	r0, [sp, #24]
 80041a0:	9107      	str	r1, [sp, #28]
 80041a2:	9104      	str	r1, [sp, #16]
 80041a4:	4808      	ldr	r0, [pc, #32]	; (80041c8 <siprintf+0x38>)
 80041a6:	4909      	ldr	r1, [pc, #36]	; (80041cc <siprintf+0x3c>)
 80041a8:	f853 2b04 	ldr.w	r2, [r3], #4
 80041ac:	9105      	str	r1, [sp, #20]
 80041ae:	6800      	ldr	r0, [r0, #0]
 80041b0:	a902      	add	r1, sp, #8
 80041b2:	9301      	str	r3, [sp, #4]
 80041b4:	f002 feba 	bl	8006f2c <_svfiprintf_r>
 80041b8:	2200      	movs	r2, #0
 80041ba:	9b02      	ldr	r3, [sp, #8]
 80041bc:	701a      	strb	r2, [r3, #0]
 80041be:	b01c      	add	sp, #112	; 0x70
 80041c0:	f85d eb04 	ldr.w	lr, [sp], #4
 80041c4:	b003      	add	sp, #12
 80041c6:	4770      	bx	lr
 80041c8:	2000000c 	.word	0x2000000c
 80041cc:	ffff0208 	.word	0xffff0208

080041d0 <sulp>:
 80041d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80041d4:	460f      	mov	r7, r1
 80041d6:	4690      	mov	r8, r2
 80041d8:	f002 fc14 	bl	8006a04 <__ulp>
 80041dc:	4604      	mov	r4, r0
 80041de:	460d      	mov	r5, r1
 80041e0:	f1b8 0f00 	cmp.w	r8, #0
 80041e4:	d011      	beq.n	800420a <sulp+0x3a>
 80041e6:	f3c7 530a 	ubfx	r3, r7, #20, #11
 80041ea:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	dd0b      	ble.n	800420a <sulp+0x3a>
 80041f2:	2400      	movs	r4, #0
 80041f4:	051b      	lsls	r3, r3, #20
 80041f6:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80041fa:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80041fe:	4622      	mov	r2, r4
 8004200:	462b      	mov	r3, r5
 8004202:	f7fc f969 	bl	80004d8 <__aeabi_dmul>
 8004206:	4604      	mov	r4, r0
 8004208:	460d      	mov	r5, r1
 800420a:	4620      	mov	r0, r4
 800420c:	4629      	mov	r1, r5
 800420e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004212:	0000      	movs	r0, r0
 8004214:	0000      	movs	r0, r0
	...

08004218 <_strtod_l>:
 8004218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800421c:	469b      	mov	fp, r3
 800421e:	2300      	movs	r3, #0
 8004220:	b09f      	sub	sp, #124	; 0x7c
 8004222:	931a      	str	r3, [sp, #104]	; 0x68
 8004224:	4b9e      	ldr	r3, [pc, #632]	; (80044a0 <_strtod_l+0x288>)
 8004226:	4682      	mov	sl, r0
 8004228:	681f      	ldr	r7, [r3, #0]
 800422a:	460e      	mov	r6, r1
 800422c:	4638      	mov	r0, r7
 800422e:	9215      	str	r2, [sp, #84]	; 0x54
 8004230:	f7fb ff8e 	bl	8000150 <strlen>
 8004234:	f04f 0800 	mov.w	r8, #0
 8004238:	4604      	mov	r4, r0
 800423a:	f04f 0900 	mov.w	r9, #0
 800423e:	9619      	str	r6, [sp, #100]	; 0x64
 8004240:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004242:	781a      	ldrb	r2, [r3, #0]
 8004244:	2a2b      	cmp	r2, #43	; 0x2b
 8004246:	d04c      	beq.n	80042e2 <_strtod_l+0xca>
 8004248:	d83a      	bhi.n	80042c0 <_strtod_l+0xa8>
 800424a:	2a0d      	cmp	r2, #13
 800424c:	d833      	bhi.n	80042b6 <_strtod_l+0x9e>
 800424e:	2a08      	cmp	r2, #8
 8004250:	d833      	bhi.n	80042ba <_strtod_l+0xa2>
 8004252:	2a00      	cmp	r2, #0
 8004254:	d03d      	beq.n	80042d2 <_strtod_l+0xba>
 8004256:	2300      	movs	r3, #0
 8004258:	930a      	str	r3, [sp, #40]	; 0x28
 800425a:	9d19      	ldr	r5, [sp, #100]	; 0x64
 800425c:	782b      	ldrb	r3, [r5, #0]
 800425e:	2b30      	cmp	r3, #48	; 0x30
 8004260:	f040 80aa 	bne.w	80043b8 <_strtod_l+0x1a0>
 8004264:	786b      	ldrb	r3, [r5, #1]
 8004266:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800426a:	2b58      	cmp	r3, #88	; 0x58
 800426c:	d166      	bne.n	800433c <_strtod_l+0x124>
 800426e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8004270:	4650      	mov	r0, sl
 8004272:	9301      	str	r3, [sp, #4]
 8004274:	ab1a      	add	r3, sp, #104	; 0x68
 8004276:	9300      	str	r3, [sp, #0]
 8004278:	4a8a      	ldr	r2, [pc, #552]	; (80044a4 <_strtod_l+0x28c>)
 800427a:	f8cd b008 	str.w	fp, [sp, #8]
 800427e:	ab1b      	add	r3, sp, #108	; 0x6c
 8004280:	a919      	add	r1, sp, #100	; 0x64
 8004282:	f001 fd17 	bl	8005cb4 <__gethex>
 8004286:	f010 0607 	ands.w	r6, r0, #7
 800428a:	4604      	mov	r4, r0
 800428c:	d005      	beq.n	800429a <_strtod_l+0x82>
 800428e:	2e06      	cmp	r6, #6
 8004290:	d129      	bne.n	80042e6 <_strtod_l+0xce>
 8004292:	2300      	movs	r3, #0
 8004294:	3501      	adds	r5, #1
 8004296:	9519      	str	r5, [sp, #100]	; 0x64
 8004298:	930a      	str	r3, [sp, #40]	; 0x28
 800429a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800429c:	2b00      	cmp	r3, #0
 800429e:	f040 858a 	bne.w	8004db6 <_strtod_l+0xb9e>
 80042a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80042a4:	b1d3      	cbz	r3, 80042dc <_strtod_l+0xc4>
 80042a6:	4642      	mov	r2, r8
 80042a8:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 80042ac:	4610      	mov	r0, r2
 80042ae:	4619      	mov	r1, r3
 80042b0:	b01f      	add	sp, #124	; 0x7c
 80042b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80042b6:	2a20      	cmp	r2, #32
 80042b8:	d1cd      	bne.n	8004256 <_strtod_l+0x3e>
 80042ba:	3301      	adds	r3, #1
 80042bc:	9319      	str	r3, [sp, #100]	; 0x64
 80042be:	e7bf      	b.n	8004240 <_strtod_l+0x28>
 80042c0:	2a2d      	cmp	r2, #45	; 0x2d
 80042c2:	d1c8      	bne.n	8004256 <_strtod_l+0x3e>
 80042c4:	2201      	movs	r2, #1
 80042c6:	920a      	str	r2, [sp, #40]	; 0x28
 80042c8:	1c5a      	adds	r2, r3, #1
 80042ca:	9219      	str	r2, [sp, #100]	; 0x64
 80042cc:	785b      	ldrb	r3, [r3, #1]
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d1c3      	bne.n	800425a <_strtod_l+0x42>
 80042d2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80042d4:	9619      	str	r6, [sp, #100]	; 0x64
 80042d6:	2b00      	cmp	r3, #0
 80042d8:	f040 856b 	bne.w	8004db2 <_strtod_l+0xb9a>
 80042dc:	4642      	mov	r2, r8
 80042de:	464b      	mov	r3, r9
 80042e0:	e7e4      	b.n	80042ac <_strtod_l+0x94>
 80042e2:	2200      	movs	r2, #0
 80042e4:	e7ef      	b.n	80042c6 <_strtod_l+0xae>
 80042e6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80042e8:	b13a      	cbz	r2, 80042fa <_strtod_l+0xe2>
 80042ea:	2135      	movs	r1, #53	; 0x35
 80042ec:	a81c      	add	r0, sp, #112	; 0x70
 80042ee:	f002 fc8d 	bl	8006c0c <__copybits>
 80042f2:	4650      	mov	r0, sl
 80042f4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80042f6:	f002 f855 	bl	80063a4 <_Bfree>
 80042fa:	3e01      	subs	r6, #1
 80042fc:	2e04      	cmp	r6, #4
 80042fe:	d806      	bhi.n	800430e <_strtod_l+0xf6>
 8004300:	e8df f006 	tbb	[pc, r6]
 8004304:	1714030a 	.word	0x1714030a
 8004308:	0a          	.byte	0x0a
 8004309:	00          	.byte	0x00
 800430a:	e9dd 891c 	ldrd	r8, r9, [sp, #112]	; 0x70
 800430e:	0721      	lsls	r1, r4, #28
 8004310:	d5c3      	bpl.n	800429a <_strtod_l+0x82>
 8004312:	f049 4900 	orr.w	r9, r9, #2147483648	; 0x80000000
 8004316:	e7c0      	b.n	800429a <_strtod_l+0x82>
 8004318:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800431a:	e9dd 831c 	ldrd	r8, r3, [sp, #112]	; 0x70
 800431e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8004322:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8004326:	ea43 5902 	orr.w	r9, r3, r2, lsl #20
 800432a:	e7f0      	b.n	800430e <_strtod_l+0xf6>
 800432c:	f8df 9178 	ldr.w	r9, [pc, #376]	; 80044a8 <_strtod_l+0x290>
 8004330:	e7ed      	b.n	800430e <_strtod_l+0xf6>
 8004332:	f06f 4900 	mvn.w	r9, #2147483648	; 0x80000000
 8004336:	f04f 38ff 	mov.w	r8, #4294967295
 800433a:	e7e8      	b.n	800430e <_strtod_l+0xf6>
 800433c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800433e:	1c5a      	adds	r2, r3, #1
 8004340:	9219      	str	r2, [sp, #100]	; 0x64
 8004342:	785b      	ldrb	r3, [r3, #1]
 8004344:	2b30      	cmp	r3, #48	; 0x30
 8004346:	d0f9      	beq.n	800433c <_strtod_l+0x124>
 8004348:	2b00      	cmp	r3, #0
 800434a:	d0a6      	beq.n	800429a <_strtod_l+0x82>
 800434c:	2301      	movs	r3, #1
 800434e:	9307      	str	r3, [sp, #28]
 8004350:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004352:	220a      	movs	r2, #10
 8004354:	9308      	str	r3, [sp, #32]
 8004356:	2300      	movs	r3, #0
 8004358:	469b      	mov	fp, r3
 800435a:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800435e:	9819      	ldr	r0, [sp, #100]	; 0x64
 8004360:	7805      	ldrb	r5, [r0, #0]
 8004362:	f1a5 0330 	sub.w	r3, r5, #48	; 0x30
 8004366:	b2d9      	uxtb	r1, r3
 8004368:	2909      	cmp	r1, #9
 800436a:	d927      	bls.n	80043bc <_strtod_l+0x1a4>
 800436c:	4622      	mov	r2, r4
 800436e:	4639      	mov	r1, r7
 8004370:	f002 fef2 	bl	8007158 <strncmp>
 8004374:	2800      	cmp	r0, #0
 8004376:	d033      	beq.n	80043e0 <_strtod_l+0x1c8>
 8004378:	2000      	movs	r0, #0
 800437a:	462a      	mov	r2, r5
 800437c:	465c      	mov	r4, fp
 800437e:	4603      	mov	r3, r0
 8004380:	9004      	str	r0, [sp, #16]
 8004382:	2a65      	cmp	r2, #101	; 0x65
 8004384:	d001      	beq.n	800438a <_strtod_l+0x172>
 8004386:	2a45      	cmp	r2, #69	; 0x45
 8004388:	d114      	bne.n	80043b4 <_strtod_l+0x19c>
 800438a:	b91c      	cbnz	r4, 8004394 <_strtod_l+0x17c>
 800438c:	9a07      	ldr	r2, [sp, #28]
 800438e:	4302      	orrs	r2, r0
 8004390:	d09f      	beq.n	80042d2 <_strtod_l+0xba>
 8004392:	2400      	movs	r4, #0
 8004394:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8004396:	1c72      	adds	r2, r6, #1
 8004398:	9219      	str	r2, [sp, #100]	; 0x64
 800439a:	7872      	ldrb	r2, [r6, #1]
 800439c:	2a2b      	cmp	r2, #43	; 0x2b
 800439e:	d079      	beq.n	8004494 <_strtod_l+0x27c>
 80043a0:	2a2d      	cmp	r2, #45	; 0x2d
 80043a2:	f000 8083 	beq.w	80044ac <_strtod_l+0x294>
 80043a6:	2700      	movs	r7, #0
 80043a8:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80043ac:	2909      	cmp	r1, #9
 80043ae:	f240 8083 	bls.w	80044b8 <_strtod_l+0x2a0>
 80043b2:	9619      	str	r6, [sp, #100]	; 0x64
 80043b4:	2500      	movs	r5, #0
 80043b6:	e09f      	b.n	80044f8 <_strtod_l+0x2e0>
 80043b8:	2300      	movs	r3, #0
 80043ba:	e7c8      	b.n	800434e <_strtod_l+0x136>
 80043bc:	f1bb 0f08 	cmp.w	fp, #8
 80043c0:	bfd5      	itete	le
 80043c2:	9906      	ldrle	r1, [sp, #24]
 80043c4:	9905      	ldrgt	r1, [sp, #20]
 80043c6:	fb02 3301 	mlale	r3, r2, r1, r3
 80043ca:	fb02 3301 	mlagt	r3, r2, r1, r3
 80043ce:	f100 0001 	add.w	r0, r0, #1
 80043d2:	bfd4      	ite	le
 80043d4:	9306      	strle	r3, [sp, #24]
 80043d6:	9305      	strgt	r3, [sp, #20]
 80043d8:	f10b 0b01 	add.w	fp, fp, #1
 80043dc:	9019      	str	r0, [sp, #100]	; 0x64
 80043de:	e7be      	b.n	800435e <_strtod_l+0x146>
 80043e0:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80043e2:	191a      	adds	r2, r3, r4
 80043e4:	9219      	str	r2, [sp, #100]	; 0x64
 80043e6:	5d1a      	ldrb	r2, [r3, r4]
 80043e8:	f1bb 0f00 	cmp.w	fp, #0
 80043ec:	d036      	beq.n	800445c <_strtod_l+0x244>
 80043ee:	465c      	mov	r4, fp
 80043f0:	9004      	str	r0, [sp, #16]
 80043f2:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80043f6:	2b09      	cmp	r3, #9
 80043f8:	d912      	bls.n	8004420 <_strtod_l+0x208>
 80043fa:	2301      	movs	r3, #1
 80043fc:	e7c1      	b.n	8004382 <_strtod_l+0x16a>
 80043fe:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004400:	3001      	adds	r0, #1
 8004402:	1c5a      	adds	r2, r3, #1
 8004404:	9219      	str	r2, [sp, #100]	; 0x64
 8004406:	785a      	ldrb	r2, [r3, #1]
 8004408:	2a30      	cmp	r2, #48	; 0x30
 800440a:	d0f8      	beq.n	80043fe <_strtod_l+0x1e6>
 800440c:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 8004410:	2b08      	cmp	r3, #8
 8004412:	f200 84d5 	bhi.w	8004dc0 <_strtod_l+0xba8>
 8004416:	9004      	str	r0, [sp, #16]
 8004418:	2000      	movs	r0, #0
 800441a:	4604      	mov	r4, r0
 800441c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800441e:	9308      	str	r3, [sp, #32]
 8004420:	3a30      	subs	r2, #48	; 0x30
 8004422:	f100 0301 	add.w	r3, r0, #1
 8004426:	d013      	beq.n	8004450 <_strtod_l+0x238>
 8004428:	9904      	ldr	r1, [sp, #16]
 800442a:	1905      	adds	r5, r0, r4
 800442c:	4419      	add	r1, r3
 800442e:	9104      	str	r1, [sp, #16]
 8004430:	4623      	mov	r3, r4
 8004432:	210a      	movs	r1, #10
 8004434:	42ab      	cmp	r3, r5
 8004436:	d113      	bne.n	8004460 <_strtod_l+0x248>
 8004438:	1823      	adds	r3, r4, r0
 800443a:	2b08      	cmp	r3, #8
 800443c:	f104 0401 	add.w	r4, r4, #1
 8004440:	4404      	add	r4, r0
 8004442:	dc1b      	bgt.n	800447c <_strtod_l+0x264>
 8004444:	230a      	movs	r3, #10
 8004446:	9906      	ldr	r1, [sp, #24]
 8004448:	fb03 2301 	mla	r3, r3, r1, r2
 800444c:	9306      	str	r3, [sp, #24]
 800444e:	2300      	movs	r3, #0
 8004450:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8004452:	4618      	mov	r0, r3
 8004454:	1c51      	adds	r1, r2, #1
 8004456:	9119      	str	r1, [sp, #100]	; 0x64
 8004458:	7852      	ldrb	r2, [r2, #1]
 800445a:	e7ca      	b.n	80043f2 <_strtod_l+0x1da>
 800445c:	4658      	mov	r0, fp
 800445e:	e7d3      	b.n	8004408 <_strtod_l+0x1f0>
 8004460:	2b08      	cmp	r3, #8
 8004462:	dc04      	bgt.n	800446e <_strtod_l+0x256>
 8004464:	9f06      	ldr	r7, [sp, #24]
 8004466:	434f      	muls	r7, r1
 8004468:	9706      	str	r7, [sp, #24]
 800446a:	3301      	adds	r3, #1
 800446c:	e7e2      	b.n	8004434 <_strtod_l+0x21c>
 800446e:	1c5f      	adds	r7, r3, #1
 8004470:	2f10      	cmp	r7, #16
 8004472:	bfde      	ittt	le
 8004474:	9f05      	ldrle	r7, [sp, #20]
 8004476:	434f      	mulle	r7, r1
 8004478:	9705      	strle	r7, [sp, #20]
 800447a:	e7f6      	b.n	800446a <_strtod_l+0x252>
 800447c:	2c10      	cmp	r4, #16
 800447e:	bfdf      	itttt	le
 8004480:	230a      	movle	r3, #10
 8004482:	9905      	ldrle	r1, [sp, #20]
 8004484:	fb03 2301 	mlale	r3, r3, r1, r2
 8004488:	9305      	strle	r3, [sp, #20]
 800448a:	e7e0      	b.n	800444e <_strtod_l+0x236>
 800448c:	2300      	movs	r3, #0
 800448e:	9304      	str	r3, [sp, #16]
 8004490:	2301      	movs	r3, #1
 8004492:	e77b      	b.n	800438c <_strtod_l+0x174>
 8004494:	2700      	movs	r7, #0
 8004496:	1cb2      	adds	r2, r6, #2
 8004498:	9219      	str	r2, [sp, #100]	; 0x64
 800449a:	78b2      	ldrb	r2, [r6, #2]
 800449c:	e784      	b.n	80043a8 <_strtod_l+0x190>
 800449e:	bf00      	nop
 80044a0:	08008008 	.word	0x08008008
 80044a4:	08007dc0 	.word	0x08007dc0
 80044a8:	7ff00000 	.word	0x7ff00000
 80044ac:	2701      	movs	r7, #1
 80044ae:	e7f2      	b.n	8004496 <_strtod_l+0x27e>
 80044b0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80044b2:	1c51      	adds	r1, r2, #1
 80044b4:	9119      	str	r1, [sp, #100]	; 0x64
 80044b6:	7852      	ldrb	r2, [r2, #1]
 80044b8:	2a30      	cmp	r2, #48	; 0x30
 80044ba:	d0f9      	beq.n	80044b0 <_strtod_l+0x298>
 80044bc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80044c0:	2908      	cmp	r1, #8
 80044c2:	f63f af77 	bhi.w	80043b4 <_strtod_l+0x19c>
 80044c6:	f04f 0e0a 	mov.w	lr, #10
 80044ca:	f1a2 0c30 	sub.w	ip, r2, #48	; 0x30
 80044ce:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80044d0:	9209      	str	r2, [sp, #36]	; 0x24
 80044d2:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80044d4:	1c51      	adds	r1, r2, #1
 80044d6:	9119      	str	r1, [sp, #100]	; 0x64
 80044d8:	7852      	ldrb	r2, [r2, #1]
 80044da:	f1a2 0530 	sub.w	r5, r2, #48	; 0x30
 80044de:	2d09      	cmp	r5, #9
 80044e0:	d935      	bls.n	800454e <_strtod_l+0x336>
 80044e2:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80044e4:	1b49      	subs	r1, r1, r5
 80044e6:	2908      	cmp	r1, #8
 80044e8:	f644 651f 	movw	r5, #19999	; 0x4e1f
 80044ec:	dc02      	bgt.n	80044f4 <_strtod_l+0x2dc>
 80044ee:	4565      	cmp	r5, ip
 80044f0:	bfa8      	it	ge
 80044f2:	4665      	movge	r5, ip
 80044f4:	b107      	cbz	r7, 80044f8 <_strtod_l+0x2e0>
 80044f6:	426d      	negs	r5, r5
 80044f8:	2c00      	cmp	r4, #0
 80044fa:	d14c      	bne.n	8004596 <_strtod_l+0x37e>
 80044fc:	9907      	ldr	r1, [sp, #28]
 80044fe:	4301      	orrs	r1, r0
 8004500:	f47f aecb 	bne.w	800429a <_strtod_l+0x82>
 8004504:	2b00      	cmp	r3, #0
 8004506:	f47f aee4 	bne.w	80042d2 <_strtod_l+0xba>
 800450a:	2a69      	cmp	r2, #105	; 0x69
 800450c:	d026      	beq.n	800455c <_strtod_l+0x344>
 800450e:	dc23      	bgt.n	8004558 <_strtod_l+0x340>
 8004510:	2a49      	cmp	r2, #73	; 0x49
 8004512:	d023      	beq.n	800455c <_strtod_l+0x344>
 8004514:	2a4e      	cmp	r2, #78	; 0x4e
 8004516:	f47f aedc 	bne.w	80042d2 <_strtod_l+0xba>
 800451a:	499d      	ldr	r1, [pc, #628]	; (8004790 <_strtod_l+0x578>)
 800451c:	a819      	add	r0, sp, #100	; 0x64
 800451e:	f001 fe17 	bl	8006150 <__match>
 8004522:	2800      	cmp	r0, #0
 8004524:	f43f aed5 	beq.w	80042d2 <_strtod_l+0xba>
 8004528:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800452a:	781b      	ldrb	r3, [r3, #0]
 800452c:	2b28      	cmp	r3, #40	; 0x28
 800452e:	d12c      	bne.n	800458a <_strtod_l+0x372>
 8004530:	4998      	ldr	r1, [pc, #608]	; (8004794 <_strtod_l+0x57c>)
 8004532:	aa1c      	add	r2, sp, #112	; 0x70
 8004534:	a819      	add	r0, sp, #100	; 0x64
 8004536:	f001 fe1f 	bl	8006178 <__hexnan>
 800453a:	2805      	cmp	r0, #5
 800453c:	d125      	bne.n	800458a <_strtod_l+0x372>
 800453e:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8004540:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8004544:	f043 49ff 	orr.w	r9, r3, #2139095040	; 0x7f800000
 8004548:	f449 09e0 	orr.w	r9, r9, #7340032	; 0x700000
 800454c:	e6a5      	b.n	800429a <_strtod_l+0x82>
 800454e:	fb0e 2c0c 	mla	ip, lr, ip, r2
 8004552:	f1ac 0c30 	sub.w	ip, ip, #48	; 0x30
 8004556:	e7bc      	b.n	80044d2 <_strtod_l+0x2ba>
 8004558:	2a6e      	cmp	r2, #110	; 0x6e
 800455a:	e7dc      	b.n	8004516 <_strtod_l+0x2fe>
 800455c:	498e      	ldr	r1, [pc, #568]	; (8004798 <_strtod_l+0x580>)
 800455e:	a819      	add	r0, sp, #100	; 0x64
 8004560:	f001 fdf6 	bl	8006150 <__match>
 8004564:	2800      	cmp	r0, #0
 8004566:	f43f aeb4 	beq.w	80042d2 <_strtod_l+0xba>
 800456a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800456c:	498b      	ldr	r1, [pc, #556]	; (800479c <_strtod_l+0x584>)
 800456e:	3b01      	subs	r3, #1
 8004570:	a819      	add	r0, sp, #100	; 0x64
 8004572:	9319      	str	r3, [sp, #100]	; 0x64
 8004574:	f001 fdec 	bl	8006150 <__match>
 8004578:	b910      	cbnz	r0, 8004580 <_strtod_l+0x368>
 800457a:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800457c:	3301      	adds	r3, #1
 800457e:	9319      	str	r3, [sp, #100]	; 0x64
 8004580:	f04f 0800 	mov.w	r8, #0
 8004584:	f8df 9218 	ldr.w	r9, [pc, #536]	; 80047a0 <_strtod_l+0x588>
 8004588:	e687      	b.n	800429a <_strtod_l+0x82>
 800458a:	4886      	ldr	r0, [pc, #536]	; (80047a4 <_strtod_l+0x58c>)
 800458c:	f002 fdce 	bl	800712c <nan>
 8004590:	4680      	mov	r8, r0
 8004592:	4689      	mov	r9, r1
 8004594:	e681      	b.n	800429a <_strtod_l+0x82>
 8004596:	9b04      	ldr	r3, [sp, #16]
 8004598:	f1bb 0f00 	cmp.w	fp, #0
 800459c:	bf08      	it	eq
 800459e:	46a3      	moveq	fp, r4
 80045a0:	1aeb      	subs	r3, r5, r3
 80045a2:	2c10      	cmp	r4, #16
 80045a4:	9806      	ldr	r0, [sp, #24]
 80045a6:	4626      	mov	r6, r4
 80045a8:	9307      	str	r3, [sp, #28]
 80045aa:	bfa8      	it	ge
 80045ac:	2610      	movge	r6, #16
 80045ae:	f7fb ff19 	bl	80003e4 <__aeabi_ui2d>
 80045b2:	2c09      	cmp	r4, #9
 80045b4:	4680      	mov	r8, r0
 80045b6:	4689      	mov	r9, r1
 80045b8:	dd13      	ble.n	80045e2 <_strtod_l+0x3ca>
 80045ba:	4b7b      	ldr	r3, [pc, #492]	; (80047a8 <_strtod_l+0x590>)
 80045bc:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 80045c0:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 80045c4:	f7fb ff88 	bl	80004d8 <__aeabi_dmul>
 80045c8:	4680      	mov	r8, r0
 80045ca:	9805      	ldr	r0, [sp, #20]
 80045cc:	4689      	mov	r9, r1
 80045ce:	f7fb ff09 	bl	80003e4 <__aeabi_ui2d>
 80045d2:	4602      	mov	r2, r0
 80045d4:	460b      	mov	r3, r1
 80045d6:	4640      	mov	r0, r8
 80045d8:	4649      	mov	r1, r9
 80045da:	f7fb fdc7 	bl	800016c <__adddf3>
 80045de:	4680      	mov	r8, r0
 80045e0:	4689      	mov	r9, r1
 80045e2:	2c0f      	cmp	r4, #15
 80045e4:	dc36      	bgt.n	8004654 <_strtod_l+0x43c>
 80045e6:	9b07      	ldr	r3, [sp, #28]
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	f43f ae56 	beq.w	800429a <_strtod_l+0x82>
 80045ee:	dd22      	ble.n	8004636 <_strtod_l+0x41e>
 80045f0:	2b16      	cmp	r3, #22
 80045f2:	dc09      	bgt.n	8004608 <_strtod_l+0x3f0>
 80045f4:	496c      	ldr	r1, [pc, #432]	; (80047a8 <_strtod_l+0x590>)
 80045f6:	4642      	mov	r2, r8
 80045f8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80045fc:	464b      	mov	r3, r9
 80045fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004602:	f7fb ff69 	bl	80004d8 <__aeabi_dmul>
 8004606:	e7c3      	b.n	8004590 <_strtod_l+0x378>
 8004608:	9a07      	ldr	r2, [sp, #28]
 800460a:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800460e:	4293      	cmp	r3, r2
 8004610:	db20      	blt.n	8004654 <_strtod_l+0x43c>
 8004612:	4d65      	ldr	r5, [pc, #404]	; (80047a8 <_strtod_l+0x590>)
 8004614:	f1c4 040f 	rsb	r4, r4, #15
 8004618:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800461c:	4642      	mov	r2, r8
 800461e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004622:	464b      	mov	r3, r9
 8004624:	f7fb ff58 	bl	80004d8 <__aeabi_dmul>
 8004628:	9b07      	ldr	r3, [sp, #28]
 800462a:	1b1c      	subs	r4, r3, r4
 800462c:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 8004630:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004634:	e7e5      	b.n	8004602 <_strtod_l+0x3ea>
 8004636:	9b07      	ldr	r3, [sp, #28]
 8004638:	3316      	adds	r3, #22
 800463a:	db0b      	blt.n	8004654 <_strtod_l+0x43c>
 800463c:	9b04      	ldr	r3, [sp, #16]
 800463e:	4640      	mov	r0, r8
 8004640:	1b5d      	subs	r5, r3, r5
 8004642:	4b59      	ldr	r3, [pc, #356]	; (80047a8 <_strtod_l+0x590>)
 8004644:	4649      	mov	r1, r9
 8004646:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800464a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800464e:	f7fc f86d 	bl	800072c <__aeabi_ddiv>
 8004652:	e79d      	b.n	8004590 <_strtod_l+0x378>
 8004654:	9b07      	ldr	r3, [sp, #28]
 8004656:	1ba6      	subs	r6, r4, r6
 8004658:	441e      	add	r6, r3
 800465a:	2e00      	cmp	r6, #0
 800465c:	dd74      	ble.n	8004748 <_strtod_l+0x530>
 800465e:	f016 030f 	ands.w	r3, r6, #15
 8004662:	d00a      	beq.n	800467a <_strtod_l+0x462>
 8004664:	4950      	ldr	r1, [pc, #320]	; (80047a8 <_strtod_l+0x590>)
 8004666:	4642      	mov	r2, r8
 8004668:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800466c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004670:	464b      	mov	r3, r9
 8004672:	f7fb ff31 	bl	80004d8 <__aeabi_dmul>
 8004676:	4680      	mov	r8, r0
 8004678:	4689      	mov	r9, r1
 800467a:	f036 060f 	bics.w	r6, r6, #15
 800467e:	d052      	beq.n	8004726 <_strtod_l+0x50e>
 8004680:	f5b6 7f9a 	cmp.w	r6, #308	; 0x134
 8004684:	dd27      	ble.n	80046d6 <_strtod_l+0x4be>
 8004686:	f04f 0b00 	mov.w	fp, #0
 800468a:	f8cd b010 	str.w	fp, [sp, #16]
 800468e:	f8cd b020 	str.w	fp, [sp, #32]
 8004692:	f8cd b018 	str.w	fp, [sp, #24]
 8004696:	2322      	movs	r3, #34	; 0x22
 8004698:	f04f 0800 	mov.w	r8, #0
 800469c:	f8df 9100 	ldr.w	r9, [pc, #256]	; 80047a0 <_strtod_l+0x588>
 80046a0:	f8ca 3000 	str.w	r3, [sl]
 80046a4:	9b08      	ldr	r3, [sp, #32]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	f43f adf7 	beq.w	800429a <_strtod_l+0x82>
 80046ac:	4650      	mov	r0, sl
 80046ae:	991a      	ldr	r1, [sp, #104]	; 0x68
 80046b0:	f001 fe78 	bl	80063a4 <_Bfree>
 80046b4:	4650      	mov	r0, sl
 80046b6:	9906      	ldr	r1, [sp, #24]
 80046b8:	f001 fe74 	bl	80063a4 <_Bfree>
 80046bc:	4650      	mov	r0, sl
 80046be:	9904      	ldr	r1, [sp, #16]
 80046c0:	f001 fe70 	bl	80063a4 <_Bfree>
 80046c4:	4650      	mov	r0, sl
 80046c6:	9908      	ldr	r1, [sp, #32]
 80046c8:	f001 fe6c 	bl	80063a4 <_Bfree>
 80046cc:	4659      	mov	r1, fp
 80046ce:	4650      	mov	r0, sl
 80046d0:	f001 fe68 	bl	80063a4 <_Bfree>
 80046d4:	e5e1      	b.n	800429a <_strtod_l+0x82>
 80046d6:	4b35      	ldr	r3, [pc, #212]	; (80047ac <_strtod_l+0x594>)
 80046d8:	4640      	mov	r0, r8
 80046da:	9305      	str	r3, [sp, #20]
 80046dc:	2300      	movs	r3, #0
 80046de:	4649      	mov	r1, r9
 80046e0:	461f      	mov	r7, r3
 80046e2:	1136      	asrs	r6, r6, #4
 80046e4:	2e01      	cmp	r6, #1
 80046e6:	dc21      	bgt.n	800472c <_strtod_l+0x514>
 80046e8:	b10b      	cbz	r3, 80046ee <_strtod_l+0x4d6>
 80046ea:	4680      	mov	r8, r0
 80046ec:	4689      	mov	r9, r1
 80046ee:	4b2f      	ldr	r3, [pc, #188]	; (80047ac <_strtod_l+0x594>)
 80046f0:	f1a9 7954 	sub.w	r9, r9, #55574528	; 0x3500000
 80046f4:	eb03 07c7 	add.w	r7, r3, r7, lsl #3
 80046f8:	4642      	mov	r2, r8
 80046fa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046fe:	464b      	mov	r3, r9
 8004700:	f7fb feea 	bl	80004d8 <__aeabi_dmul>
 8004704:	4b26      	ldr	r3, [pc, #152]	; (80047a0 <_strtod_l+0x588>)
 8004706:	460a      	mov	r2, r1
 8004708:	400b      	ands	r3, r1
 800470a:	4929      	ldr	r1, [pc, #164]	; (80047b0 <_strtod_l+0x598>)
 800470c:	4680      	mov	r8, r0
 800470e:	428b      	cmp	r3, r1
 8004710:	d8b9      	bhi.n	8004686 <_strtod_l+0x46e>
 8004712:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8004716:	428b      	cmp	r3, r1
 8004718:	bf86      	itte	hi
 800471a:	f04f 38ff 	movhi.w	r8, #4294967295
 800471e:	f8df 9094 	ldrhi.w	r9, [pc, #148]	; 80047b4 <_strtod_l+0x59c>
 8004722:	f102 7954 	addls.w	r9, r2, #55574528	; 0x3500000
 8004726:	2300      	movs	r3, #0
 8004728:	9305      	str	r3, [sp, #20]
 800472a:	e07f      	b.n	800482c <_strtod_l+0x614>
 800472c:	07f2      	lsls	r2, r6, #31
 800472e:	d505      	bpl.n	800473c <_strtod_l+0x524>
 8004730:	9b05      	ldr	r3, [sp, #20]
 8004732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004736:	f7fb fecf 	bl	80004d8 <__aeabi_dmul>
 800473a:	2301      	movs	r3, #1
 800473c:	9a05      	ldr	r2, [sp, #20]
 800473e:	3701      	adds	r7, #1
 8004740:	3208      	adds	r2, #8
 8004742:	1076      	asrs	r6, r6, #1
 8004744:	9205      	str	r2, [sp, #20]
 8004746:	e7cd      	b.n	80046e4 <_strtod_l+0x4cc>
 8004748:	d0ed      	beq.n	8004726 <_strtod_l+0x50e>
 800474a:	4276      	negs	r6, r6
 800474c:	f016 020f 	ands.w	r2, r6, #15
 8004750:	d00a      	beq.n	8004768 <_strtod_l+0x550>
 8004752:	4b15      	ldr	r3, [pc, #84]	; (80047a8 <_strtod_l+0x590>)
 8004754:	4640      	mov	r0, r8
 8004756:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800475a:	4649      	mov	r1, r9
 800475c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004760:	f7fb ffe4 	bl	800072c <__aeabi_ddiv>
 8004764:	4680      	mov	r8, r0
 8004766:	4689      	mov	r9, r1
 8004768:	1136      	asrs	r6, r6, #4
 800476a:	d0dc      	beq.n	8004726 <_strtod_l+0x50e>
 800476c:	2e1f      	cmp	r6, #31
 800476e:	dd23      	ble.n	80047b8 <_strtod_l+0x5a0>
 8004770:	f04f 0b00 	mov.w	fp, #0
 8004774:	f8cd b010 	str.w	fp, [sp, #16]
 8004778:	f8cd b020 	str.w	fp, [sp, #32]
 800477c:	f8cd b018 	str.w	fp, [sp, #24]
 8004780:	2322      	movs	r3, #34	; 0x22
 8004782:	f04f 0800 	mov.w	r8, #0
 8004786:	f04f 0900 	mov.w	r9, #0
 800478a:	f8ca 3000 	str.w	r3, [sl]
 800478e:	e789      	b.n	80046a4 <_strtod_l+0x48c>
 8004790:	08007d91 	.word	0x08007d91
 8004794:	08007dd4 	.word	0x08007dd4
 8004798:	08007d89 	.word	0x08007d89
 800479c:	08007f14 	.word	0x08007f14
 80047a0:	7ff00000 	.word	0x7ff00000
 80047a4:	080081c0 	.word	0x080081c0
 80047a8:	080080a0 	.word	0x080080a0
 80047ac:	08008078 	.word	0x08008078
 80047b0:	7ca00000 	.word	0x7ca00000
 80047b4:	7fefffff 	.word	0x7fefffff
 80047b8:	f016 0310 	ands.w	r3, r6, #16
 80047bc:	bf18      	it	ne
 80047be:	236a      	movne	r3, #106	; 0x6a
 80047c0:	4640      	mov	r0, r8
 80047c2:	9305      	str	r3, [sp, #20]
 80047c4:	4649      	mov	r1, r9
 80047c6:	2300      	movs	r3, #0
 80047c8:	4fb0      	ldr	r7, [pc, #704]	; (8004a8c <_strtod_l+0x874>)
 80047ca:	07f2      	lsls	r2, r6, #31
 80047cc:	d504      	bpl.n	80047d8 <_strtod_l+0x5c0>
 80047ce:	e9d7 2300 	ldrd	r2, r3, [r7]
 80047d2:	f7fb fe81 	bl	80004d8 <__aeabi_dmul>
 80047d6:	2301      	movs	r3, #1
 80047d8:	1076      	asrs	r6, r6, #1
 80047da:	f107 0708 	add.w	r7, r7, #8
 80047de:	d1f4      	bne.n	80047ca <_strtod_l+0x5b2>
 80047e0:	b10b      	cbz	r3, 80047e6 <_strtod_l+0x5ce>
 80047e2:	4680      	mov	r8, r0
 80047e4:	4689      	mov	r9, r1
 80047e6:	9b05      	ldr	r3, [sp, #20]
 80047e8:	b1c3      	cbz	r3, 800481c <_strtod_l+0x604>
 80047ea:	f3c9 520a 	ubfx	r2, r9, #20, #11
 80047ee:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	4649      	mov	r1, r9
 80047f6:	dd11      	ble.n	800481c <_strtod_l+0x604>
 80047f8:	2b1f      	cmp	r3, #31
 80047fa:	f340 8127 	ble.w	8004a4c <_strtod_l+0x834>
 80047fe:	2b34      	cmp	r3, #52	; 0x34
 8004800:	bfd8      	it	le
 8004802:	f04f 33ff 	movle.w	r3, #4294967295
 8004806:	f04f 0800 	mov.w	r8, #0
 800480a:	bfcf      	iteee	gt
 800480c:	f04f 795c 	movgt.w	r9, #57671680	; 0x3700000
 8004810:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8004814:	fa03 f202 	lslle.w	r2, r3, r2
 8004818:	ea02 0901 	andle.w	r9, r2, r1
 800481c:	2200      	movs	r2, #0
 800481e:	2300      	movs	r3, #0
 8004820:	4640      	mov	r0, r8
 8004822:	4649      	mov	r1, r9
 8004824:	f7fc f8c0 	bl	80009a8 <__aeabi_dcmpeq>
 8004828:	2800      	cmp	r0, #0
 800482a:	d1a1      	bne.n	8004770 <_strtod_l+0x558>
 800482c:	9b06      	ldr	r3, [sp, #24]
 800482e:	465a      	mov	r2, fp
 8004830:	9300      	str	r3, [sp, #0]
 8004832:	4650      	mov	r0, sl
 8004834:	4623      	mov	r3, r4
 8004836:	9908      	ldr	r1, [sp, #32]
 8004838:	f001 fe1c 	bl	8006474 <__s2b>
 800483c:	9008      	str	r0, [sp, #32]
 800483e:	2800      	cmp	r0, #0
 8004840:	f43f af21 	beq.w	8004686 <_strtod_l+0x46e>
 8004844:	9b04      	ldr	r3, [sp, #16]
 8004846:	f04f 0b00 	mov.w	fp, #0
 800484a:	1b5d      	subs	r5, r3, r5
 800484c:	9b07      	ldr	r3, [sp, #28]
 800484e:	f8cd b010 	str.w	fp, [sp, #16]
 8004852:	2b00      	cmp	r3, #0
 8004854:	bfb4      	ite	lt
 8004856:	462b      	movlt	r3, r5
 8004858:	2300      	movge	r3, #0
 800485a:	930e      	str	r3, [sp, #56]	; 0x38
 800485c:	9b07      	ldr	r3, [sp, #28]
 800485e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8004862:	9314      	str	r3, [sp, #80]	; 0x50
 8004864:	9b08      	ldr	r3, [sp, #32]
 8004866:	4650      	mov	r0, sl
 8004868:	6859      	ldr	r1, [r3, #4]
 800486a:	f001 fd5b 	bl	8006324 <_Balloc>
 800486e:	9006      	str	r0, [sp, #24]
 8004870:	2800      	cmp	r0, #0
 8004872:	f43f af10 	beq.w	8004696 <_strtod_l+0x47e>
 8004876:	9b08      	ldr	r3, [sp, #32]
 8004878:	300c      	adds	r0, #12
 800487a:	691a      	ldr	r2, [r3, #16]
 800487c:	f103 010c 	add.w	r1, r3, #12
 8004880:	3202      	adds	r2, #2
 8004882:	0092      	lsls	r2, r2, #2
 8004884:	f001 fd40 	bl	8006308 <memcpy>
 8004888:	ab1c      	add	r3, sp, #112	; 0x70
 800488a:	9301      	str	r3, [sp, #4]
 800488c:	ab1b      	add	r3, sp, #108	; 0x6c
 800488e:	9300      	str	r3, [sp, #0]
 8004890:	4642      	mov	r2, r8
 8004892:	464b      	mov	r3, r9
 8004894:	4650      	mov	r0, sl
 8004896:	e9cd 890c 	strd	r8, r9, [sp, #48]	; 0x30
 800489a:	f002 f92d 	bl	8006af8 <__d2b>
 800489e:	901a      	str	r0, [sp, #104]	; 0x68
 80048a0:	2800      	cmp	r0, #0
 80048a2:	f43f aef8 	beq.w	8004696 <_strtod_l+0x47e>
 80048a6:	2101      	movs	r1, #1
 80048a8:	4650      	mov	r0, sl
 80048aa:	f001 fe7b 	bl	80065a4 <__i2b>
 80048ae:	4603      	mov	r3, r0
 80048b0:	9004      	str	r0, [sp, #16]
 80048b2:	2800      	cmp	r0, #0
 80048b4:	f43f aeef 	beq.w	8004696 <_strtod_l+0x47e>
 80048b8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 80048ba:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80048bc:	2d00      	cmp	r5, #0
 80048be:	bfab      	itete	ge
 80048c0:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 80048c2:	9b14      	ldrlt	r3, [sp, #80]	; 0x50
 80048c4:	18ee      	addge	r6, r5, r3
 80048c6:	1b5c      	sublt	r4, r3, r5
 80048c8:	9b05      	ldr	r3, [sp, #20]
 80048ca:	bfa8      	it	ge
 80048cc:	9c14      	ldrge	r4, [sp, #80]	; 0x50
 80048ce:	eba5 0503 	sub.w	r5, r5, r3
 80048d2:	4415      	add	r5, r2
 80048d4:	4b6e      	ldr	r3, [pc, #440]	; (8004a90 <_strtod_l+0x878>)
 80048d6:	f105 35ff 	add.w	r5, r5, #4294967295
 80048da:	bfb8      	it	lt
 80048dc:	9e0e      	ldrlt	r6, [sp, #56]	; 0x38
 80048de:	429d      	cmp	r5, r3
 80048e0:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 80048e4:	f280 80c4 	bge.w	8004a70 <_strtod_l+0x858>
 80048e8:	1b5b      	subs	r3, r3, r5
 80048ea:	2b1f      	cmp	r3, #31
 80048ec:	f04f 0701 	mov.w	r7, #1
 80048f0:	eba2 0203 	sub.w	r2, r2, r3
 80048f4:	f300 80b1 	bgt.w	8004a5a <_strtod_l+0x842>
 80048f8:	2500      	movs	r5, #0
 80048fa:	fa07 f303 	lsl.w	r3, r7, r3
 80048fe:	930f      	str	r3, [sp, #60]	; 0x3c
 8004900:	18b7      	adds	r7, r6, r2
 8004902:	9b05      	ldr	r3, [sp, #20]
 8004904:	42be      	cmp	r6, r7
 8004906:	4414      	add	r4, r2
 8004908:	441c      	add	r4, r3
 800490a:	4633      	mov	r3, r6
 800490c:	bfa8      	it	ge
 800490e:	463b      	movge	r3, r7
 8004910:	42a3      	cmp	r3, r4
 8004912:	bfa8      	it	ge
 8004914:	4623      	movge	r3, r4
 8004916:	2b00      	cmp	r3, #0
 8004918:	bfc2      	ittt	gt
 800491a:	1aff      	subgt	r7, r7, r3
 800491c:	1ae4      	subgt	r4, r4, r3
 800491e:	1af6      	subgt	r6, r6, r3
 8004920:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004922:	2b00      	cmp	r3, #0
 8004924:	dd17      	ble.n	8004956 <_strtod_l+0x73e>
 8004926:	461a      	mov	r2, r3
 8004928:	4650      	mov	r0, sl
 800492a:	9904      	ldr	r1, [sp, #16]
 800492c:	f001 fef8 	bl	8006720 <__pow5mult>
 8004930:	9004      	str	r0, [sp, #16]
 8004932:	2800      	cmp	r0, #0
 8004934:	f43f aeaf 	beq.w	8004696 <_strtod_l+0x47e>
 8004938:	4601      	mov	r1, r0
 800493a:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800493c:	4650      	mov	r0, sl
 800493e:	f001 fe47 	bl	80065d0 <__multiply>
 8004942:	9009      	str	r0, [sp, #36]	; 0x24
 8004944:	2800      	cmp	r0, #0
 8004946:	f43f aea6 	beq.w	8004696 <_strtod_l+0x47e>
 800494a:	4650      	mov	r0, sl
 800494c:	991a      	ldr	r1, [sp, #104]	; 0x68
 800494e:	f001 fd29 	bl	80063a4 <_Bfree>
 8004952:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004954:	931a      	str	r3, [sp, #104]	; 0x68
 8004956:	2f00      	cmp	r7, #0
 8004958:	f300 808e 	bgt.w	8004a78 <_strtod_l+0x860>
 800495c:	9b07      	ldr	r3, [sp, #28]
 800495e:	2b00      	cmp	r3, #0
 8004960:	dd08      	ble.n	8004974 <_strtod_l+0x75c>
 8004962:	4650      	mov	r0, sl
 8004964:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8004966:	9906      	ldr	r1, [sp, #24]
 8004968:	f001 feda 	bl	8006720 <__pow5mult>
 800496c:	9006      	str	r0, [sp, #24]
 800496e:	2800      	cmp	r0, #0
 8004970:	f43f ae91 	beq.w	8004696 <_strtod_l+0x47e>
 8004974:	2c00      	cmp	r4, #0
 8004976:	dd08      	ble.n	800498a <_strtod_l+0x772>
 8004978:	4622      	mov	r2, r4
 800497a:	4650      	mov	r0, sl
 800497c:	9906      	ldr	r1, [sp, #24]
 800497e:	f001 ff29 	bl	80067d4 <__lshift>
 8004982:	9006      	str	r0, [sp, #24]
 8004984:	2800      	cmp	r0, #0
 8004986:	f43f ae86 	beq.w	8004696 <_strtod_l+0x47e>
 800498a:	2e00      	cmp	r6, #0
 800498c:	dd08      	ble.n	80049a0 <_strtod_l+0x788>
 800498e:	4632      	mov	r2, r6
 8004990:	4650      	mov	r0, sl
 8004992:	9904      	ldr	r1, [sp, #16]
 8004994:	f001 ff1e 	bl	80067d4 <__lshift>
 8004998:	9004      	str	r0, [sp, #16]
 800499a:	2800      	cmp	r0, #0
 800499c:	f43f ae7b 	beq.w	8004696 <_strtod_l+0x47e>
 80049a0:	4650      	mov	r0, sl
 80049a2:	9a06      	ldr	r2, [sp, #24]
 80049a4:	991a      	ldr	r1, [sp, #104]	; 0x68
 80049a6:	f001 ffa1 	bl	80068ec <__mdiff>
 80049aa:	4683      	mov	fp, r0
 80049ac:	2800      	cmp	r0, #0
 80049ae:	f43f ae72 	beq.w	8004696 <_strtod_l+0x47e>
 80049b2:	2400      	movs	r4, #0
 80049b4:	68c3      	ldr	r3, [r0, #12]
 80049b6:	9904      	ldr	r1, [sp, #16]
 80049b8:	60c4      	str	r4, [r0, #12]
 80049ba:	930b      	str	r3, [sp, #44]	; 0x2c
 80049bc:	f001 ff7a 	bl	80068b4 <__mcmp>
 80049c0:	42a0      	cmp	r0, r4
 80049c2:	da6b      	bge.n	8004a9c <_strtod_l+0x884>
 80049c4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80049c6:	ea53 0308 	orrs.w	r3, r3, r8
 80049ca:	f040 8091 	bne.w	8004af0 <_strtod_l+0x8d8>
 80049ce:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	f040 808c 	bne.w	8004af0 <_strtod_l+0x8d8>
 80049d8:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80049dc:	0d1b      	lsrs	r3, r3, #20
 80049de:	051b      	lsls	r3, r3, #20
 80049e0:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 80049e4:	f240 8084 	bls.w	8004af0 <_strtod_l+0x8d8>
 80049e8:	f8db 3014 	ldr.w	r3, [fp, #20]
 80049ec:	b91b      	cbnz	r3, 80049f6 <_strtod_l+0x7de>
 80049ee:	f8db 3010 	ldr.w	r3, [fp, #16]
 80049f2:	2b01      	cmp	r3, #1
 80049f4:	dd7c      	ble.n	8004af0 <_strtod_l+0x8d8>
 80049f6:	4659      	mov	r1, fp
 80049f8:	2201      	movs	r2, #1
 80049fa:	4650      	mov	r0, sl
 80049fc:	f001 feea 	bl	80067d4 <__lshift>
 8004a00:	9904      	ldr	r1, [sp, #16]
 8004a02:	4683      	mov	fp, r0
 8004a04:	f001 ff56 	bl	80068b4 <__mcmp>
 8004a08:	2800      	cmp	r0, #0
 8004a0a:	dd71      	ble.n	8004af0 <_strtod_l+0x8d8>
 8004a0c:	9905      	ldr	r1, [sp, #20]
 8004a0e:	464b      	mov	r3, r9
 8004a10:	4a20      	ldr	r2, [pc, #128]	; (8004a94 <_strtod_l+0x87c>)
 8004a12:	2900      	cmp	r1, #0
 8004a14:	f000 808c 	beq.w	8004b30 <_strtod_l+0x918>
 8004a18:	ea02 0109 	and.w	r1, r2, r9
 8004a1c:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8004a20:	f300 8086 	bgt.w	8004b30 <_strtod_l+0x918>
 8004a24:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8004a28:	f77f aeaa 	ble.w	8004780 <_strtod_l+0x568>
 8004a2c:	4640      	mov	r0, r8
 8004a2e:	4649      	mov	r1, r9
 8004a30:	4b19      	ldr	r3, [pc, #100]	; (8004a98 <_strtod_l+0x880>)
 8004a32:	2200      	movs	r2, #0
 8004a34:	f7fb fd50 	bl	80004d8 <__aeabi_dmul>
 8004a38:	460b      	mov	r3, r1
 8004a3a:	4303      	orrs	r3, r0
 8004a3c:	bf08      	it	eq
 8004a3e:	2322      	moveq	r3, #34	; 0x22
 8004a40:	4680      	mov	r8, r0
 8004a42:	4689      	mov	r9, r1
 8004a44:	bf08      	it	eq
 8004a46:	f8ca 3000 	streq.w	r3, [sl]
 8004a4a:	e62f      	b.n	80046ac <_strtod_l+0x494>
 8004a4c:	f04f 32ff 	mov.w	r2, #4294967295
 8004a50:	fa02 f303 	lsl.w	r3, r2, r3
 8004a54:	ea03 0808 	and.w	r8, r3, r8
 8004a58:	e6e0      	b.n	800481c <_strtod_l+0x604>
 8004a5a:	f1c5 457f 	rsb	r5, r5, #4278190080	; 0xff000000
 8004a5e:	f505 057f 	add.w	r5, r5, #16711680	; 0xff0000
 8004a62:	f505 457b 	add.w	r5, r5, #64256	; 0xfb00
 8004a66:	35e2      	adds	r5, #226	; 0xe2
 8004a68:	fa07 f505 	lsl.w	r5, r7, r5
 8004a6c:	970f      	str	r7, [sp, #60]	; 0x3c
 8004a6e:	e747      	b.n	8004900 <_strtod_l+0x6e8>
 8004a70:	2301      	movs	r3, #1
 8004a72:	2500      	movs	r5, #0
 8004a74:	930f      	str	r3, [sp, #60]	; 0x3c
 8004a76:	e743      	b.n	8004900 <_strtod_l+0x6e8>
 8004a78:	463a      	mov	r2, r7
 8004a7a:	4650      	mov	r0, sl
 8004a7c:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004a7e:	f001 fea9 	bl	80067d4 <__lshift>
 8004a82:	901a      	str	r0, [sp, #104]	; 0x68
 8004a84:	2800      	cmp	r0, #0
 8004a86:	f47f af69 	bne.w	800495c <_strtod_l+0x744>
 8004a8a:	e604      	b.n	8004696 <_strtod_l+0x47e>
 8004a8c:	08007de8 	.word	0x08007de8
 8004a90:	fffffc02 	.word	0xfffffc02
 8004a94:	7ff00000 	.word	0x7ff00000
 8004a98:	39500000 	.word	0x39500000
 8004a9c:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 8004aa0:	d165      	bne.n	8004b6e <_strtod_l+0x956>
 8004aa2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004aa4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004aa8:	b35a      	cbz	r2, 8004b02 <_strtod_l+0x8ea>
 8004aaa:	4a99      	ldr	r2, [pc, #612]	; (8004d10 <_strtod_l+0xaf8>)
 8004aac:	4293      	cmp	r3, r2
 8004aae:	d12b      	bne.n	8004b08 <_strtod_l+0x8f0>
 8004ab0:	9b05      	ldr	r3, [sp, #20]
 8004ab2:	4641      	mov	r1, r8
 8004ab4:	b303      	cbz	r3, 8004af8 <_strtod_l+0x8e0>
 8004ab6:	464a      	mov	r2, r9
 8004ab8:	4b96      	ldr	r3, [pc, #600]	; (8004d14 <_strtod_l+0xafc>)
 8004aba:	4013      	ands	r3, r2
 8004abc:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004ac0:	f04f 32ff 	mov.w	r2, #4294967295
 8004ac4:	d81b      	bhi.n	8004afe <_strtod_l+0x8e6>
 8004ac6:	0d1b      	lsrs	r3, r3, #20
 8004ac8:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8004acc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ad0:	4299      	cmp	r1, r3
 8004ad2:	d119      	bne.n	8004b08 <_strtod_l+0x8f0>
 8004ad4:	4b90      	ldr	r3, [pc, #576]	; (8004d18 <_strtod_l+0xb00>)
 8004ad6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004ad8:	429a      	cmp	r2, r3
 8004ada:	d102      	bne.n	8004ae2 <_strtod_l+0x8ca>
 8004adc:	3101      	adds	r1, #1
 8004ade:	f43f adda 	beq.w	8004696 <_strtod_l+0x47e>
 8004ae2:	f04f 0800 	mov.w	r8, #0
 8004ae6:	4b8b      	ldr	r3, [pc, #556]	; (8004d14 <_strtod_l+0xafc>)
 8004ae8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8004aea:	401a      	ands	r2, r3
 8004aec:	f502 1980 	add.w	r9, r2, #1048576	; 0x100000
 8004af0:	9b05      	ldr	r3, [sp, #20]
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d19a      	bne.n	8004a2c <_strtod_l+0x814>
 8004af6:	e5d9      	b.n	80046ac <_strtod_l+0x494>
 8004af8:	f04f 33ff 	mov.w	r3, #4294967295
 8004afc:	e7e8      	b.n	8004ad0 <_strtod_l+0x8b8>
 8004afe:	4613      	mov	r3, r2
 8004b00:	e7e6      	b.n	8004ad0 <_strtod_l+0x8b8>
 8004b02:	ea53 0308 	orrs.w	r3, r3, r8
 8004b06:	d081      	beq.n	8004a0c <_strtod_l+0x7f4>
 8004b08:	b1e5      	cbz	r5, 8004b44 <_strtod_l+0x92c>
 8004b0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b0c:	421d      	tst	r5, r3
 8004b0e:	d0ef      	beq.n	8004af0 <_strtod_l+0x8d8>
 8004b10:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b12:	4640      	mov	r0, r8
 8004b14:	4649      	mov	r1, r9
 8004b16:	9a05      	ldr	r2, [sp, #20]
 8004b18:	b1c3      	cbz	r3, 8004b4c <_strtod_l+0x934>
 8004b1a:	f7ff fb59 	bl	80041d0 <sulp>
 8004b1e:	4602      	mov	r2, r0
 8004b20:	460b      	mov	r3, r1
 8004b22:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b26:	f7fb fb21 	bl	800016c <__adddf3>
 8004b2a:	4680      	mov	r8, r0
 8004b2c:	4689      	mov	r9, r1
 8004b2e:	e7df      	b.n	8004af0 <_strtod_l+0x8d8>
 8004b30:	4013      	ands	r3, r2
 8004b32:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8004b36:	ea6f 5913 	mvn.w	r9, r3, lsr #20
 8004b3a:	f04f 38ff 	mov.w	r8, #4294967295
 8004b3e:	ea6f 5909 	mvn.w	r9, r9, lsl #20
 8004b42:	e7d5      	b.n	8004af0 <_strtod_l+0x8d8>
 8004b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004b46:	ea13 0f08 	tst.w	r3, r8
 8004b4a:	e7e0      	b.n	8004b0e <_strtod_l+0x8f6>
 8004b4c:	f7ff fb40 	bl	80041d0 <sulp>
 8004b50:	4602      	mov	r2, r0
 8004b52:	460b      	mov	r3, r1
 8004b54:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004b58:	f7fb fb06 	bl	8000168 <__aeabi_dsub>
 8004b5c:	2200      	movs	r2, #0
 8004b5e:	2300      	movs	r3, #0
 8004b60:	4680      	mov	r8, r0
 8004b62:	4689      	mov	r9, r1
 8004b64:	f7fb ff20 	bl	80009a8 <__aeabi_dcmpeq>
 8004b68:	2800      	cmp	r0, #0
 8004b6a:	d0c1      	beq.n	8004af0 <_strtod_l+0x8d8>
 8004b6c:	e608      	b.n	8004780 <_strtod_l+0x568>
 8004b6e:	4658      	mov	r0, fp
 8004b70:	9904      	ldr	r1, [sp, #16]
 8004b72:	f002 f81d 	bl	8006bb0 <__ratio>
 8004b76:	2200      	movs	r2, #0
 8004b78:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004b7c:	4606      	mov	r6, r0
 8004b7e:	460f      	mov	r7, r1
 8004b80:	f7fb ff26 	bl	80009d0 <__aeabi_dcmple>
 8004b84:	2800      	cmp	r0, #0
 8004b86:	d070      	beq.n	8004c6a <_strtod_l+0xa52>
 8004b88:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d042      	beq.n	8004c14 <_strtod_l+0x9fc>
 8004b8e:	2600      	movs	r6, #0
 8004b90:	4f62      	ldr	r7, [pc, #392]	; (8004d1c <_strtod_l+0xb04>)
 8004b92:	4d62      	ldr	r5, [pc, #392]	; (8004d1c <_strtod_l+0xb04>)
 8004b94:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004b96:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004b9a:	0d1b      	lsrs	r3, r3, #20
 8004b9c:	051b      	lsls	r3, r3, #20
 8004b9e:	930f      	str	r3, [sp, #60]	; 0x3c
 8004ba0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ba2:	4b5f      	ldr	r3, [pc, #380]	; (8004d20 <_strtod_l+0xb08>)
 8004ba4:	429a      	cmp	r2, r3
 8004ba6:	f040 80c3 	bne.w	8004d30 <_strtod_l+0xb18>
 8004baa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004bac:	4640      	mov	r0, r8
 8004bae:	f1a3 7954 	sub.w	r9, r3, #55574528	; 0x3500000
 8004bb2:	4649      	mov	r1, r9
 8004bb4:	f001 ff26 	bl	8006a04 <__ulp>
 8004bb8:	4602      	mov	r2, r0
 8004bba:	460b      	mov	r3, r1
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	4639      	mov	r1, r7
 8004bc0:	f7fb fc8a 	bl	80004d8 <__aeabi_dmul>
 8004bc4:	4642      	mov	r2, r8
 8004bc6:	464b      	mov	r3, r9
 8004bc8:	f7fb fad0 	bl	800016c <__adddf3>
 8004bcc:	460b      	mov	r3, r1
 8004bce:	4951      	ldr	r1, [pc, #324]	; (8004d14 <_strtod_l+0xafc>)
 8004bd0:	4a54      	ldr	r2, [pc, #336]	; (8004d24 <_strtod_l+0xb0c>)
 8004bd2:	4019      	ands	r1, r3
 8004bd4:	4291      	cmp	r1, r2
 8004bd6:	4680      	mov	r8, r0
 8004bd8:	d95d      	bls.n	8004c96 <_strtod_l+0xa7e>
 8004bda:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8004bdc:	4b4e      	ldr	r3, [pc, #312]	; (8004d18 <_strtod_l+0xb00>)
 8004bde:	429a      	cmp	r2, r3
 8004be0:	d103      	bne.n	8004bea <_strtod_l+0x9d2>
 8004be2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8004be4:	3301      	adds	r3, #1
 8004be6:	f43f ad56 	beq.w	8004696 <_strtod_l+0x47e>
 8004bea:	f04f 38ff 	mov.w	r8, #4294967295
 8004bee:	f8df 9128 	ldr.w	r9, [pc, #296]	; 8004d18 <_strtod_l+0xb00>
 8004bf2:	4650      	mov	r0, sl
 8004bf4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8004bf6:	f001 fbd5 	bl	80063a4 <_Bfree>
 8004bfa:	4650      	mov	r0, sl
 8004bfc:	9906      	ldr	r1, [sp, #24]
 8004bfe:	f001 fbd1 	bl	80063a4 <_Bfree>
 8004c02:	4650      	mov	r0, sl
 8004c04:	9904      	ldr	r1, [sp, #16]
 8004c06:	f001 fbcd 	bl	80063a4 <_Bfree>
 8004c0a:	4659      	mov	r1, fp
 8004c0c:	4650      	mov	r0, sl
 8004c0e:	f001 fbc9 	bl	80063a4 <_Bfree>
 8004c12:	e627      	b.n	8004864 <_strtod_l+0x64c>
 8004c14:	f1b8 0f00 	cmp.w	r8, #0
 8004c18:	d119      	bne.n	8004c4e <_strtod_l+0xa36>
 8004c1a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c1c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004c20:	b9e3      	cbnz	r3, 8004c5c <_strtod_l+0xa44>
 8004c22:	2200      	movs	r2, #0
 8004c24:	4630      	mov	r0, r6
 8004c26:	4639      	mov	r1, r7
 8004c28:	4b3c      	ldr	r3, [pc, #240]	; (8004d1c <_strtod_l+0xb04>)
 8004c2a:	f7fb fec7 	bl	80009bc <__aeabi_dcmplt>
 8004c2e:	b9c8      	cbnz	r0, 8004c64 <_strtod_l+0xa4c>
 8004c30:	2200      	movs	r2, #0
 8004c32:	4630      	mov	r0, r6
 8004c34:	4639      	mov	r1, r7
 8004c36:	4b3c      	ldr	r3, [pc, #240]	; (8004d28 <_strtod_l+0xb10>)
 8004c38:	f7fb fc4e 	bl	80004d8 <__aeabi_dmul>
 8004c3c:	4604      	mov	r4, r0
 8004c3e:	460d      	mov	r5, r1
 8004c40:	f105 4300 	add.w	r3, r5, #2147483648	; 0x80000000
 8004c44:	9416      	str	r4, [sp, #88]	; 0x58
 8004c46:	9317      	str	r3, [sp, #92]	; 0x5c
 8004c48:	e9dd 6716 	ldrd	r6, r7, [sp, #88]	; 0x58
 8004c4c:	e7a2      	b.n	8004b94 <_strtod_l+0x97c>
 8004c4e:	f1b8 0f01 	cmp.w	r8, #1
 8004c52:	d103      	bne.n	8004c5c <_strtod_l+0xa44>
 8004c54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	f43f ad92 	beq.w	8004780 <_strtod_l+0x568>
 8004c5c:	2600      	movs	r6, #0
 8004c5e:	2400      	movs	r4, #0
 8004c60:	4f32      	ldr	r7, [pc, #200]	; (8004d2c <_strtod_l+0xb14>)
 8004c62:	e796      	b.n	8004b92 <_strtod_l+0x97a>
 8004c64:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8004c66:	4d30      	ldr	r5, [pc, #192]	; (8004d28 <_strtod_l+0xb10>)
 8004c68:	e7ea      	b.n	8004c40 <_strtod_l+0xa28>
 8004c6a:	4b2f      	ldr	r3, [pc, #188]	; (8004d28 <_strtod_l+0xb10>)
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	4630      	mov	r0, r6
 8004c70:	4639      	mov	r1, r7
 8004c72:	f7fb fc31 	bl	80004d8 <__aeabi_dmul>
 8004c76:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004c78:	4604      	mov	r4, r0
 8004c7a:	460d      	mov	r5, r1
 8004c7c:	b933      	cbnz	r3, 8004c8c <_strtod_l+0xa74>
 8004c7e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004c82:	9010      	str	r0, [sp, #64]	; 0x40
 8004c84:	9311      	str	r3, [sp, #68]	; 0x44
 8004c86:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8004c8a:	e783      	b.n	8004b94 <_strtod_l+0x97c>
 8004c8c:	4602      	mov	r2, r0
 8004c8e:	460b      	mov	r3, r1
 8004c90:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
 8004c94:	e7f7      	b.n	8004c86 <_strtod_l+0xa6e>
 8004c96:	f103 7954 	add.w	r9, r3, #55574528	; 0x3500000
 8004c9a:	9b05      	ldr	r3, [sp, #20]
 8004c9c:	2b00      	cmp	r3, #0
 8004c9e:	d1a8      	bne.n	8004bf2 <_strtod_l+0x9da>
 8004ca0:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8004ca4:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004ca6:	0d1b      	lsrs	r3, r3, #20
 8004ca8:	051b      	lsls	r3, r3, #20
 8004caa:	429a      	cmp	r2, r3
 8004cac:	d1a1      	bne.n	8004bf2 <_strtod_l+0x9da>
 8004cae:	4620      	mov	r0, r4
 8004cb0:	4629      	mov	r1, r5
 8004cb2:	f7fc f867 	bl	8000d84 <__aeabi_d2lz>
 8004cb6:	f7fb fbe1 	bl	800047c <__aeabi_l2d>
 8004cba:	4602      	mov	r2, r0
 8004cbc:	460b      	mov	r3, r1
 8004cbe:	4620      	mov	r0, r4
 8004cc0:	4629      	mov	r1, r5
 8004cc2:	f7fb fa51 	bl	8000168 <__aeabi_dsub>
 8004cc6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8004cc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004ccc:	ea43 0308 	orr.w	r3, r3, r8
 8004cd0:	4313      	orrs	r3, r2
 8004cd2:	4604      	mov	r4, r0
 8004cd4:	460d      	mov	r5, r1
 8004cd6:	d066      	beq.n	8004da6 <_strtod_l+0xb8e>
 8004cd8:	a309      	add	r3, pc, #36	; (adr r3, 8004d00 <_strtod_l+0xae8>)
 8004cda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cde:	f7fb fe6d 	bl	80009bc <__aeabi_dcmplt>
 8004ce2:	2800      	cmp	r0, #0
 8004ce4:	f47f ace2 	bne.w	80046ac <_strtod_l+0x494>
 8004ce8:	a307      	add	r3, pc, #28	; (adr r3, 8004d08 <_strtod_l+0xaf0>)
 8004cea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cee:	4620      	mov	r0, r4
 8004cf0:	4629      	mov	r1, r5
 8004cf2:	f7fb fe81 	bl	80009f8 <__aeabi_dcmpgt>
 8004cf6:	2800      	cmp	r0, #0
 8004cf8:	f43f af7b 	beq.w	8004bf2 <_strtod_l+0x9da>
 8004cfc:	e4d6      	b.n	80046ac <_strtod_l+0x494>
 8004cfe:	bf00      	nop
 8004d00:	94a03595 	.word	0x94a03595
 8004d04:	3fdfffff 	.word	0x3fdfffff
 8004d08:	35afe535 	.word	0x35afe535
 8004d0c:	3fe00000 	.word	0x3fe00000
 8004d10:	000fffff 	.word	0x000fffff
 8004d14:	7ff00000 	.word	0x7ff00000
 8004d18:	7fefffff 	.word	0x7fefffff
 8004d1c:	3ff00000 	.word	0x3ff00000
 8004d20:	7fe00000 	.word	0x7fe00000
 8004d24:	7c9fffff 	.word	0x7c9fffff
 8004d28:	3fe00000 	.word	0x3fe00000
 8004d2c:	bff00000 	.word	0xbff00000
 8004d30:	9b05      	ldr	r3, [sp, #20]
 8004d32:	b313      	cbz	r3, 8004d7a <_strtod_l+0xb62>
 8004d34:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004d36:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8004d3a:	d81e      	bhi.n	8004d7a <_strtod_l+0xb62>
 8004d3c:	a326      	add	r3, pc, #152	; (adr r3, 8004dd8 <_strtod_l+0xbc0>)
 8004d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d42:	4620      	mov	r0, r4
 8004d44:	4629      	mov	r1, r5
 8004d46:	f7fb fe43 	bl	80009d0 <__aeabi_dcmple>
 8004d4a:	b190      	cbz	r0, 8004d72 <_strtod_l+0xb5a>
 8004d4c:	4629      	mov	r1, r5
 8004d4e:	4620      	mov	r0, r4
 8004d50:	f7fb fe9a 	bl	8000a88 <__aeabi_d2uiz>
 8004d54:	2801      	cmp	r0, #1
 8004d56:	bf38      	it	cc
 8004d58:	2001      	movcc	r0, #1
 8004d5a:	f7fb fb43 	bl	80003e4 <__aeabi_ui2d>
 8004d5e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8004d60:	4604      	mov	r4, r0
 8004d62:	460d      	mov	r5, r1
 8004d64:	b9d3      	cbnz	r3, 8004d9c <_strtod_l+0xb84>
 8004d66:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8004d6a:	9012      	str	r0, [sp, #72]	; 0x48
 8004d6c:	9313      	str	r3, [sp, #76]	; 0x4c
 8004d6e:	e9dd 6712 	ldrd	r6, r7, [sp, #72]	; 0x48
 8004d72:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8004d74:	f107 63d6 	add.w	r3, r7, #112197632	; 0x6b00000
 8004d78:	1a9f      	subs	r7, r3, r2
 8004d7a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004d7e:	f001 fe41 	bl	8006a04 <__ulp>
 8004d82:	4602      	mov	r2, r0
 8004d84:	460b      	mov	r3, r1
 8004d86:	4630      	mov	r0, r6
 8004d88:	4639      	mov	r1, r7
 8004d8a:	f7fb fba5 	bl	80004d8 <__aeabi_dmul>
 8004d8e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004d92:	f7fb f9eb 	bl	800016c <__adddf3>
 8004d96:	4680      	mov	r8, r0
 8004d98:	4689      	mov	r9, r1
 8004d9a:	e77e      	b.n	8004c9a <_strtod_l+0xa82>
 8004d9c:	4602      	mov	r2, r0
 8004d9e:	460b      	mov	r3, r1
 8004da0:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
 8004da4:	e7e3      	b.n	8004d6e <_strtod_l+0xb56>
 8004da6:	a30e      	add	r3, pc, #56	; (adr r3, 8004de0 <_strtod_l+0xbc8>)
 8004da8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dac:	f7fb fe06 	bl	80009bc <__aeabi_dcmplt>
 8004db0:	e7a1      	b.n	8004cf6 <_strtod_l+0xade>
 8004db2:	2300      	movs	r3, #0
 8004db4:	930a      	str	r3, [sp, #40]	; 0x28
 8004db6:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8004db8:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004dba:	6013      	str	r3, [r2, #0]
 8004dbc:	f7ff ba71 	b.w	80042a2 <_strtod_l+0x8a>
 8004dc0:	2a65      	cmp	r2, #101	; 0x65
 8004dc2:	f43f ab63 	beq.w	800448c <_strtod_l+0x274>
 8004dc6:	2a45      	cmp	r2, #69	; 0x45
 8004dc8:	f43f ab60 	beq.w	800448c <_strtod_l+0x274>
 8004dcc:	2301      	movs	r3, #1
 8004dce:	f7ff bb95 	b.w	80044fc <_strtod_l+0x2e4>
 8004dd2:	bf00      	nop
 8004dd4:	f3af 8000 	nop.w
 8004dd8:	ffc00000 	.word	0xffc00000
 8004ddc:	41dfffff 	.word	0x41dfffff
 8004de0:	94a03595 	.word	0x94a03595
 8004de4:	3fcfffff 	.word	0x3fcfffff

08004de8 <_strtod_r>:
 8004de8:	4b01      	ldr	r3, [pc, #4]	; (8004df0 <_strtod_r+0x8>)
 8004dea:	f7ff ba15 	b.w	8004218 <_strtod_l>
 8004dee:	bf00      	nop
 8004df0:	20000074 	.word	0x20000074

08004df4 <_strtol_l.constprop.0>:
 8004df4:	2b01      	cmp	r3, #1
 8004df6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004dfa:	4680      	mov	r8, r0
 8004dfc:	d001      	beq.n	8004e02 <_strtol_l.constprop.0+0xe>
 8004dfe:	2b24      	cmp	r3, #36	; 0x24
 8004e00:	d906      	bls.n	8004e10 <_strtol_l.constprop.0+0x1c>
 8004e02:	f7fe fb21 	bl	8003448 <__errno>
 8004e06:	2316      	movs	r3, #22
 8004e08:	6003      	str	r3, [r0, #0]
 8004e0a:	2000      	movs	r0, #0
 8004e0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004e10:	460d      	mov	r5, r1
 8004e12:	4f35      	ldr	r7, [pc, #212]	; (8004ee8 <_strtol_l.constprop.0+0xf4>)
 8004e14:	4628      	mov	r0, r5
 8004e16:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e1a:	5de6      	ldrb	r6, [r4, r7]
 8004e1c:	f016 0608 	ands.w	r6, r6, #8
 8004e20:	d1f8      	bne.n	8004e14 <_strtol_l.constprop.0+0x20>
 8004e22:	2c2d      	cmp	r4, #45	; 0x2d
 8004e24:	d12f      	bne.n	8004e86 <_strtol_l.constprop.0+0x92>
 8004e26:	2601      	movs	r6, #1
 8004e28:	782c      	ldrb	r4, [r5, #0]
 8004e2a:	1c85      	adds	r5, r0, #2
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d057      	beq.n	8004ee0 <_strtol_l.constprop.0+0xec>
 8004e30:	2b10      	cmp	r3, #16
 8004e32:	d109      	bne.n	8004e48 <_strtol_l.constprop.0+0x54>
 8004e34:	2c30      	cmp	r4, #48	; 0x30
 8004e36:	d107      	bne.n	8004e48 <_strtol_l.constprop.0+0x54>
 8004e38:	7828      	ldrb	r0, [r5, #0]
 8004e3a:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8004e3e:	2858      	cmp	r0, #88	; 0x58
 8004e40:	d149      	bne.n	8004ed6 <_strtol_l.constprop.0+0xe2>
 8004e42:	2310      	movs	r3, #16
 8004e44:	786c      	ldrb	r4, [r5, #1]
 8004e46:	3502      	adds	r5, #2
 8004e48:	2700      	movs	r7, #0
 8004e4a:	f106 4e00 	add.w	lr, r6, #2147483648	; 0x80000000
 8004e4e:	f10e 3eff 	add.w	lr, lr, #4294967295
 8004e52:	fbbe f9f3 	udiv	r9, lr, r3
 8004e56:	4638      	mov	r0, r7
 8004e58:	fb03 ea19 	mls	sl, r3, r9, lr
 8004e5c:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8004e60:	f1bc 0f09 	cmp.w	ip, #9
 8004e64:	d814      	bhi.n	8004e90 <_strtol_l.constprop.0+0x9c>
 8004e66:	4664      	mov	r4, ip
 8004e68:	42a3      	cmp	r3, r4
 8004e6a:	dd22      	ble.n	8004eb2 <_strtol_l.constprop.0+0xbe>
 8004e6c:	2f00      	cmp	r7, #0
 8004e6e:	db1d      	blt.n	8004eac <_strtol_l.constprop.0+0xb8>
 8004e70:	4581      	cmp	r9, r0
 8004e72:	d31b      	bcc.n	8004eac <_strtol_l.constprop.0+0xb8>
 8004e74:	d101      	bne.n	8004e7a <_strtol_l.constprop.0+0x86>
 8004e76:	45a2      	cmp	sl, r4
 8004e78:	db18      	blt.n	8004eac <_strtol_l.constprop.0+0xb8>
 8004e7a:	2701      	movs	r7, #1
 8004e7c:	fb00 4003 	mla	r0, r0, r3, r4
 8004e80:	f815 4b01 	ldrb.w	r4, [r5], #1
 8004e84:	e7ea      	b.n	8004e5c <_strtol_l.constprop.0+0x68>
 8004e86:	2c2b      	cmp	r4, #43	; 0x2b
 8004e88:	bf04      	itt	eq
 8004e8a:	782c      	ldrbeq	r4, [r5, #0]
 8004e8c:	1c85      	addeq	r5, r0, #2
 8004e8e:	e7cd      	b.n	8004e2c <_strtol_l.constprop.0+0x38>
 8004e90:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8004e94:	f1bc 0f19 	cmp.w	ip, #25
 8004e98:	d801      	bhi.n	8004e9e <_strtol_l.constprop.0+0xaa>
 8004e9a:	3c37      	subs	r4, #55	; 0x37
 8004e9c:	e7e4      	b.n	8004e68 <_strtol_l.constprop.0+0x74>
 8004e9e:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8004ea2:	f1bc 0f19 	cmp.w	ip, #25
 8004ea6:	d804      	bhi.n	8004eb2 <_strtol_l.constprop.0+0xbe>
 8004ea8:	3c57      	subs	r4, #87	; 0x57
 8004eaa:	e7dd      	b.n	8004e68 <_strtol_l.constprop.0+0x74>
 8004eac:	f04f 37ff 	mov.w	r7, #4294967295
 8004eb0:	e7e6      	b.n	8004e80 <_strtol_l.constprop.0+0x8c>
 8004eb2:	2f00      	cmp	r7, #0
 8004eb4:	da07      	bge.n	8004ec6 <_strtol_l.constprop.0+0xd2>
 8004eb6:	2322      	movs	r3, #34	; 0x22
 8004eb8:	4670      	mov	r0, lr
 8004eba:	f8c8 3000 	str.w	r3, [r8]
 8004ebe:	2a00      	cmp	r2, #0
 8004ec0:	d0a4      	beq.n	8004e0c <_strtol_l.constprop.0+0x18>
 8004ec2:	1e69      	subs	r1, r5, #1
 8004ec4:	e005      	b.n	8004ed2 <_strtol_l.constprop.0+0xde>
 8004ec6:	b106      	cbz	r6, 8004eca <_strtol_l.constprop.0+0xd6>
 8004ec8:	4240      	negs	r0, r0
 8004eca:	2a00      	cmp	r2, #0
 8004ecc:	d09e      	beq.n	8004e0c <_strtol_l.constprop.0+0x18>
 8004ece:	2f00      	cmp	r7, #0
 8004ed0:	d1f7      	bne.n	8004ec2 <_strtol_l.constprop.0+0xce>
 8004ed2:	6011      	str	r1, [r2, #0]
 8004ed4:	e79a      	b.n	8004e0c <_strtol_l.constprop.0+0x18>
 8004ed6:	2430      	movs	r4, #48	; 0x30
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1b5      	bne.n	8004e48 <_strtol_l.constprop.0+0x54>
 8004edc:	2308      	movs	r3, #8
 8004ede:	e7b3      	b.n	8004e48 <_strtol_l.constprop.0+0x54>
 8004ee0:	2c30      	cmp	r4, #48	; 0x30
 8004ee2:	d0a9      	beq.n	8004e38 <_strtol_l.constprop.0+0x44>
 8004ee4:	230a      	movs	r3, #10
 8004ee6:	e7af      	b.n	8004e48 <_strtol_l.constprop.0+0x54>
 8004ee8:	08007e11 	.word	0x08007e11

08004eec <_strtol_r>:
 8004eec:	f7ff bf82 	b.w	8004df4 <_strtol_l.constprop.0>

08004ef0 <quorem>:
 8004ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ef4:	6903      	ldr	r3, [r0, #16]
 8004ef6:	690c      	ldr	r4, [r1, #16]
 8004ef8:	4607      	mov	r7, r0
 8004efa:	42a3      	cmp	r3, r4
 8004efc:	f2c0 8082 	blt.w	8005004 <quorem+0x114>
 8004f00:	3c01      	subs	r4, #1
 8004f02:	f100 0514 	add.w	r5, r0, #20
 8004f06:	f101 0814 	add.w	r8, r1, #20
 8004f0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004f0e:	9301      	str	r3, [sp, #4]
 8004f10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004f14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004f18:	3301      	adds	r3, #1
 8004f1a:	429a      	cmp	r2, r3
 8004f1c:	fbb2 f6f3 	udiv	r6, r2, r3
 8004f20:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004f24:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004f28:	d331      	bcc.n	8004f8e <quorem+0x9e>
 8004f2a:	f04f 0e00 	mov.w	lr, #0
 8004f2e:	4640      	mov	r0, r8
 8004f30:	46ac      	mov	ip, r5
 8004f32:	46f2      	mov	sl, lr
 8004f34:	f850 2b04 	ldr.w	r2, [r0], #4
 8004f38:	b293      	uxth	r3, r2
 8004f3a:	fb06 e303 	mla	r3, r6, r3, lr
 8004f3e:	0c12      	lsrs	r2, r2, #16
 8004f40:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	fb06 e202 	mla	r2, r6, r2, lr
 8004f4a:	ebaa 0303 	sub.w	r3, sl, r3
 8004f4e:	f8dc a000 	ldr.w	sl, [ip]
 8004f52:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004f56:	fa1f fa8a 	uxth.w	sl, sl
 8004f5a:	4453      	add	r3, sl
 8004f5c:	f8dc a000 	ldr.w	sl, [ip]
 8004f60:	b292      	uxth	r2, r2
 8004f62:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8004f66:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004f6a:	b29b      	uxth	r3, r3
 8004f6c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004f70:	4581      	cmp	r9, r0
 8004f72:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004f76:	f84c 3b04 	str.w	r3, [ip], #4
 8004f7a:	d2db      	bcs.n	8004f34 <quorem+0x44>
 8004f7c:	f855 300b 	ldr.w	r3, [r5, fp]
 8004f80:	b92b      	cbnz	r3, 8004f8e <quorem+0x9e>
 8004f82:	9b01      	ldr	r3, [sp, #4]
 8004f84:	3b04      	subs	r3, #4
 8004f86:	429d      	cmp	r5, r3
 8004f88:	461a      	mov	r2, r3
 8004f8a:	d32f      	bcc.n	8004fec <quorem+0xfc>
 8004f8c:	613c      	str	r4, [r7, #16]
 8004f8e:	4638      	mov	r0, r7
 8004f90:	f001 fc90 	bl	80068b4 <__mcmp>
 8004f94:	2800      	cmp	r0, #0
 8004f96:	db25      	blt.n	8004fe4 <quorem+0xf4>
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f04f 0c00 	mov.w	ip, #0
 8004f9e:	3601      	adds	r6, #1
 8004fa0:	f858 1b04 	ldr.w	r1, [r8], #4
 8004fa4:	f8d0 e000 	ldr.w	lr, [r0]
 8004fa8:	b28b      	uxth	r3, r1
 8004faa:	ebac 0303 	sub.w	r3, ip, r3
 8004fae:	fa1f f28e 	uxth.w	r2, lr
 8004fb2:	4413      	add	r3, r2
 8004fb4:	0c0a      	lsrs	r2, r1, #16
 8004fb6:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004fba:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004fbe:	b29b      	uxth	r3, r3
 8004fc0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004fc4:	45c1      	cmp	r9, r8
 8004fc6:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004fca:	f840 3b04 	str.w	r3, [r0], #4
 8004fce:	d2e7      	bcs.n	8004fa0 <quorem+0xb0>
 8004fd0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004fd4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004fd8:	b922      	cbnz	r2, 8004fe4 <quorem+0xf4>
 8004fda:	3b04      	subs	r3, #4
 8004fdc:	429d      	cmp	r5, r3
 8004fde:	461a      	mov	r2, r3
 8004fe0:	d30a      	bcc.n	8004ff8 <quorem+0x108>
 8004fe2:	613c      	str	r4, [r7, #16]
 8004fe4:	4630      	mov	r0, r6
 8004fe6:	b003      	add	sp, #12
 8004fe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fec:	6812      	ldr	r2, [r2, #0]
 8004fee:	3b04      	subs	r3, #4
 8004ff0:	2a00      	cmp	r2, #0
 8004ff2:	d1cb      	bne.n	8004f8c <quorem+0x9c>
 8004ff4:	3c01      	subs	r4, #1
 8004ff6:	e7c6      	b.n	8004f86 <quorem+0x96>
 8004ff8:	6812      	ldr	r2, [r2, #0]
 8004ffa:	3b04      	subs	r3, #4
 8004ffc:	2a00      	cmp	r2, #0
 8004ffe:	d1f0      	bne.n	8004fe2 <quorem+0xf2>
 8005000:	3c01      	subs	r4, #1
 8005002:	e7eb      	b.n	8004fdc <quorem+0xec>
 8005004:	2000      	movs	r0, #0
 8005006:	e7ee      	b.n	8004fe6 <quorem+0xf6>

08005008 <_dtoa_r>:
 8005008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800500c:	4616      	mov	r6, r2
 800500e:	461f      	mov	r7, r3
 8005010:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005012:	b099      	sub	sp, #100	; 0x64
 8005014:	4605      	mov	r5, r0
 8005016:	e9cd 6704 	strd	r6, r7, [sp, #16]
 800501a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 800501e:	b974      	cbnz	r4, 800503e <_dtoa_r+0x36>
 8005020:	2010      	movs	r0, #16
 8005022:	f001 f949 	bl	80062b8 <malloc>
 8005026:	4602      	mov	r2, r0
 8005028:	6268      	str	r0, [r5, #36]	; 0x24
 800502a:	b920      	cbnz	r0, 8005036 <_dtoa_r+0x2e>
 800502c:	21ea      	movs	r1, #234	; 0xea
 800502e:	4ba8      	ldr	r3, [pc, #672]	; (80052d0 <_dtoa_r+0x2c8>)
 8005030:	48a8      	ldr	r0, [pc, #672]	; (80052d4 <_dtoa_r+0x2cc>)
 8005032:	f002 f8b3 	bl	800719c <__assert_func>
 8005036:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800503a:	6004      	str	r4, [r0, #0]
 800503c:	60c4      	str	r4, [r0, #12]
 800503e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005040:	6819      	ldr	r1, [r3, #0]
 8005042:	b151      	cbz	r1, 800505a <_dtoa_r+0x52>
 8005044:	685a      	ldr	r2, [r3, #4]
 8005046:	2301      	movs	r3, #1
 8005048:	4093      	lsls	r3, r2
 800504a:	604a      	str	r2, [r1, #4]
 800504c:	608b      	str	r3, [r1, #8]
 800504e:	4628      	mov	r0, r5
 8005050:	f001 f9a8 	bl	80063a4 <_Bfree>
 8005054:	2200      	movs	r2, #0
 8005056:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005058:	601a      	str	r2, [r3, #0]
 800505a:	1e3b      	subs	r3, r7, #0
 800505c:	bfaf      	iteee	ge
 800505e:	2300      	movge	r3, #0
 8005060:	2201      	movlt	r2, #1
 8005062:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005066:	9305      	strlt	r3, [sp, #20]
 8005068:	bfa8      	it	ge
 800506a:	f8c8 3000 	strge.w	r3, [r8]
 800506e:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005072:	4b99      	ldr	r3, [pc, #612]	; (80052d8 <_dtoa_r+0x2d0>)
 8005074:	bfb8      	it	lt
 8005076:	f8c8 2000 	strlt.w	r2, [r8]
 800507a:	ea33 0309 	bics.w	r3, r3, r9
 800507e:	d119      	bne.n	80050b4 <_dtoa_r+0xac>
 8005080:	f242 730f 	movw	r3, #9999	; 0x270f
 8005084:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005086:	6013      	str	r3, [r2, #0]
 8005088:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800508c:	4333      	orrs	r3, r6
 800508e:	f000 857f 	beq.w	8005b90 <_dtoa_r+0xb88>
 8005092:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005094:	b953      	cbnz	r3, 80050ac <_dtoa_r+0xa4>
 8005096:	4b91      	ldr	r3, [pc, #580]	; (80052dc <_dtoa_r+0x2d4>)
 8005098:	e022      	b.n	80050e0 <_dtoa_r+0xd8>
 800509a:	4b91      	ldr	r3, [pc, #580]	; (80052e0 <_dtoa_r+0x2d8>)
 800509c:	9303      	str	r3, [sp, #12]
 800509e:	3308      	adds	r3, #8
 80050a0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80050a2:	6013      	str	r3, [r2, #0]
 80050a4:	9803      	ldr	r0, [sp, #12]
 80050a6:	b019      	add	sp, #100	; 0x64
 80050a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050ac:	4b8b      	ldr	r3, [pc, #556]	; (80052dc <_dtoa_r+0x2d4>)
 80050ae:	9303      	str	r3, [sp, #12]
 80050b0:	3303      	adds	r3, #3
 80050b2:	e7f5      	b.n	80050a0 <_dtoa_r+0x98>
 80050b4:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80050b8:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80050bc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050c0:	2200      	movs	r2, #0
 80050c2:	2300      	movs	r3, #0
 80050c4:	f7fb fc70 	bl	80009a8 <__aeabi_dcmpeq>
 80050c8:	4680      	mov	r8, r0
 80050ca:	b158      	cbz	r0, 80050e4 <_dtoa_r+0xdc>
 80050cc:	2301      	movs	r3, #1
 80050ce:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80050d0:	6013      	str	r3, [r2, #0]
 80050d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	f000 8558 	beq.w	8005b8a <_dtoa_r+0xb82>
 80050da:	4882      	ldr	r0, [pc, #520]	; (80052e4 <_dtoa_r+0x2dc>)
 80050dc:	6018      	str	r0, [r3, #0]
 80050de:	1e43      	subs	r3, r0, #1
 80050e0:	9303      	str	r3, [sp, #12]
 80050e2:	e7df      	b.n	80050a4 <_dtoa_r+0x9c>
 80050e4:	ab16      	add	r3, sp, #88	; 0x58
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	ab17      	add	r3, sp, #92	; 0x5c
 80050ea:	9300      	str	r3, [sp, #0]
 80050ec:	4628      	mov	r0, r5
 80050ee:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80050f2:	f001 fd01 	bl	8006af8 <__d2b>
 80050f6:	f3c9 540a 	ubfx	r4, r9, #20, #11
 80050fa:	4683      	mov	fp, r0
 80050fc:	2c00      	cmp	r4, #0
 80050fe:	d07f      	beq.n	8005200 <_dtoa_r+0x1f8>
 8005100:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005106:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800510a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800510e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005112:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005116:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 800511a:	2200      	movs	r2, #0
 800511c:	4b72      	ldr	r3, [pc, #456]	; (80052e8 <_dtoa_r+0x2e0>)
 800511e:	f7fb f823 	bl	8000168 <__aeabi_dsub>
 8005122:	a365      	add	r3, pc, #404	; (adr r3, 80052b8 <_dtoa_r+0x2b0>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f7fb f9d6 	bl	80004d8 <__aeabi_dmul>
 800512c:	a364      	add	r3, pc, #400	; (adr r3, 80052c0 <_dtoa_r+0x2b8>)
 800512e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005132:	f7fb f81b 	bl	800016c <__adddf3>
 8005136:	4606      	mov	r6, r0
 8005138:	4620      	mov	r0, r4
 800513a:	460f      	mov	r7, r1
 800513c:	f7fb f962 	bl	8000404 <__aeabi_i2d>
 8005140:	a361      	add	r3, pc, #388	; (adr r3, 80052c8 <_dtoa_r+0x2c0>)
 8005142:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005146:	f7fb f9c7 	bl	80004d8 <__aeabi_dmul>
 800514a:	4602      	mov	r2, r0
 800514c:	460b      	mov	r3, r1
 800514e:	4630      	mov	r0, r6
 8005150:	4639      	mov	r1, r7
 8005152:	f7fb f80b 	bl	800016c <__adddf3>
 8005156:	4606      	mov	r6, r0
 8005158:	460f      	mov	r7, r1
 800515a:	f7fb fc6d 	bl	8000a38 <__aeabi_d2iz>
 800515e:	2200      	movs	r2, #0
 8005160:	4682      	mov	sl, r0
 8005162:	2300      	movs	r3, #0
 8005164:	4630      	mov	r0, r6
 8005166:	4639      	mov	r1, r7
 8005168:	f7fb fc28 	bl	80009bc <__aeabi_dcmplt>
 800516c:	b148      	cbz	r0, 8005182 <_dtoa_r+0x17a>
 800516e:	4650      	mov	r0, sl
 8005170:	f7fb f948 	bl	8000404 <__aeabi_i2d>
 8005174:	4632      	mov	r2, r6
 8005176:	463b      	mov	r3, r7
 8005178:	f7fb fc16 	bl	80009a8 <__aeabi_dcmpeq>
 800517c:	b908      	cbnz	r0, 8005182 <_dtoa_r+0x17a>
 800517e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005182:	f1ba 0f16 	cmp.w	sl, #22
 8005186:	d858      	bhi.n	800523a <_dtoa_r+0x232>
 8005188:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800518c:	4b57      	ldr	r3, [pc, #348]	; (80052ec <_dtoa_r+0x2e4>)
 800518e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8005192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005196:	f7fb fc11 	bl	80009bc <__aeabi_dcmplt>
 800519a:	2800      	cmp	r0, #0
 800519c:	d04f      	beq.n	800523e <_dtoa_r+0x236>
 800519e:	2300      	movs	r3, #0
 80051a0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80051a4:	930f      	str	r3, [sp, #60]	; 0x3c
 80051a6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80051a8:	1b1c      	subs	r4, r3, r4
 80051aa:	1e63      	subs	r3, r4, #1
 80051ac:	9309      	str	r3, [sp, #36]	; 0x24
 80051ae:	bf49      	itett	mi
 80051b0:	f1c4 0301 	rsbmi	r3, r4, #1
 80051b4:	2300      	movpl	r3, #0
 80051b6:	9306      	strmi	r3, [sp, #24]
 80051b8:	2300      	movmi	r3, #0
 80051ba:	bf54      	ite	pl
 80051bc:	9306      	strpl	r3, [sp, #24]
 80051be:	9309      	strmi	r3, [sp, #36]	; 0x24
 80051c0:	f1ba 0f00 	cmp.w	sl, #0
 80051c4:	db3d      	blt.n	8005242 <_dtoa_r+0x23a>
 80051c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80051c8:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 80051cc:	4453      	add	r3, sl
 80051ce:	9309      	str	r3, [sp, #36]	; 0x24
 80051d0:	2300      	movs	r3, #0
 80051d2:	930a      	str	r3, [sp, #40]	; 0x28
 80051d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051d6:	2b09      	cmp	r3, #9
 80051d8:	f200 808c 	bhi.w	80052f4 <_dtoa_r+0x2ec>
 80051dc:	2b05      	cmp	r3, #5
 80051de:	bfc4      	itt	gt
 80051e0:	3b04      	subgt	r3, #4
 80051e2:	9322      	strgt	r3, [sp, #136]	; 0x88
 80051e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80051e6:	bfc8      	it	gt
 80051e8:	2400      	movgt	r4, #0
 80051ea:	f1a3 0302 	sub.w	r3, r3, #2
 80051ee:	bfd8      	it	le
 80051f0:	2401      	movle	r4, #1
 80051f2:	2b03      	cmp	r3, #3
 80051f4:	f200 808a 	bhi.w	800530c <_dtoa_r+0x304>
 80051f8:	e8df f003 	tbb	[pc, r3]
 80051fc:	5b4d4f2d 	.word	0x5b4d4f2d
 8005200:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005204:	441c      	add	r4, r3
 8005206:	f204 4332 	addw	r3, r4, #1074	; 0x432
 800520a:	2b20      	cmp	r3, #32
 800520c:	bfc3      	ittte	gt
 800520e:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005212:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005216:	fa09 f303 	lslgt.w	r3, r9, r3
 800521a:	f1c3 0320 	rsble	r3, r3, #32
 800521e:	bfc6      	itte	gt
 8005220:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005224:	4318      	orrgt	r0, r3
 8005226:	fa06 f003 	lslle.w	r0, r6, r3
 800522a:	f7fb f8db 	bl	80003e4 <__aeabi_ui2d>
 800522e:	2301      	movs	r3, #1
 8005230:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005234:	3c01      	subs	r4, #1
 8005236:	9313      	str	r3, [sp, #76]	; 0x4c
 8005238:	e76f      	b.n	800511a <_dtoa_r+0x112>
 800523a:	2301      	movs	r3, #1
 800523c:	e7b2      	b.n	80051a4 <_dtoa_r+0x19c>
 800523e:	900f      	str	r0, [sp, #60]	; 0x3c
 8005240:	e7b1      	b.n	80051a6 <_dtoa_r+0x19e>
 8005242:	9b06      	ldr	r3, [sp, #24]
 8005244:	eba3 030a 	sub.w	r3, r3, sl
 8005248:	9306      	str	r3, [sp, #24]
 800524a:	f1ca 0300 	rsb	r3, sl, #0
 800524e:	930a      	str	r3, [sp, #40]	; 0x28
 8005250:	2300      	movs	r3, #0
 8005252:	930e      	str	r3, [sp, #56]	; 0x38
 8005254:	e7be      	b.n	80051d4 <_dtoa_r+0x1cc>
 8005256:	2300      	movs	r3, #0
 8005258:	930b      	str	r3, [sp, #44]	; 0x2c
 800525a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800525c:	2b00      	cmp	r3, #0
 800525e:	dc58      	bgt.n	8005312 <_dtoa_r+0x30a>
 8005260:	f04f 0901 	mov.w	r9, #1
 8005264:	464b      	mov	r3, r9
 8005266:	f8cd 9020 	str.w	r9, [sp, #32]
 800526a:	f8cd 908c 	str.w	r9, [sp, #140]	; 0x8c
 800526e:	2200      	movs	r2, #0
 8005270:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005272:	6042      	str	r2, [r0, #4]
 8005274:	2204      	movs	r2, #4
 8005276:	f102 0614 	add.w	r6, r2, #20
 800527a:	429e      	cmp	r6, r3
 800527c:	6841      	ldr	r1, [r0, #4]
 800527e:	d94e      	bls.n	800531e <_dtoa_r+0x316>
 8005280:	4628      	mov	r0, r5
 8005282:	f001 f84f 	bl	8006324 <_Balloc>
 8005286:	9003      	str	r0, [sp, #12]
 8005288:	2800      	cmp	r0, #0
 800528a:	d14c      	bne.n	8005326 <_dtoa_r+0x31e>
 800528c:	4602      	mov	r2, r0
 800528e:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005292:	4b17      	ldr	r3, [pc, #92]	; (80052f0 <_dtoa_r+0x2e8>)
 8005294:	e6cc      	b.n	8005030 <_dtoa_r+0x28>
 8005296:	2301      	movs	r3, #1
 8005298:	e7de      	b.n	8005258 <_dtoa_r+0x250>
 800529a:	2300      	movs	r3, #0
 800529c:	930b      	str	r3, [sp, #44]	; 0x2c
 800529e:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80052a0:	eb0a 0903 	add.w	r9, sl, r3
 80052a4:	f109 0301 	add.w	r3, r9, #1
 80052a8:	2b01      	cmp	r3, #1
 80052aa:	9308      	str	r3, [sp, #32]
 80052ac:	bfb8      	it	lt
 80052ae:	2301      	movlt	r3, #1
 80052b0:	e7dd      	b.n	800526e <_dtoa_r+0x266>
 80052b2:	2301      	movs	r3, #1
 80052b4:	e7f2      	b.n	800529c <_dtoa_r+0x294>
 80052b6:	bf00      	nop
 80052b8:	636f4361 	.word	0x636f4361
 80052bc:	3fd287a7 	.word	0x3fd287a7
 80052c0:	8b60c8b3 	.word	0x8b60c8b3
 80052c4:	3fc68a28 	.word	0x3fc68a28
 80052c8:	509f79fb 	.word	0x509f79fb
 80052cc:	3fd34413 	.word	0x3fd34413
 80052d0:	08007f1e 	.word	0x08007f1e
 80052d4:	08007f35 	.word	0x08007f35
 80052d8:	7ff00000 	.word	0x7ff00000
 80052dc:	08007f1a 	.word	0x08007f1a
 80052e0:	08007f11 	.word	0x08007f11
 80052e4:	08007d95 	.word	0x08007d95
 80052e8:	3ff80000 	.word	0x3ff80000
 80052ec:	080080a0 	.word	0x080080a0
 80052f0:	08007f90 	.word	0x08007f90
 80052f4:	2401      	movs	r4, #1
 80052f6:	2300      	movs	r3, #0
 80052f8:	940b      	str	r4, [sp, #44]	; 0x2c
 80052fa:	9322      	str	r3, [sp, #136]	; 0x88
 80052fc:	f04f 39ff 	mov.w	r9, #4294967295
 8005300:	2200      	movs	r2, #0
 8005302:	2312      	movs	r3, #18
 8005304:	f8cd 9020 	str.w	r9, [sp, #32]
 8005308:	9223      	str	r2, [sp, #140]	; 0x8c
 800530a:	e7b0      	b.n	800526e <_dtoa_r+0x266>
 800530c:	2301      	movs	r3, #1
 800530e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005310:	e7f4      	b.n	80052fc <_dtoa_r+0x2f4>
 8005312:	f8dd 908c 	ldr.w	r9, [sp, #140]	; 0x8c
 8005316:	464b      	mov	r3, r9
 8005318:	f8cd 9020 	str.w	r9, [sp, #32]
 800531c:	e7a7      	b.n	800526e <_dtoa_r+0x266>
 800531e:	3101      	adds	r1, #1
 8005320:	6041      	str	r1, [r0, #4]
 8005322:	0052      	lsls	r2, r2, #1
 8005324:	e7a7      	b.n	8005276 <_dtoa_r+0x26e>
 8005326:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005328:	9a03      	ldr	r2, [sp, #12]
 800532a:	601a      	str	r2, [r3, #0]
 800532c:	9b08      	ldr	r3, [sp, #32]
 800532e:	2b0e      	cmp	r3, #14
 8005330:	f200 80a8 	bhi.w	8005484 <_dtoa_r+0x47c>
 8005334:	2c00      	cmp	r4, #0
 8005336:	f000 80a5 	beq.w	8005484 <_dtoa_r+0x47c>
 800533a:	f1ba 0f00 	cmp.w	sl, #0
 800533e:	dd34      	ble.n	80053aa <_dtoa_r+0x3a2>
 8005340:	4a9a      	ldr	r2, [pc, #616]	; (80055ac <_dtoa_r+0x5a4>)
 8005342:	f00a 030f 	and.w	r3, sl, #15
 8005346:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800534a:	f41a 7f80 	tst.w	sl, #256	; 0x100
 800534e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005352:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005356:	ea4f 142a 	mov.w	r4, sl, asr #4
 800535a:	d016      	beq.n	800538a <_dtoa_r+0x382>
 800535c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005360:	4b93      	ldr	r3, [pc, #588]	; (80055b0 <_dtoa_r+0x5a8>)
 8005362:	2703      	movs	r7, #3
 8005364:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005368:	f7fb f9e0 	bl	800072c <__aeabi_ddiv>
 800536c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005370:	f004 040f 	and.w	r4, r4, #15
 8005374:	4e8e      	ldr	r6, [pc, #568]	; (80055b0 <_dtoa_r+0x5a8>)
 8005376:	b954      	cbnz	r4, 800538e <_dtoa_r+0x386>
 8005378:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800537c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005380:	f7fb f9d4 	bl	800072c <__aeabi_ddiv>
 8005384:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005388:	e029      	b.n	80053de <_dtoa_r+0x3d6>
 800538a:	2702      	movs	r7, #2
 800538c:	e7f2      	b.n	8005374 <_dtoa_r+0x36c>
 800538e:	07e1      	lsls	r1, r4, #31
 8005390:	d508      	bpl.n	80053a4 <_dtoa_r+0x39c>
 8005392:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005396:	e9d6 2300 	ldrd	r2, r3, [r6]
 800539a:	f7fb f89d 	bl	80004d8 <__aeabi_dmul>
 800539e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80053a2:	3701      	adds	r7, #1
 80053a4:	1064      	asrs	r4, r4, #1
 80053a6:	3608      	adds	r6, #8
 80053a8:	e7e5      	b.n	8005376 <_dtoa_r+0x36e>
 80053aa:	f000 80a5 	beq.w	80054f8 <_dtoa_r+0x4f0>
 80053ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053b2:	f1ca 0400 	rsb	r4, sl, #0
 80053b6:	4b7d      	ldr	r3, [pc, #500]	; (80055ac <_dtoa_r+0x5a4>)
 80053b8:	f004 020f 	and.w	r2, r4, #15
 80053bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f7fb f888 	bl	80004d8 <__aeabi_dmul>
 80053c8:	2702      	movs	r7, #2
 80053ca:	2300      	movs	r3, #0
 80053cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053d0:	4e77      	ldr	r6, [pc, #476]	; (80055b0 <_dtoa_r+0x5a8>)
 80053d2:	1124      	asrs	r4, r4, #4
 80053d4:	2c00      	cmp	r4, #0
 80053d6:	f040 8084 	bne.w	80054e2 <_dtoa_r+0x4da>
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1d2      	bne.n	8005384 <_dtoa_r+0x37c>
 80053de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 808b 	beq.w	80054fc <_dtoa_r+0x4f4>
 80053e6:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80053ea:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80053ee:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80053f2:	2200      	movs	r2, #0
 80053f4:	4b6f      	ldr	r3, [pc, #444]	; (80055b4 <_dtoa_r+0x5ac>)
 80053f6:	f7fb fae1 	bl	80009bc <__aeabi_dcmplt>
 80053fa:	2800      	cmp	r0, #0
 80053fc:	d07e      	beq.n	80054fc <_dtoa_r+0x4f4>
 80053fe:	9b08      	ldr	r3, [sp, #32]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d07b      	beq.n	80054fc <_dtoa_r+0x4f4>
 8005404:	f1b9 0f00 	cmp.w	r9, #0
 8005408:	dd38      	ble.n	800547c <_dtoa_r+0x474>
 800540a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800540e:	2200      	movs	r2, #0
 8005410:	4b69      	ldr	r3, [pc, #420]	; (80055b8 <_dtoa_r+0x5b0>)
 8005412:	f7fb f861 	bl	80004d8 <__aeabi_dmul>
 8005416:	464c      	mov	r4, r9
 8005418:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800541c:	f10a 38ff 	add.w	r8, sl, #4294967295
 8005420:	3701      	adds	r7, #1
 8005422:	4638      	mov	r0, r7
 8005424:	f7fa ffee 	bl	8000404 <__aeabi_i2d>
 8005428:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800542c:	f7fb f854 	bl	80004d8 <__aeabi_dmul>
 8005430:	2200      	movs	r2, #0
 8005432:	4b62      	ldr	r3, [pc, #392]	; (80055bc <_dtoa_r+0x5b4>)
 8005434:	f7fa fe9a 	bl	800016c <__adddf3>
 8005438:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800543c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005440:	9611      	str	r6, [sp, #68]	; 0x44
 8005442:	2c00      	cmp	r4, #0
 8005444:	d15d      	bne.n	8005502 <_dtoa_r+0x4fa>
 8005446:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800544a:	2200      	movs	r2, #0
 800544c:	4b5c      	ldr	r3, [pc, #368]	; (80055c0 <_dtoa_r+0x5b8>)
 800544e:	f7fa fe8b 	bl	8000168 <__aeabi_dsub>
 8005452:	4602      	mov	r2, r0
 8005454:	460b      	mov	r3, r1
 8005456:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800545a:	4633      	mov	r3, r6
 800545c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800545e:	f7fb facb 	bl	80009f8 <__aeabi_dcmpgt>
 8005462:	2800      	cmp	r0, #0
 8005464:	f040 829c 	bne.w	80059a0 <_dtoa_r+0x998>
 8005468:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800546c:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800546e:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005472:	f7fb faa3 	bl	80009bc <__aeabi_dcmplt>
 8005476:	2800      	cmp	r0, #0
 8005478:	f040 8290 	bne.w	800599c <_dtoa_r+0x994>
 800547c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005480:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005484:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005486:	2b00      	cmp	r3, #0
 8005488:	f2c0 8152 	blt.w	8005730 <_dtoa_r+0x728>
 800548c:	f1ba 0f0e 	cmp.w	sl, #14
 8005490:	f300 814e 	bgt.w	8005730 <_dtoa_r+0x728>
 8005494:	4b45      	ldr	r3, [pc, #276]	; (80055ac <_dtoa_r+0x5a4>)
 8005496:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800549a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800549e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80054a2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	f280 80db 	bge.w	8005660 <_dtoa_r+0x658>
 80054aa:	9b08      	ldr	r3, [sp, #32]
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	f300 80d7 	bgt.w	8005660 <_dtoa_r+0x658>
 80054b2:	f040 8272 	bne.w	800599a <_dtoa_r+0x992>
 80054b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80054ba:	2200      	movs	r2, #0
 80054bc:	4b40      	ldr	r3, [pc, #256]	; (80055c0 <_dtoa_r+0x5b8>)
 80054be:	f7fb f80b 	bl	80004d8 <__aeabi_dmul>
 80054c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80054c6:	f7fb fa8d 	bl	80009e4 <__aeabi_dcmpge>
 80054ca:	9c08      	ldr	r4, [sp, #32]
 80054cc:	4626      	mov	r6, r4
 80054ce:	2800      	cmp	r0, #0
 80054d0:	f040 8248 	bne.w	8005964 <_dtoa_r+0x95c>
 80054d4:	2331      	movs	r3, #49	; 0x31
 80054d6:	9f03      	ldr	r7, [sp, #12]
 80054d8:	f10a 0a01 	add.w	sl, sl, #1
 80054dc:	f807 3b01 	strb.w	r3, [r7], #1
 80054e0:	e244      	b.n	800596c <_dtoa_r+0x964>
 80054e2:	07e2      	lsls	r2, r4, #31
 80054e4:	d505      	bpl.n	80054f2 <_dtoa_r+0x4ea>
 80054e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80054ea:	f7fa fff5 	bl	80004d8 <__aeabi_dmul>
 80054ee:	2301      	movs	r3, #1
 80054f0:	3701      	adds	r7, #1
 80054f2:	1064      	asrs	r4, r4, #1
 80054f4:	3608      	adds	r6, #8
 80054f6:	e76d      	b.n	80053d4 <_dtoa_r+0x3cc>
 80054f8:	2702      	movs	r7, #2
 80054fa:	e770      	b.n	80053de <_dtoa_r+0x3d6>
 80054fc:	46d0      	mov	r8, sl
 80054fe:	9c08      	ldr	r4, [sp, #32]
 8005500:	e78f      	b.n	8005422 <_dtoa_r+0x41a>
 8005502:	9903      	ldr	r1, [sp, #12]
 8005504:	4b29      	ldr	r3, [pc, #164]	; (80055ac <_dtoa_r+0x5a4>)
 8005506:	4421      	add	r1, r4
 8005508:	9112      	str	r1, [sp, #72]	; 0x48
 800550a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800550c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005510:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8005514:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005518:	2900      	cmp	r1, #0
 800551a:	d055      	beq.n	80055c8 <_dtoa_r+0x5c0>
 800551c:	2000      	movs	r0, #0
 800551e:	4929      	ldr	r1, [pc, #164]	; (80055c4 <_dtoa_r+0x5bc>)
 8005520:	f7fb f904 	bl	800072c <__aeabi_ddiv>
 8005524:	463b      	mov	r3, r7
 8005526:	4632      	mov	r2, r6
 8005528:	f7fa fe1e 	bl	8000168 <__aeabi_dsub>
 800552c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005530:	9f03      	ldr	r7, [sp, #12]
 8005532:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005536:	f7fb fa7f 	bl	8000a38 <__aeabi_d2iz>
 800553a:	4604      	mov	r4, r0
 800553c:	f7fa ff62 	bl	8000404 <__aeabi_i2d>
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005548:	f7fa fe0e 	bl	8000168 <__aeabi_dsub>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	3430      	adds	r4, #48	; 0x30
 8005552:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005556:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800555a:	f807 4b01 	strb.w	r4, [r7], #1
 800555e:	f7fb fa2d 	bl	80009bc <__aeabi_dcmplt>
 8005562:	2800      	cmp	r0, #0
 8005564:	d174      	bne.n	8005650 <_dtoa_r+0x648>
 8005566:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800556a:	2000      	movs	r0, #0
 800556c:	4911      	ldr	r1, [pc, #68]	; (80055b4 <_dtoa_r+0x5ac>)
 800556e:	f7fa fdfb 	bl	8000168 <__aeabi_dsub>
 8005572:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005576:	f7fb fa21 	bl	80009bc <__aeabi_dcmplt>
 800557a:	2800      	cmp	r0, #0
 800557c:	f040 80b7 	bne.w	80056ee <_dtoa_r+0x6e6>
 8005580:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005582:	429f      	cmp	r7, r3
 8005584:	f43f af7a 	beq.w	800547c <_dtoa_r+0x474>
 8005588:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800558c:	2200      	movs	r2, #0
 800558e:	4b0a      	ldr	r3, [pc, #40]	; (80055b8 <_dtoa_r+0x5b0>)
 8005590:	f7fa ffa2 	bl	80004d8 <__aeabi_dmul>
 8005594:	2200      	movs	r2, #0
 8005596:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800559a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800559e:	4b06      	ldr	r3, [pc, #24]	; (80055b8 <_dtoa_r+0x5b0>)
 80055a0:	f7fa ff9a 	bl	80004d8 <__aeabi_dmul>
 80055a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055a8:	e7c3      	b.n	8005532 <_dtoa_r+0x52a>
 80055aa:	bf00      	nop
 80055ac:	080080a0 	.word	0x080080a0
 80055b0:	08008078 	.word	0x08008078
 80055b4:	3ff00000 	.word	0x3ff00000
 80055b8:	40240000 	.word	0x40240000
 80055bc:	401c0000 	.word	0x401c0000
 80055c0:	40140000 	.word	0x40140000
 80055c4:	3fe00000 	.word	0x3fe00000
 80055c8:	4630      	mov	r0, r6
 80055ca:	4639      	mov	r1, r7
 80055cc:	f7fa ff84 	bl	80004d8 <__aeabi_dmul>
 80055d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80055d2:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055d6:	9c03      	ldr	r4, [sp, #12]
 80055d8:	9314      	str	r3, [sp, #80]	; 0x50
 80055da:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055de:	f7fb fa2b 	bl	8000a38 <__aeabi_d2iz>
 80055e2:	9015      	str	r0, [sp, #84]	; 0x54
 80055e4:	f7fa ff0e 	bl	8000404 <__aeabi_i2d>
 80055e8:	4602      	mov	r2, r0
 80055ea:	460b      	mov	r3, r1
 80055ec:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055f0:	f7fa fdba 	bl	8000168 <__aeabi_dsub>
 80055f4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80055f6:	4606      	mov	r6, r0
 80055f8:	3330      	adds	r3, #48	; 0x30
 80055fa:	f804 3b01 	strb.w	r3, [r4], #1
 80055fe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005600:	460f      	mov	r7, r1
 8005602:	429c      	cmp	r4, r3
 8005604:	f04f 0200 	mov.w	r2, #0
 8005608:	d124      	bne.n	8005654 <_dtoa_r+0x64c>
 800560a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800560e:	4bb0      	ldr	r3, [pc, #704]	; (80058d0 <_dtoa_r+0x8c8>)
 8005610:	f7fa fdac 	bl	800016c <__adddf3>
 8005614:	4602      	mov	r2, r0
 8005616:	460b      	mov	r3, r1
 8005618:	4630      	mov	r0, r6
 800561a:	4639      	mov	r1, r7
 800561c:	f7fb f9ec 	bl	80009f8 <__aeabi_dcmpgt>
 8005620:	2800      	cmp	r0, #0
 8005622:	d163      	bne.n	80056ec <_dtoa_r+0x6e4>
 8005624:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005628:	2000      	movs	r0, #0
 800562a:	49a9      	ldr	r1, [pc, #676]	; (80058d0 <_dtoa_r+0x8c8>)
 800562c:	f7fa fd9c 	bl	8000168 <__aeabi_dsub>
 8005630:	4602      	mov	r2, r0
 8005632:	460b      	mov	r3, r1
 8005634:	4630      	mov	r0, r6
 8005636:	4639      	mov	r1, r7
 8005638:	f7fb f9c0 	bl	80009bc <__aeabi_dcmplt>
 800563c:	2800      	cmp	r0, #0
 800563e:	f43f af1d 	beq.w	800547c <_dtoa_r+0x474>
 8005642:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8005644:	1e7b      	subs	r3, r7, #1
 8005646:	9314      	str	r3, [sp, #80]	; 0x50
 8005648:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800564c:	2b30      	cmp	r3, #48	; 0x30
 800564e:	d0f8      	beq.n	8005642 <_dtoa_r+0x63a>
 8005650:	46c2      	mov	sl, r8
 8005652:	e03b      	b.n	80056cc <_dtoa_r+0x6c4>
 8005654:	4b9f      	ldr	r3, [pc, #636]	; (80058d4 <_dtoa_r+0x8cc>)
 8005656:	f7fa ff3f 	bl	80004d8 <__aeabi_dmul>
 800565a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800565e:	e7bc      	b.n	80055da <_dtoa_r+0x5d2>
 8005660:	9f03      	ldr	r7, [sp, #12]
 8005662:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8005666:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800566a:	4640      	mov	r0, r8
 800566c:	4649      	mov	r1, r9
 800566e:	f7fb f85d 	bl	800072c <__aeabi_ddiv>
 8005672:	f7fb f9e1 	bl	8000a38 <__aeabi_d2iz>
 8005676:	4604      	mov	r4, r0
 8005678:	f7fa fec4 	bl	8000404 <__aeabi_i2d>
 800567c:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005680:	f7fa ff2a 	bl	80004d8 <__aeabi_dmul>
 8005684:	4602      	mov	r2, r0
 8005686:	460b      	mov	r3, r1
 8005688:	4640      	mov	r0, r8
 800568a:	4649      	mov	r1, r9
 800568c:	f7fa fd6c 	bl	8000168 <__aeabi_dsub>
 8005690:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005694:	f807 6b01 	strb.w	r6, [r7], #1
 8005698:	9e03      	ldr	r6, [sp, #12]
 800569a:	f8dd c020 	ldr.w	ip, [sp, #32]
 800569e:	1bbe      	subs	r6, r7, r6
 80056a0:	45b4      	cmp	ip, r6
 80056a2:	4602      	mov	r2, r0
 80056a4:	460b      	mov	r3, r1
 80056a6:	d136      	bne.n	8005716 <_dtoa_r+0x70e>
 80056a8:	f7fa fd60 	bl	800016c <__adddf3>
 80056ac:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056b0:	4680      	mov	r8, r0
 80056b2:	4689      	mov	r9, r1
 80056b4:	f7fb f9a0 	bl	80009f8 <__aeabi_dcmpgt>
 80056b8:	bb58      	cbnz	r0, 8005712 <_dtoa_r+0x70a>
 80056ba:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80056be:	4640      	mov	r0, r8
 80056c0:	4649      	mov	r1, r9
 80056c2:	f7fb f971 	bl	80009a8 <__aeabi_dcmpeq>
 80056c6:	b108      	cbz	r0, 80056cc <_dtoa_r+0x6c4>
 80056c8:	07e1      	lsls	r1, r4, #31
 80056ca:	d422      	bmi.n	8005712 <_dtoa_r+0x70a>
 80056cc:	4628      	mov	r0, r5
 80056ce:	4659      	mov	r1, fp
 80056d0:	f000 fe68 	bl	80063a4 <_Bfree>
 80056d4:	2300      	movs	r3, #0
 80056d6:	703b      	strb	r3, [r7, #0]
 80056d8:	9b24      	ldr	r3, [sp, #144]	; 0x90
 80056da:	f10a 0001 	add.w	r0, sl, #1
 80056de:	6018      	str	r0, [r3, #0]
 80056e0:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	f43f acde 	beq.w	80050a4 <_dtoa_r+0x9c>
 80056e8:	601f      	str	r7, [r3, #0]
 80056ea:	e4db      	b.n	80050a4 <_dtoa_r+0x9c>
 80056ec:	4627      	mov	r7, r4
 80056ee:	463b      	mov	r3, r7
 80056f0:	461f      	mov	r7, r3
 80056f2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80056f6:	2a39      	cmp	r2, #57	; 0x39
 80056f8:	d107      	bne.n	800570a <_dtoa_r+0x702>
 80056fa:	9a03      	ldr	r2, [sp, #12]
 80056fc:	429a      	cmp	r2, r3
 80056fe:	d1f7      	bne.n	80056f0 <_dtoa_r+0x6e8>
 8005700:	2230      	movs	r2, #48	; 0x30
 8005702:	9903      	ldr	r1, [sp, #12]
 8005704:	f108 0801 	add.w	r8, r8, #1
 8005708:	700a      	strb	r2, [r1, #0]
 800570a:	781a      	ldrb	r2, [r3, #0]
 800570c:	3201      	adds	r2, #1
 800570e:	701a      	strb	r2, [r3, #0]
 8005710:	e79e      	b.n	8005650 <_dtoa_r+0x648>
 8005712:	46d0      	mov	r8, sl
 8005714:	e7eb      	b.n	80056ee <_dtoa_r+0x6e6>
 8005716:	2200      	movs	r2, #0
 8005718:	4b6e      	ldr	r3, [pc, #440]	; (80058d4 <_dtoa_r+0x8cc>)
 800571a:	f7fa fedd 	bl	80004d8 <__aeabi_dmul>
 800571e:	2200      	movs	r2, #0
 8005720:	2300      	movs	r3, #0
 8005722:	4680      	mov	r8, r0
 8005724:	4689      	mov	r9, r1
 8005726:	f7fb f93f 	bl	80009a8 <__aeabi_dcmpeq>
 800572a:	2800      	cmp	r0, #0
 800572c:	d09b      	beq.n	8005666 <_dtoa_r+0x65e>
 800572e:	e7cd      	b.n	80056cc <_dtoa_r+0x6c4>
 8005730:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005732:	2a00      	cmp	r2, #0
 8005734:	f000 80d0 	beq.w	80058d8 <_dtoa_r+0x8d0>
 8005738:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800573a:	2a01      	cmp	r2, #1
 800573c:	f300 80ae 	bgt.w	800589c <_dtoa_r+0x894>
 8005740:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005742:	2a00      	cmp	r2, #0
 8005744:	f000 80a6 	beq.w	8005894 <_dtoa_r+0x88c>
 8005748:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800574c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 800574e:	9f06      	ldr	r7, [sp, #24]
 8005750:	9a06      	ldr	r2, [sp, #24]
 8005752:	2101      	movs	r1, #1
 8005754:	441a      	add	r2, r3
 8005756:	9206      	str	r2, [sp, #24]
 8005758:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800575a:	4628      	mov	r0, r5
 800575c:	441a      	add	r2, r3
 800575e:	9209      	str	r2, [sp, #36]	; 0x24
 8005760:	f000 ff20 	bl	80065a4 <__i2b>
 8005764:	4606      	mov	r6, r0
 8005766:	2f00      	cmp	r7, #0
 8005768:	dd0c      	ble.n	8005784 <_dtoa_r+0x77c>
 800576a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800576c:	2b00      	cmp	r3, #0
 800576e:	dd09      	ble.n	8005784 <_dtoa_r+0x77c>
 8005770:	42bb      	cmp	r3, r7
 8005772:	bfa8      	it	ge
 8005774:	463b      	movge	r3, r7
 8005776:	9a06      	ldr	r2, [sp, #24]
 8005778:	1aff      	subs	r7, r7, r3
 800577a:	1ad2      	subs	r2, r2, r3
 800577c:	9206      	str	r2, [sp, #24]
 800577e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	9309      	str	r3, [sp, #36]	; 0x24
 8005784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005786:	b1f3      	cbz	r3, 80057c6 <_dtoa_r+0x7be>
 8005788:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800578a:	2b00      	cmp	r3, #0
 800578c:	f000 80a8 	beq.w	80058e0 <_dtoa_r+0x8d8>
 8005790:	2c00      	cmp	r4, #0
 8005792:	dd10      	ble.n	80057b6 <_dtoa_r+0x7ae>
 8005794:	4631      	mov	r1, r6
 8005796:	4622      	mov	r2, r4
 8005798:	4628      	mov	r0, r5
 800579a:	f000 ffc1 	bl	8006720 <__pow5mult>
 800579e:	465a      	mov	r2, fp
 80057a0:	4601      	mov	r1, r0
 80057a2:	4606      	mov	r6, r0
 80057a4:	4628      	mov	r0, r5
 80057a6:	f000 ff13 	bl	80065d0 <__multiply>
 80057aa:	4680      	mov	r8, r0
 80057ac:	4659      	mov	r1, fp
 80057ae:	4628      	mov	r0, r5
 80057b0:	f000 fdf8 	bl	80063a4 <_Bfree>
 80057b4:	46c3      	mov	fp, r8
 80057b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057b8:	1b1a      	subs	r2, r3, r4
 80057ba:	d004      	beq.n	80057c6 <_dtoa_r+0x7be>
 80057bc:	4659      	mov	r1, fp
 80057be:	4628      	mov	r0, r5
 80057c0:	f000 ffae 	bl	8006720 <__pow5mult>
 80057c4:	4683      	mov	fp, r0
 80057c6:	2101      	movs	r1, #1
 80057c8:	4628      	mov	r0, r5
 80057ca:	f000 feeb 	bl	80065a4 <__i2b>
 80057ce:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80057d0:	4604      	mov	r4, r0
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	f340 8086 	ble.w	80058e4 <_dtoa_r+0x8dc>
 80057d8:	461a      	mov	r2, r3
 80057da:	4601      	mov	r1, r0
 80057dc:	4628      	mov	r0, r5
 80057de:	f000 ff9f 	bl	8006720 <__pow5mult>
 80057e2:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057e4:	4604      	mov	r4, r0
 80057e6:	2b01      	cmp	r3, #1
 80057e8:	dd7f      	ble.n	80058ea <_dtoa_r+0x8e2>
 80057ea:	f04f 0800 	mov.w	r8, #0
 80057ee:	6923      	ldr	r3, [r4, #16]
 80057f0:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80057f4:	6918      	ldr	r0, [r3, #16]
 80057f6:	f000 fe87 	bl	8006508 <__hi0bits>
 80057fa:	f1c0 0020 	rsb	r0, r0, #32
 80057fe:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005800:	4418      	add	r0, r3
 8005802:	f010 001f 	ands.w	r0, r0, #31
 8005806:	f000 8092 	beq.w	800592e <_dtoa_r+0x926>
 800580a:	f1c0 0320 	rsb	r3, r0, #32
 800580e:	2b04      	cmp	r3, #4
 8005810:	f340 808a 	ble.w	8005928 <_dtoa_r+0x920>
 8005814:	f1c0 001c 	rsb	r0, r0, #28
 8005818:	9b06      	ldr	r3, [sp, #24]
 800581a:	4407      	add	r7, r0
 800581c:	4403      	add	r3, r0
 800581e:	9306      	str	r3, [sp, #24]
 8005820:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005822:	4403      	add	r3, r0
 8005824:	9309      	str	r3, [sp, #36]	; 0x24
 8005826:	9b06      	ldr	r3, [sp, #24]
 8005828:	2b00      	cmp	r3, #0
 800582a:	dd05      	ble.n	8005838 <_dtoa_r+0x830>
 800582c:	4659      	mov	r1, fp
 800582e:	461a      	mov	r2, r3
 8005830:	4628      	mov	r0, r5
 8005832:	f000 ffcf 	bl	80067d4 <__lshift>
 8005836:	4683      	mov	fp, r0
 8005838:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800583a:	2b00      	cmp	r3, #0
 800583c:	dd05      	ble.n	800584a <_dtoa_r+0x842>
 800583e:	4621      	mov	r1, r4
 8005840:	461a      	mov	r2, r3
 8005842:	4628      	mov	r0, r5
 8005844:	f000 ffc6 	bl	80067d4 <__lshift>
 8005848:	4604      	mov	r4, r0
 800584a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800584c:	2b00      	cmp	r3, #0
 800584e:	d070      	beq.n	8005932 <_dtoa_r+0x92a>
 8005850:	4621      	mov	r1, r4
 8005852:	4658      	mov	r0, fp
 8005854:	f001 f82e 	bl	80068b4 <__mcmp>
 8005858:	2800      	cmp	r0, #0
 800585a:	da6a      	bge.n	8005932 <_dtoa_r+0x92a>
 800585c:	2300      	movs	r3, #0
 800585e:	4659      	mov	r1, fp
 8005860:	220a      	movs	r2, #10
 8005862:	4628      	mov	r0, r5
 8005864:	f000 fdc0 	bl	80063e8 <__multadd>
 8005868:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800586a:	4683      	mov	fp, r0
 800586c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005870:	2b00      	cmp	r3, #0
 8005872:	f000 8194 	beq.w	8005b9e <_dtoa_r+0xb96>
 8005876:	4631      	mov	r1, r6
 8005878:	2300      	movs	r3, #0
 800587a:	220a      	movs	r2, #10
 800587c:	4628      	mov	r0, r5
 800587e:	f000 fdb3 	bl	80063e8 <__multadd>
 8005882:	f1b9 0f00 	cmp.w	r9, #0
 8005886:	4606      	mov	r6, r0
 8005888:	f300 8093 	bgt.w	80059b2 <_dtoa_r+0x9aa>
 800588c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800588e:	2b02      	cmp	r3, #2
 8005890:	dc57      	bgt.n	8005942 <_dtoa_r+0x93a>
 8005892:	e08e      	b.n	80059b2 <_dtoa_r+0x9aa>
 8005894:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005896:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800589a:	e757      	b.n	800574c <_dtoa_r+0x744>
 800589c:	9b08      	ldr	r3, [sp, #32]
 800589e:	1e5c      	subs	r4, r3, #1
 80058a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058a2:	42a3      	cmp	r3, r4
 80058a4:	bfb7      	itett	lt
 80058a6:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80058a8:	1b1c      	subge	r4, r3, r4
 80058aa:	1ae2      	sublt	r2, r4, r3
 80058ac:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 80058ae:	bfbe      	ittt	lt
 80058b0:	940a      	strlt	r4, [sp, #40]	; 0x28
 80058b2:	189b      	addlt	r3, r3, r2
 80058b4:	930e      	strlt	r3, [sp, #56]	; 0x38
 80058b6:	9b08      	ldr	r3, [sp, #32]
 80058b8:	bfb8      	it	lt
 80058ba:	2400      	movlt	r4, #0
 80058bc:	2b00      	cmp	r3, #0
 80058be:	bfbb      	ittet	lt
 80058c0:	9b06      	ldrlt	r3, [sp, #24]
 80058c2:	9a08      	ldrlt	r2, [sp, #32]
 80058c4:	9f06      	ldrge	r7, [sp, #24]
 80058c6:	1a9f      	sublt	r7, r3, r2
 80058c8:	bfac      	ite	ge
 80058ca:	9b08      	ldrge	r3, [sp, #32]
 80058cc:	2300      	movlt	r3, #0
 80058ce:	e73f      	b.n	8005750 <_dtoa_r+0x748>
 80058d0:	3fe00000 	.word	0x3fe00000
 80058d4:	40240000 	.word	0x40240000
 80058d8:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80058da:	9f06      	ldr	r7, [sp, #24]
 80058dc:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 80058de:	e742      	b.n	8005766 <_dtoa_r+0x75e>
 80058e0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058e2:	e76b      	b.n	80057bc <_dtoa_r+0x7b4>
 80058e4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80058e6:	2b01      	cmp	r3, #1
 80058e8:	dc19      	bgt.n	800591e <_dtoa_r+0x916>
 80058ea:	9b04      	ldr	r3, [sp, #16]
 80058ec:	b9bb      	cbnz	r3, 800591e <_dtoa_r+0x916>
 80058ee:	9b05      	ldr	r3, [sp, #20]
 80058f0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80058f4:	b99b      	cbnz	r3, 800591e <_dtoa_r+0x916>
 80058f6:	9b05      	ldr	r3, [sp, #20]
 80058f8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80058fc:	0d1b      	lsrs	r3, r3, #20
 80058fe:	051b      	lsls	r3, r3, #20
 8005900:	b183      	cbz	r3, 8005924 <_dtoa_r+0x91c>
 8005902:	f04f 0801 	mov.w	r8, #1
 8005906:	9b06      	ldr	r3, [sp, #24]
 8005908:	3301      	adds	r3, #1
 800590a:	9306      	str	r3, [sp, #24]
 800590c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800590e:	3301      	adds	r3, #1
 8005910:	9309      	str	r3, [sp, #36]	; 0x24
 8005912:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005914:	2b00      	cmp	r3, #0
 8005916:	f47f af6a 	bne.w	80057ee <_dtoa_r+0x7e6>
 800591a:	2001      	movs	r0, #1
 800591c:	e76f      	b.n	80057fe <_dtoa_r+0x7f6>
 800591e:	f04f 0800 	mov.w	r8, #0
 8005922:	e7f6      	b.n	8005912 <_dtoa_r+0x90a>
 8005924:	4698      	mov	r8, r3
 8005926:	e7f4      	b.n	8005912 <_dtoa_r+0x90a>
 8005928:	f43f af7d 	beq.w	8005826 <_dtoa_r+0x81e>
 800592c:	4618      	mov	r0, r3
 800592e:	301c      	adds	r0, #28
 8005930:	e772      	b.n	8005818 <_dtoa_r+0x810>
 8005932:	9b08      	ldr	r3, [sp, #32]
 8005934:	2b00      	cmp	r3, #0
 8005936:	dc36      	bgt.n	80059a6 <_dtoa_r+0x99e>
 8005938:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800593a:	2b02      	cmp	r3, #2
 800593c:	dd33      	ble.n	80059a6 <_dtoa_r+0x99e>
 800593e:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005942:	f1b9 0f00 	cmp.w	r9, #0
 8005946:	d10d      	bne.n	8005964 <_dtoa_r+0x95c>
 8005948:	4621      	mov	r1, r4
 800594a:	464b      	mov	r3, r9
 800594c:	2205      	movs	r2, #5
 800594e:	4628      	mov	r0, r5
 8005950:	f000 fd4a 	bl	80063e8 <__multadd>
 8005954:	4601      	mov	r1, r0
 8005956:	4604      	mov	r4, r0
 8005958:	4658      	mov	r0, fp
 800595a:	f000 ffab 	bl	80068b4 <__mcmp>
 800595e:	2800      	cmp	r0, #0
 8005960:	f73f adb8 	bgt.w	80054d4 <_dtoa_r+0x4cc>
 8005964:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005966:	9f03      	ldr	r7, [sp, #12]
 8005968:	ea6f 0a03 	mvn.w	sl, r3
 800596c:	f04f 0800 	mov.w	r8, #0
 8005970:	4621      	mov	r1, r4
 8005972:	4628      	mov	r0, r5
 8005974:	f000 fd16 	bl	80063a4 <_Bfree>
 8005978:	2e00      	cmp	r6, #0
 800597a:	f43f aea7 	beq.w	80056cc <_dtoa_r+0x6c4>
 800597e:	f1b8 0f00 	cmp.w	r8, #0
 8005982:	d005      	beq.n	8005990 <_dtoa_r+0x988>
 8005984:	45b0      	cmp	r8, r6
 8005986:	d003      	beq.n	8005990 <_dtoa_r+0x988>
 8005988:	4641      	mov	r1, r8
 800598a:	4628      	mov	r0, r5
 800598c:	f000 fd0a 	bl	80063a4 <_Bfree>
 8005990:	4631      	mov	r1, r6
 8005992:	4628      	mov	r0, r5
 8005994:	f000 fd06 	bl	80063a4 <_Bfree>
 8005998:	e698      	b.n	80056cc <_dtoa_r+0x6c4>
 800599a:	2400      	movs	r4, #0
 800599c:	4626      	mov	r6, r4
 800599e:	e7e1      	b.n	8005964 <_dtoa_r+0x95c>
 80059a0:	46c2      	mov	sl, r8
 80059a2:	4626      	mov	r6, r4
 80059a4:	e596      	b.n	80054d4 <_dtoa_r+0x4cc>
 80059a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059a8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059ac:	2b00      	cmp	r3, #0
 80059ae:	f000 80fd 	beq.w	8005bac <_dtoa_r+0xba4>
 80059b2:	2f00      	cmp	r7, #0
 80059b4:	dd05      	ble.n	80059c2 <_dtoa_r+0x9ba>
 80059b6:	4631      	mov	r1, r6
 80059b8:	463a      	mov	r2, r7
 80059ba:	4628      	mov	r0, r5
 80059bc:	f000 ff0a 	bl	80067d4 <__lshift>
 80059c0:	4606      	mov	r6, r0
 80059c2:	f1b8 0f00 	cmp.w	r8, #0
 80059c6:	d05c      	beq.n	8005a82 <_dtoa_r+0xa7a>
 80059c8:	4628      	mov	r0, r5
 80059ca:	6871      	ldr	r1, [r6, #4]
 80059cc:	f000 fcaa 	bl	8006324 <_Balloc>
 80059d0:	4607      	mov	r7, r0
 80059d2:	b928      	cbnz	r0, 80059e0 <_dtoa_r+0x9d8>
 80059d4:	4602      	mov	r2, r0
 80059d6:	f240 21ea 	movw	r1, #746	; 0x2ea
 80059da:	4b7f      	ldr	r3, [pc, #508]	; (8005bd8 <_dtoa_r+0xbd0>)
 80059dc:	f7ff bb28 	b.w	8005030 <_dtoa_r+0x28>
 80059e0:	6932      	ldr	r2, [r6, #16]
 80059e2:	f106 010c 	add.w	r1, r6, #12
 80059e6:	3202      	adds	r2, #2
 80059e8:	0092      	lsls	r2, r2, #2
 80059ea:	300c      	adds	r0, #12
 80059ec:	f000 fc8c 	bl	8006308 <memcpy>
 80059f0:	2201      	movs	r2, #1
 80059f2:	4639      	mov	r1, r7
 80059f4:	4628      	mov	r0, r5
 80059f6:	f000 feed 	bl	80067d4 <__lshift>
 80059fa:	46b0      	mov	r8, r6
 80059fc:	4606      	mov	r6, r0
 80059fe:	9b03      	ldr	r3, [sp, #12]
 8005a00:	3301      	adds	r3, #1
 8005a02:	9308      	str	r3, [sp, #32]
 8005a04:	9b03      	ldr	r3, [sp, #12]
 8005a06:	444b      	add	r3, r9
 8005a08:	930a      	str	r3, [sp, #40]	; 0x28
 8005a0a:	9b04      	ldr	r3, [sp, #16]
 8005a0c:	f003 0301 	and.w	r3, r3, #1
 8005a10:	9309      	str	r3, [sp, #36]	; 0x24
 8005a12:	9b08      	ldr	r3, [sp, #32]
 8005a14:	4621      	mov	r1, r4
 8005a16:	3b01      	subs	r3, #1
 8005a18:	4658      	mov	r0, fp
 8005a1a:	9304      	str	r3, [sp, #16]
 8005a1c:	f7ff fa68 	bl	8004ef0 <quorem>
 8005a20:	4603      	mov	r3, r0
 8005a22:	4641      	mov	r1, r8
 8005a24:	3330      	adds	r3, #48	; 0x30
 8005a26:	9006      	str	r0, [sp, #24]
 8005a28:	4658      	mov	r0, fp
 8005a2a:	930b      	str	r3, [sp, #44]	; 0x2c
 8005a2c:	f000 ff42 	bl	80068b4 <__mcmp>
 8005a30:	4632      	mov	r2, r6
 8005a32:	4681      	mov	r9, r0
 8005a34:	4621      	mov	r1, r4
 8005a36:	4628      	mov	r0, r5
 8005a38:	f000 ff58 	bl	80068ec <__mdiff>
 8005a3c:	68c2      	ldr	r2, [r0, #12]
 8005a3e:	4607      	mov	r7, r0
 8005a40:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a42:	bb02      	cbnz	r2, 8005a86 <_dtoa_r+0xa7e>
 8005a44:	4601      	mov	r1, r0
 8005a46:	4658      	mov	r0, fp
 8005a48:	f000 ff34 	bl	80068b4 <__mcmp>
 8005a4c:	4602      	mov	r2, r0
 8005a4e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a50:	4639      	mov	r1, r7
 8005a52:	4628      	mov	r0, r5
 8005a54:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 8005a58:	f000 fca4 	bl	80063a4 <_Bfree>
 8005a5c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a5e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005a60:	9f08      	ldr	r7, [sp, #32]
 8005a62:	ea43 0102 	orr.w	r1, r3, r2
 8005a66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a68:	430b      	orrs	r3, r1
 8005a6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a6c:	d10d      	bne.n	8005a8a <_dtoa_r+0xa82>
 8005a6e:	2b39      	cmp	r3, #57	; 0x39
 8005a70:	d029      	beq.n	8005ac6 <_dtoa_r+0xabe>
 8005a72:	f1b9 0f00 	cmp.w	r9, #0
 8005a76:	dd01      	ble.n	8005a7c <_dtoa_r+0xa74>
 8005a78:	9b06      	ldr	r3, [sp, #24]
 8005a7a:	3331      	adds	r3, #49	; 0x31
 8005a7c:	9a04      	ldr	r2, [sp, #16]
 8005a7e:	7013      	strb	r3, [r2, #0]
 8005a80:	e776      	b.n	8005970 <_dtoa_r+0x968>
 8005a82:	4630      	mov	r0, r6
 8005a84:	e7b9      	b.n	80059fa <_dtoa_r+0x9f2>
 8005a86:	2201      	movs	r2, #1
 8005a88:	e7e2      	b.n	8005a50 <_dtoa_r+0xa48>
 8005a8a:	f1b9 0f00 	cmp.w	r9, #0
 8005a8e:	db06      	blt.n	8005a9e <_dtoa_r+0xa96>
 8005a90:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005a92:	ea41 0909 	orr.w	r9, r1, r9
 8005a96:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005a98:	ea59 0101 	orrs.w	r1, r9, r1
 8005a9c:	d120      	bne.n	8005ae0 <_dtoa_r+0xad8>
 8005a9e:	2a00      	cmp	r2, #0
 8005aa0:	ddec      	ble.n	8005a7c <_dtoa_r+0xa74>
 8005aa2:	4659      	mov	r1, fp
 8005aa4:	2201      	movs	r2, #1
 8005aa6:	4628      	mov	r0, r5
 8005aa8:	9308      	str	r3, [sp, #32]
 8005aaa:	f000 fe93 	bl	80067d4 <__lshift>
 8005aae:	4621      	mov	r1, r4
 8005ab0:	4683      	mov	fp, r0
 8005ab2:	f000 feff 	bl	80068b4 <__mcmp>
 8005ab6:	2800      	cmp	r0, #0
 8005ab8:	9b08      	ldr	r3, [sp, #32]
 8005aba:	dc02      	bgt.n	8005ac2 <_dtoa_r+0xaba>
 8005abc:	d1de      	bne.n	8005a7c <_dtoa_r+0xa74>
 8005abe:	07da      	lsls	r2, r3, #31
 8005ac0:	d5dc      	bpl.n	8005a7c <_dtoa_r+0xa74>
 8005ac2:	2b39      	cmp	r3, #57	; 0x39
 8005ac4:	d1d8      	bne.n	8005a78 <_dtoa_r+0xa70>
 8005ac6:	2339      	movs	r3, #57	; 0x39
 8005ac8:	9a04      	ldr	r2, [sp, #16]
 8005aca:	7013      	strb	r3, [r2, #0]
 8005acc:	463b      	mov	r3, r7
 8005ace:	461f      	mov	r7, r3
 8005ad0:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005ad4:	3b01      	subs	r3, #1
 8005ad6:	2a39      	cmp	r2, #57	; 0x39
 8005ad8:	d050      	beq.n	8005b7c <_dtoa_r+0xb74>
 8005ada:	3201      	adds	r2, #1
 8005adc:	701a      	strb	r2, [r3, #0]
 8005ade:	e747      	b.n	8005970 <_dtoa_r+0x968>
 8005ae0:	2a00      	cmp	r2, #0
 8005ae2:	dd03      	ble.n	8005aec <_dtoa_r+0xae4>
 8005ae4:	2b39      	cmp	r3, #57	; 0x39
 8005ae6:	d0ee      	beq.n	8005ac6 <_dtoa_r+0xabe>
 8005ae8:	3301      	adds	r3, #1
 8005aea:	e7c7      	b.n	8005a7c <_dtoa_r+0xa74>
 8005aec:	9a08      	ldr	r2, [sp, #32]
 8005aee:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005af0:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005af4:	428a      	cmp	r2, r1
 8005af6:	d02a      	beq.n	8005b4e <_dtoa_r+0xb46>
 8005af8:	4659      	mov	r1, fp
 8005afa:	2300      	movs	r3, #0
 8005afc:	220a      	movs	r2, #10
 8005afe:	4628      	mov	r0, r5
 8005b00:	f000 fc72 	bl	80063e8 <__multadd>
 8005b04:	45b0      	cmp	r8, r6
 8005b06:	4683      	mov	fp, r0
 8005b08:	f04f 0300 	mov.w	r3, #0
 8005b0c:	f04f 020a 	mov.w	r2, #10
 8005b10:	4641      	mov	r1, r8
 8005b12:	4628      	mov	r0, r5
 8005b14:	d107      	bne.n	8005b26 <_dtoa_r+0xb1e>
 8005b16:	f000 fc67 	bl	80063e8 <__multadd>
 8005b1a:	4680      	mov	r8, r0
 8005b1c:	4606      	mov	r6, r0
 8005b1e:	9b08      	ldr	r3, [sp, #32]
 8005b20:	3301      	adds	r3, #1
 8005b22:	9308      	str	r3, [sp, #32]
 8005b24:	e775      	b.n	8005a12 <_dtoa_r+0xa0a>
 8005b26:	f000 fc5f 	bl	80063e8 <__multadd>
 8005b2a:	4631      	mov	r1, r6
 8005b2c:	4680      	mov	r8, r0
 8005b2e:	2300      	movs	r3, #0
 8005b30:	220a      	movs	r2, #10
 8005b32:	4628      	mov	r0, r5
 8005b34:	f000 fc58 	bl	80063e8 <__multadd>
 8005b38:	4606      	mov	r6, r0
 8005b3a:	e7f0      	b.n	8005b1e <_dtoa_r+0xb16>
 8005b3c:	f1b9 0f00 	cmp.w	r9, #0
 8005b40:	bfcc      	ite	gt
 8005b42:	464f      	movgt	r7, r9
 8005b44:	2701      	movle	r7, #1
 8005b46:	f04f 0800 	mov.w	r8, #0
 8005b4a:	9a03      	ldr	r2, [sp, #12]
 8005b4c:	4417      	add	r7, r2
 8005b4e:	4659      	mov	r1, fp
 8005b50:	2201      	movs	r2, #1
 8005b52:	4628      	mov	r0, r5
 8005b54:	9308      	str	r3, [sp, #32]
 8005b56:	f000 fe3d 	bl	80067d4 <__lshift>
 8005b5a:	4621      	mov	r1, r4
 8005b5c:	4683      	mov	fp, r0
 8005b5e:	f000 fea9 	bl	80068b4 <__mcmp>
 8005b62:	2800      	cmp	r0, #0
 8005b64:	dcb2      	bgt.n	8005acc <_dtoa_r+0xac4>
 8005b66:	d102      	bne.n	8005b6e <_dtoa_r+0xb66>
 8005b68:	9b08      	ldr	r3, [sp, #32]
 8005b6a:	07db      	lsls	r3, r3, #31
 8005b6c:	d4ae      	bmi.n	8005acc <_dtoa_r+0xac4>
 8005b6e:	463b      	mov	r3, r7
 8005b70:	461f      	mov	r7, r3
 8005b72:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005b76:	2a30      	cmp	r2, #48	; 0x30
 8005b78:	d0fa      	beq.n	8005b70 <_dtoa_r+0xb68>
 8005b7a:	e6f9      	b.n	8005970 <_dtoa_r+0x968>
 8005b7c:	9a03      	ldr	r2, [sp, #12]
 8005b7e:	429a      	cmp	r2, r3
 8005b80:	d1a5      	bne.n	8005ace <_dtoa_r+0xac6>
 8005b82:	2331      	movs	r3, #49	; 0x31
 8005b84:	f10a 0a01 	add.w	sl, sl, #1
 8005b88:	e779      	b.n	8005a7e <_dtoa_r+0xa76>
 8005b8a:	4b14      	ldr	r3, [pc, #80]	; (8005bdc <_dtoa_r+0xbd4>)
 8005b8c:	f7ff baa8 	b.w	80050e0 <_dtoa_r+0xd8>
 8005b90:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	f47f aa81 	bne.w	800509a <_dtoa_r+0x92>
 8005b98:	4b11      	ldr	r3, [pc, #68]	; (8005be0 <_dtoa_r+0xbd8>)
 8005b9a:	f7ff baa1 	b.w	80050e0 <_dtoa_r+0xd8>
 8005b9e:	f1b9 0f00 	cmp.w	r9, #0
 8005ba2:	dc03      	bgt.n	8005bac <_dtoa_r+0xba4>
 8005ba4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005ba6:	2b02      	cmp	r3, #2
 8005ba8:	f73f aecb 	bgt.w	8005942 <_dtoa_r+0x93a>
 8005bac:	9f03      	ldr	r7, [sp, #12]
 8005bae:	4621      	mov	r1, r4
 8005bb0:	4658      	mov	r0, fp
 8005bb2:	f7ff f99d 	bl	8004ef0 <quorem>
 8005bb6:	9a03      	ldr	r2, [sp, #12]
 8005bb8:	f100 0330 	add.w	r3, r0, #48	; 0x30
 8005bbc:	f807 3b01 	strb.w	r3, [r7], #1
 8005bc0:	1aba      	subs	r2, r7, r2
 8005bc2:	4591      	cmp	r9, r2
 8005bc4:	ddba      	ble.n	8005b3c <_dtoa_r+0xb34>
 8005bc6:	4659      	mov	r1, fp
 8005bc8:	2300      	movs	r3, #0
 8005bca:	220a      	movs	r2, #10
 8005bcc:	4628      	mov	r0, r5
 8005bce:	f000 fc0b 	bl	80063e8 <__multadd>
 8005bd2:	4683      	mov	fp, r0
 8005bd4:	e7eb      	b.n	8005bae <_dtoa_r+0xba6>
 8005bd6:	bf00      	nop
 8005bd8:	08007f90 	.word	0x08007f90
 8005bdc:	08007d94 	.word	0x08007d94
 8005be0:	08007f11 	.word	0x08007f11

08005be4 <rshift>:
 8005be4:	6903      	ldr	r3, [r0, #16]
 8005be6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bea:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8005bee:	f100 0414 	add.w	r4, r0, #20
 8005bf2:	ea4f 1261 	mov.w	r2, r1, asr #5
 8005bf6:	dd46      	ble.n	8005c86 <rshift+0xa2>
 8005bf8:	f011 011f 	ands.w	r1, r1, #31
 8005bfc:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8005c00:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8005c04:	d10c      	bne.n	8005c20 <rshift+0x3c>
 8005c06:	4629      	mov	r1, r5
 8005c08:	f100 0710 	add.w	r7, r0, #16
 8005c0c:	42b1      	cmp	r1, r6
 8005c0e:	d335      	bcc.n	8005c7c <rshift+0x98>
 8005c10:	1a9b      	subs	r3, r3, r2
 8005c12:	009b      	lsls	r3, r3, #2
 8005c14:	1eea      	subs	r2, r5, #3
 8005c16:	4296      	cmp	r6, r2
 8005c18:	bf38      	it	cc
 8005c1a:	2300      	movcc	r3, #0
 8005c1c:	4423      	add	r3, r4
 8005c1e:	e015      	b.n	8005c4c <rshift+0x68>
 8005c20:	46a1      	mov	r9, r4
 8005c22:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8005c26:	f1c1 0820 	rsb	r8, r1, #32
 8005c2a:	40cf      	lsrs	r7, r1
 8005c2c:	f105 0e04 	add.w	lr, r5, #4
 8005c30:	4576      	cmp	r6, lr
 8005c32:	46f4      	mov	ip, lr
 8005c34:	d816      	bhi.n	8005c64 <rshift+0x80>
 8005c36:	1a9a      	subs	r2, r3, r2
 8005c38:	0092      	lsls	r2, r2, #2
 8005c3a:	3a04      	subs	r2, #4
 8005c3c:	3501      	adds	r5, #1
 8005c3e:	42ae      	cmp	r6, r5
 8005c40:	bf38      	it	cc
 8005c42:	2200      	movcc	r2, #0
 8005c44:	18a3      	adds	r3, r4, r2
 8005c46:	50a7      	str	r7, [r4, r2]
 8005c48:	b107      	cbz	r7, 8005c4c <rshift+0x68>
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	42a3      	cmp	r3, r4
 8005c4e:	eba3 0204 	sub.w	r2, r3, r4
 8005c52:	bf08      	it	eq
 8005c54:	2300      	moveq	r3, #0
 8005c56:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8005c5a:	6102      	str	r2, [r0, #16]
 8005c5c:	bf08      	it	eq
 8005c5e:	6143      	streq	r3, [r0, #20]
 8005c60:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005c64:	f8dc c000 	ldr.w	ip, [ip]
 8005c68:	fa0c fc08 	lsl.w	ip, ip, r8
 8005c6c:	ea4c 0707 	orr.w	r7, ip, r7
 8005c70:	f849 7b04 	str.w	r7, [r9], #4
 8005c74:	f85e 7b04 	ldr.w	r7, [lr], #4
 8005c78:	40cf      	lsrs	r7, r1
 8005c7a:	e7d9      	b.n	8005c30 <rshift+0x4c>
 8005c7c:	f851 cb04 	ldr.w	ip, [r1], #4
 8005c80:	f847 cf04 	str.w	ip, [r7, #4]!
 8005c84:	e7c2      	b.n	8005c0c <rshift+0x28>
 8005c86:	4623      	mov	r3, r4
 8005c88:	e7e0      	b.n	8005c4c <rshift+0x68>

08005c8a <__hexdig_fun>:
 8005c8a:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8005c8e:	2b09      	cmp	r3, #9
 8005c90:	d802      	bhi.n	8005c98 <__hexdig_fun+0xe>
 8005c92:	3820      	subs	r0, #32
 8005c94:	b2c0      	uxtb	r0, r0
 8005c96:	4770      	bx	lr
 8005c98:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8005c9c:	2b05      	cmp	r3, #5
 8005c9e:	d801      	bhi.n	8005ca4 <__hexdig_fun+0x1a>
 8005ca0:	3847      	subs	r0, #71	; 0x47
 8005ca2:	e7f7      	b.n	8005c94 <__hexdig_fun+0xa>
 8005ca4:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8005ca8:	2b05      	cmp	r3, #5
 8005caa:	d801      	bhi.n	8005cb0 <__hexdig_fun+0x26>
 8005cac:	3827      	subs	r0, #39	; 0x27
 8005cae:	e7f1      	b.n	8005c94 <__hexdig_fun+0xa>
 8005cb0:	2000      	movs	r0, #0
 8005cb2:	4770      	bx	lr

08005cb4 <__gethex>:
 8005cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005cb8:	b08b      	sub	sp, #44	; 0x2c
 8005cba:	9305      	str	r3, [sp, #20]
 8005cbc:	4bb2      	ldr	r3, [pc, #712]	; (8005f88 <__gethex+0x2d4>)
 8005cbe:	9002      	str	r0, [sp, #8]
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	468b      	mov	fp, r1
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	4690      	mov	r8, r2
 8005cc8:	9303      	str	r3, [sp, #12]
 8005cca:	f7fa fa41 	bl	8000150 <strlen>
 8005cce:	4682      	mov	sl, r0
 8005cd0:	9b03      	ldr	r3, [sp, #12]
 8005cd2:	f8db 2000 	ldr.w	r2, [fp]
 8005cd6:	4403      	add	r3, r0
 8005cd8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8005cdc:	9306      	str	r3, [sp, #24]
 8005cde:	1c93      	adds	r3, r2, #2
 8005ce0:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 8005ce4:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 8005ce8:	32fe      	adds	r2, #254	; 0xfe
 8005cea:	18d1      	adds	r1, r2, r3
 8005cec:	461f      	mov	r7, r3
 8005cee:	f813 0b01 	ldrb.w	r0, [r3], #1
 8005cf2:	9101      	str	r1, [sp, #4]
 8005cf4:	2830      	cmp	r0, #48	; 0x30
 8005cf6:	d0f8      	beq.n	8005cea <__gethex+0x36>
 8005cf8:	f7ff ffc7 	bl	8005c8a <__hexdig_fun>
 8005cfc:	4604      	mov	r4, r0
 8005cfe:	2800      	cmp	r0, #0
 8005d00:	d13a      	bne.n	8005d78 <__gethex+0xc4>
 8005d02:	4652      	mov	r2, sl
 8005d04:	4638      	mov	r0, r7
 8005d06:	9903      	ldr	r1, [sp, #12]
 8005d08:	f001 fa26 	bl	8007158 <strncmp>
 8005d0c:	4605      	mov	r5, r0
 8005d0e:	2800      	cmp	r0, #0
 8005d10:	d166      	bne.n	8005de0 <__gethex+0x12c>
 8005d12:	f817 000a 	ldrb.w	r0, [r7, sl]
 8005d16:	eb07 060a 	add.w	r6, r7, sl
 8005d1a:	f7ff ffb6 	bl	8005c8a <__hexdig_fun>
 8005d1e:	2800      	cmp	r0, #0
 8005d20:	d060      	beq.n	8005de4 <__gethex+0x130>
 8005d22:	4633      	mov	r3, r6
 8005d24:	7818      	ldrb	r0, [r3, #0]
 8005d26:	461f      	mov	r7, r3
 8005d28:	2830      	cmp	r0, #48	; 0x30
 8005d2a:	f103 0301 	add.w	r3, r3, #1
 8005d2e:	d0f9      	beq.n	8005d24 <__gethex+0x70>
 8005d30:	f7ff ffab 	bl	8005c8a <__hexdig_fun>
 8005d34:	2301      	movs	r3, #1
 8005d36:	fab0 f480 	clz	r4, r0
 8005d3a:	4635      	mov	r5, r6
 8005d3c:	0964      	lsrs	r4, r4, #5
 8005d3e:	9301      	str	r3, [sp, #4]
 8005d40:	463a      	mov	r2, r7
 8005d42:	4616      	mov	r6, r2
 8005d44:	7830      	ldrb	r0, [r6, #0]
 8005d46:	3201      	adds	r2, #1
 8005d48:	f7ff ff9f 	bl	8005c8a <__hexdig_fun>
 8005d4c:	2800      	cmp	r0, #0
 8005d4e:	d1f8      	bne.n	8005d42 <__gethex+0x8e>
 8005d50:	4652      	mov	r2, sl
 8005d52:	4630      	mov	r0, r6
 8005d54:	9903      	ldr	r1, [sp, #12]
 8005d56:	f001 f9ff 	bl	8007158 <strncmp>
 8005d5a:	b980      	cbnz	r0, 8005d7e <__gethex+0xca>
 8005d5c:	b94d      	cbnz	r5, 8005d72 <__gethex+0xbe>
 8005d5e:	eb06 050a 	add.w	r5, r6, sl
 8005d62:	462a      	mov	r2, r5
 8005d64:	4616      	mov	r6, r2
 8005d66:	7830      	ldrb	r0, [r6, #0]
 8005d68:	3201      	adds	r2, #1
 8005d6a:	f7ff ff8e 	bl	8005c8a <__hexdig_fun>
 8005d6e:	2800      	cmp	r0, #0
 8005d70:	d1f8      	bne.n	8005d64 <__gethex+0xb0>
 8005d72:	1bad      	subs	r5, r5, r6
 8005d74:	00ad      	lsls	r5, r5, #2
 8005d76:	e004      	b.n	8005d82 <__gethex+0xce>
 8005d78:	2400      	movs	r4, #0
 8005d7a:	4625      	mov	r5, r4
 8005d7c:	e7e0      	b.n	8005d40 <__gethex+0x8c>
 8005d7e:	2d00      	cmp	r5, #0
 8005d80:	d1f7      	bne.n	8005d72 <__gethex+0xbe>
 8005d82:	7833      	ldrb	r3, [r6, #0]
 8005d84:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8005d88:	2b50      	cmp	r3, #80	; 0x50
 8005d8a:	d139      	bne.n	8005e00 <__gethex+0x14c>
 8005d8c:	7873      	ldrb	r3, [r6, #1]
 8005d8e:	2b2b      	cmp	r3, #43	; 0x2b
 8005d90:	d02a      	beq.n	8005de8 <__gethex+0x134>
 8005d92:	2b2d      	cmp	r3, #45	; 0x2d
 8005d94:	d02c      	beq.n	8005df0 <__gethex+0x13c>
 8005d96:	f04f 0900 	mov.w	r9, #0
 8005d9a:	1c71      	adds	r1, r6, #1
 8005d9c:	7808      	ldrb	r0, [r1, #0]
 8005d9e:	f7ff ff74 	bl	8005c8a <__hexdig_fun>
 8005da2:	1e43      	subs	r3, r0, #1
 8005da4:	b2db      	uxtb	r3, r3
 8005da6:	2b18      	cmp	r3, #24
 8005da8:	d82a      	bhi.n	8005e00 <__gethex+0x14c>
 8005daa:	f1a0 0210 	sub.w	r2, r0, #16
 8005dae:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 8005db2:	f7ff ff6a 	bl	8005c8a <__hexdig_fun>
 8005db6:	1e43      	subs	r3, r0, #1
 8005db8:	b2db      	uxtb	r3, r3
 8005dba:	2b18      	cmp	r3, #24
 8005dbc:	d91b      	bls.n	8005df6 <__gethex+0x142>
 8005dbe:	f1b9 0f00 	cmp.w	r9, #0
 8005dc2:	d000      	beq.n	8005dc6 <__gethex+0x112>
 8005dc4:	4252      	negs	r2, r2
 8005dc6:	4415      	add	r5, r2
 8005dc8:	f8cb 1000 	str.w	r1, [fp]
 8005dcc:	b1d4      	cbz	r4, 8005e04 <__gethex+0x150>
 8005dce:	9b01      	ldr	r3, [sp, #4]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	bf14      	ite	ne
 8005dd4:	2700      	movne	r7, #0
 8005dd6:	2706      	moveq	r7, #6
 8005dd8:	4638      	mov	r0, r7
 8005dda:	b00b      	add	sp, #44	; 0x2c
 8005ddc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005de0:	463e      	mov	r6, r7
 8005de2:	4625      	mov	r5, r4
 8005de4:	2401      	movs	r4, #1
 8005de6:	e7cc      	b.n	8005d82 <__gethex+0xce>
 8005de8:	f04f 0900 	mov.w	r9, #0
 8005dec:	1cb1      	adds	r1, r6, #2
 8005dee:	e7d5      	b.n	8005d9c <__gethex+0xe8>
 8005df0:	f04f 0901 	mov.w	r9, #1
 8005df4:	e7fa      	b.n	8005dec <__gethex+0x138>
 8005df6:	230a      	movs	r3, #10
 8005df8:	fb03 0202 	mla	r2, r3, r2, r0
 8005dfc:	3a10      	subs	r2, #16
 8005dfe:	e7d6      	b.n	8005dae <__gethex+0xfa>
 8005e00:	4631      	mov	r1, r6
 8005e02:	e7e1      	b.n	8005dc8 <__gethex+0x114>
 8005e04:	4621      	mov	r1, r4
 8005e06:	1bf3      	subs	r3, r6, r7
 8005e08:	3b01      	subs	r3, #1
 8005e0a:	2b07      	cmp	r3, #7
 8005e0c:	dc0a      	bgt.n	8005e24 <__gethex+0x170>
 8005e0e:	9802      	ldr	r0, [sp, #8]
 8005e10:	f000 fa88 	bl	8006324 <_Balloc>
 8005e14:	4604      	mov	r4, r0
 8005e16:	b940      	cbnz	r0, 8005e2a <__gethex+0x176>
 8005e18:	4602      	mov	r2, r0
 8005e1a:	21de      	movs	r1, #222	; 0xde
 8005e1c:	4b5b      	ldr	r3, [pc, #364]	; (8005f8c <__gethex+0x2d8>)
 8005e1e:	485c      	ldr	r0, [pc, #368]	; (8005f90 <__gethex+0x2dc>)
 8005e20:	f001 f9bc 	bl	800719c <__assert_func>
 8005e24:	3101      	adds	r1, #1
 8005e26:	105b      	asrs	r3, r3, #1
 8005e28:	e7ef      	b.n	8005e0a <__gethex+0x156>
 8005e2a:	f04f 0b00 	mov.w	fp, #0
 8005e2e:	f100 0914 	add.w	r9, r0, #20
 8005e32:	f1ca 0301 	rsb	r3, sl, #1
 8005e36:	f8cd 9010 	str.w	r9, [sp, #16]
 8005e3a:	f8cd b004 	str.w	fp, [sp, #4]
 8005e3e:	9308      	str	r3, [sp, #32]
 8005e40:	42b7      	cmp	r7, r6
 8005e42:	d33f      	bcc.n	8005ec4 <__gethex+0x210>
 8005e44:	9f04      	ldr	r7, [sp, #16]
 8005e46:	9b01      	ldr	r3, [sp, #4]
 8005e48:	f847 3b04 	str.w	r3, [r7], #4
 8005e4c:	eba7 0709 	sub.w	r7, r7, r9
 8005e50:	10bf      	asrs	r7, r7, #2
 8005e52:	6127      	str	r7, [r4, #16]
 8005e54:	4618      	mov	r0, r3
 8005e56:	f000 fb57 	bl	8006508 <__hi0bits>
 8005e5a:	017f      	lsls	r7, r7, #5
 8005e5c:	f8d8 6000 	ldr.w	r6, [r8]
 8005e60:	1a3f      	subs	r7, r7, r0
 8005e62:	42b7      	cmp	r7, r6
 8005e64:	dd62      	ble.n	8005f2c <__gethex+0x278>
 8005e66:	1bbf      	subs	r7, r7, r6
 8005e68:	4639      	mov	r1, r7
 8005e6a:	4620      	mov	r0, r4
 8005e6c:	f000 fef1 	bl	8006c52 <__any_on>
 8005e70:	4682      	mov	sl, r0
 8005e72:	b1a8      	cbz	r0, 8005ea0 <__gethex+0x1ec>
 8005e74:	f04f 0a01 	mov.w	sl, #1
 8005e78:	1e7b      	subs	r3, r7, #1
 8005e7a:	1159      	asrs	r1, r3, #5
 8005e7c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8005e80:	f003 021f 	and.w	r2, r3, #31
 8005e84:	fa0a f202 	lsl.w	r2, sl, r2
 8005e88:	420a      	tst	r2, r1
 8005e8a:	d009      	beq.n	8005ea0 <__gethex+0x1ec>
 8005e8c:	4553      	cmp	r3, sl
 8005e8e:	dd05      	ble.n	8005e9c <__gethex+0x1e8>
 8005e90:	4620      	mov	r0, r4
 8005e92:	1eb9      	subs	r1, r7, #2
 8005e94:	f000 fedd 	bl	8006c52 <__any_on>
 8005e98:	2800      	cmp	r0, #0
 8005e9a:	d144      	bne.n	8005f26 <__gethex+0x272>
 8005e9c:	f04f 0a02 	mov.w	sl, #2
 8005ea0:	4639      	mov	r1, r7
 8005ea2:	4620      	mov	r0, r4
 8005ea4:	f7ff fe9e 	bl	8005be4 <rshift>
 8005ea8:	443d      	add	r5, r7
 8005eaa:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8005eae:	42ab      	cmp	r3, r5
 8005eb0:	da4a      	bge.n	8005f48 <__gethex+0x294>
 8005eb2:	4621      	mov	r1, r4
 8005eb4:	9802      	ldr	r0, [sp, #8]
 8005eb6:	f000 fa75 	bl	80063a4 <_Bfree>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005ebe:	27a3      	movs	r7, #163	; 0xa3
 8005ec0:	6013      	str	r3, [r2, #0]
 8005ec2:	e789      	b.n	8005dd8 <__gethex+0x124>
 8005ec4:	1e73      	subs	r3, r6, #1
 8005ec6:	9a06      	ldr	r2, [sp, #24]
 8005ec8:	9307      	str	r3, [sp, #28]
 8005eca:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8005ece:	4293      	cmp	r3, r2
 8005ed0:	d019      	beq.n	8005f06 <__gethex+0x252>
 8005ed2:	f1bb 0f20 	cmp.w	fp, #32
 8005ed6:	d107      	bne.n	8005ee8 <__gethex+0x234>
 8005ed8:	9b04      	ldr	r3, [sp, #16]
 8005eda:	9a01      	ldr	r2, [sp, #4]
 8005edc:	f843 2b04 	str.w	r2, [r3], #4
 8005ee0:	9304      	str	r3, [sp, #16]
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	469b      	mov	fp, r3
 8005ee6:	9301      	str	r3, [sp, #4]
 8005ee8:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 8005eec:	f7ff fecd 	bl	8005c8a <__hexdig_fun>
 8005ef0:	9b01      	ldr	r3, [sp, #4]
 8005ef2:	f000 000f 	and.w	r0, r0, #15
 8005ef6:	fa00 f00b 	lsl.w	r0, r0, fp
 8005efa:	4303      	orrs	r3, r0
 8005efc:	9301      	str	r3, [sp, #4]
 8005efe:	f10b 0b04 	add.w	fp, fp, #4
 8005f02:	9b07      	ldr	r3, [sp, #28]
 8005f04:	e00d      	b.n	8005f22 <__gethex+0x26e>
 8005f06:	9a08      	ldr	r2, [sp, #32]
 8005f08:	1e73      	subs	r3, r6, #1
 8005f0a:	4413      	add	r3, r2
 8005f0c:	42bb      	cmp	r3, r7
 8005f0e:	d3e0      	bcc.n	8005ed2 <__gethex+0x21e>
 8005f10:	4618      	mov	r0, r3
 8005f12:	4652      	mov	r2, sl
 8005f14:	9903      	ldr	r1, [sp, #12]
 8005f16:	9309      	str	r3, [sp, #36]	; 0x24
 8005f18:	f001 f91e 	bl	8007158 <strncmp>
 8005f1c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f1e:	2800      	cmp	r0, #0
 8005f20:	d1d7      	bne.n	8005ed2 <__gethex+0x21e>
 8005f22:	461e      	mov	r6, r3
 8005f24:	e78c      	b.n	8005e40 <__gethex+0x18c>
 8005f26:	f04f 0a03 	mov.w	sl, #3
 8005f2a:	e7b9      	b.n	8005ea0 <__gethex+0x1ec>
 8005f2c:	da09      	bge.n	8005f42 <__gethex+0x28e>
 8005f2e:	1bf7      	subs	r7, r6, r7
 8005f30:	4621      	mov	r1, r4
 8005f32:	463a      	mov	r2, r7
 8005f34:	9802      	ldr	r0, [sp, #8]
 8005f36:	f000 fc4d 	bl	80067d4 <__lshift>
 8005f3a:	4604      	mov	r4, r0
 8005f3c:	1bed      	subs	r5, r5, r7
 8005f3e:	f100 0914 	add.w	r9, r0, #20
 8005f42:	f04f 0a00 	mov.w	sl, #0
 8005f46:	e7b0      	b.n	8005eaa <__gethex+0x1f6>
 8005f48:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8005f4c:	42a8      	cmp	r0, r5
 8005f4e:	dd72      	ble.n	8006036 <__gethex+0x382>
 8005f50:	1b45      	subs	r5, r0, r5
 8005f52:	42ae      	cmp	r6, r5
 8005f54:	dc35      	bgt.n	8005fc2 <__gethex+0x30e>
 8005f56:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8005f5a:	2b02      	cmp	r3, #2
 8005f5c:	d029      	beq.n	8005fb2 <__gethex+0x2fe>
 8005f5e:	2b03      	cmp	r3, #3
 8005f60:	d02b      	beq.n	8005fba <__gethex+0x306>
 8005f62:	2b01      	cmp	r3, #1
 8005f64:	d11c      	bne.n	8005fa0 <__gethex+0x2ec>
 8005f66:	42ae      	cmp	r6, r5
 8005f68:	d11a      	bne.n	8005fa0 <__gethex+0x2ec>
 8005f6a:	2e01      	cmp	r6, #1
 8005f6c:	d112      	bne.n	8005f94 <__gethex+0x2e0>
 8005f6e:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8005f72:	9a05      	ldr	r2, [sp, #20]
 8005f74:	2762      	movs	r7, #98	; 0x62
 8005f76:	6013      	str	r3, [r2, #0]
 8005f78:	2301      	movs	r3, #1
 8005f7a:	6123      	str	r3, [r4, #16]
 8005f7c:	f8c9 3000 	str.w	r3, [r9]
 8005f80:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8005f82:	601c      	str	r4, [r3, #0]
 8005f84:	e728      	b.n	8005dd8 <__gethex+0x124>
 8005f86:	bf00      	nop
 8005f88:	08008008 	.word	0x08008008
 8005f8c:	08007f90 	.word	0x08007f90
 8005f90:	08007fa1 	.word	0x08007fa1
 8005f94:	4620      	mov	r0, r4
 8005f96:	1e71      	subs	r1, r6, #1
 8005f98:	f000 fe5b 	bl	8006c52 <__any_on>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d1e6      	bne.n	8005f6e <__gethex+0x2ba>
 8005fa0:	4621      	mov	r1, r4
 8005fa2:	9802      	ldr	r0, [sp, #8]
 8005fa4:	f000 f9fe 	bl	80063a4 <_Bfree>
 8005fa8:	2300      	movs	r3, #0
 8005faa:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8005fac:	2750      	movs	r7, #80	; 0x50
 8005fae:	6013      	str	r3, [r2, #0]
 8005fb0:	e712      	b.n	8005dd8 <__gethex+0x124>
 8005fb2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d1f3      	bne.n	8005fa0 <__gethex+0x2ec>
 8005fb8:	e7d9      	b.n	8005f6e <__gethex+0x2ba>
 8005fba:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d1d6      	bne.n	8005f6e <__gethex+0x2ba>
 8005fc0:	e7ee      	b.n	8005fa0 <__gethex+0x2ec>
 8005fc2:	1e6f      	subs	r7, r5, #1
 8005fc4:	f1ba 0f00 	cmp.w	sl, #0
 8005fc8:	d132      	bne.n	8006030 <__gethex+0x37c>
 8005fca:	b127      	cbz	r7, 8005fd6 <__gethex+0x322>
 8005fcc:	4639      	mov	r1, r7
 8005fce:	4620      	mov	r0, r4
 8005fd0:	f000 fe3f 	bl	8006c52 <__any_on>
 8005fd4:	4682      	mov	sl, r0
 8005fd6:	2101      	movs	r1, #1
 8005fd8:	117b      	asrs	r3, r7, #5
 8005fda:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8005fde:	f007 071f 	and.w	r7, r7, #31
 8005fe2:	fa01 f707 	lsl.w	r7, r1, r7
 8005fe6:	421f      	tst	r7, r3
 8005fe8:	f04f 0702 	mov.w	r7, #2
 8005fec:	4629      	mov	r1, r5
 8005fee:	4620      	mov	r0, r4
 8005ff0:	bf18      	it	ne
 8005ff2:	f04a 0a02 	orrne.w	sl, sl, #2
 8005ff6:	1b76      	subs	r6, r6, r5
 8005ff8:	f7ff fdf4 	bl	8005be4 <rshift>
 8005ffc:	f8d8 5004 	ldr.w	r5, [r8, #4]
 8006000:	f1ba 0f00 	cmp.w	sl, #0
 8006004:	d048      	beq.n	8006098 <__gethex+0x3e4>
 8006006:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800600a:	2b02      	cmp	r3, #2
 800600c:	d015      	beq.n	800603a <__gethex+0x386>
 800600e:	2b03      	cmp	r3, #3
 8006010:	d017      	beq.n	8006042 <__gethex+0x38e>
 8006012:	2b01      	cmp	r3, #1
 8006014:	d109      	bne.n	800602a <__gethex+0x376>
 8006016:	f01a 0f02 	tst.w	sl, #2
 800601a:	d006      	beq.n	800602a <__gethex+0x376>
 800601c:	f8d9 0000 	ldr.w	r0, [r9]
 8006020:	ea4a 0a00 	orr.w	sl, sl, r0
 8006024:	f01a 0f01 	tst.w	sl, #1
 8006028:	d10e      	bne.n	8006048 <__gethex+0x394>
 800602a:	f047 0710 	orr.w	r7, r7, #16
 800602e:	e033      	b.n	8006098 <__gethex+0x3e4>
 8006030:	f04f 0a01 	mov.w	sl, #1
 8006034:	e7cf      	b.n	8005fd6 <__gethex+0x322>
 8006036:	2701      	movs	r7, #1
 8006038:	e7e2      	b.n	8006000 <__gethex+0x34c>
 800603a:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800603c:	f1c3 0301 	rsb	r3, r3, #1
 8006040:	9315      	str	r3, [sp, #84]	; 0x54
 8006042:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006044:	2b00      	cmp	r3, #0
 8006046:	d0f0      	beq.n	800602a <__gethex+0x376>
 8006048:	f04f 0c00 	mov.w	ip, #0
 800604c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8006050:	f104 0314 	add.w	r3, r4, #20
 8006054:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 8006058:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800605c:	4618      	mov	r0, r3
 800605e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006062:	f1b2 3fff 	cmp.w	r2, #4294967295
 8006066:	d01c      	beq.n	80060a2 <__gethex+0x3ee>
 8006068:	3201      	adds	r2, #1
 800606a:	6002      	str	r2, [r0, #0]
 800606c:	2f02      	cmp	r7, #2
 800606e:	f104 0314 	add.w	r3, r4, #20
 8006072:	d13d      	bne.n	80060f0 <__gethex+0x43c>
 8006074:	f8d8 2000 	ldr.w	r2, [r8]
 8006078:	3a01      	subs	r2, #1
 800607a:	42b2      	cmp	r2, r6
 800607c:	d10a      	bne.n	8006094 <__gethex+0x3e0>
 800607e:	2201      	movs	r2, #1
 8006080:	1171      	asrs	r1, r6, #5
 8006082:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8006086:	f006 061f 	and.w	r6, r6, #31
 800608a:	fa02 f606 	lsl.w	r6, r2, r6
 800608e:	421e      	tst	r6, r3
 8006090:	bf18      	it	ne
 8006092:	4617      	movne	r7, r2
 8006094:	f047 0720 	orr.w	r7, r7, #32
 8006098:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800609a:	601c      	str	r4, [r3, #0]
 800609c:	9b05      	ldr	r3, [sp, #20]
 800609e:	601d      	str	r5, [r3, #0]
 80060a0:	e69a      	b.n	8005dd8 <__gethex+0x124>
 80060a2:	4299      	cmp	r1, r3
 80060a4:	f843 cc04 	str.w	ip, [r3, #-4]
 80060a8:	d8d8      	bhi.n	800605c <__gethex+0x3a8>
 80060aa:	68a3      	ldr	r3, [r4, #8]
 80060ac:	459b      	cmp	fp, r3
 80060ae:	db17      	blt.n	80060e0 <__gethex+0x42c>
 80060b0:	6861      	ldr	r1, [r4, #4]
 80060b2:	9802      	ldr	r0, [sp, #8]
 80060b4:	3101      	adds	r1, #1
 80060b6:	f000 f935 	bl	8006324 <_Balloc>
 80060ba:	4681      	mov	r9, r0
 80060bc:	b918      	cbnz	r0, 80060c6 <__gethex+0x412>
 80060be:	4602      	mov	r2, r0
 80060c0:	2184      	movs	r1, #132	; 0x84
 80060c2:	4b19      	ldr	r3, [pc, #100]	; (8006128 <__gethex+0x474>)
 80060c4:	e6ab      	b.n	8005e1e <__gethex+0x16a>
 80060c6:	6922      	ldr	r2, [r4, #16]
 80060c8:	f104 010c 	add.w	r1, r4, #12
 80060cc:	3202      	adds	r2, #2
 80060ce:	0092      	lsls	r2, r2, #2
 80060d0:	300c      	adds	r0, #12
 80060d2:	f000 f919 	bl	8006308 <memcpy>
 80060d6:	4621      	mov	r1, r4
 80060d8:	9802      	ldr	r0, [sp, #8]
 80060da:	f000 f963 	bl	80063a4 <_Bfree>
 80060de:	464c      	mov	r4, r9
 80060e0:	6923      	ldr	r3, [r4, #16]
 80060e2:	1c5a      	adds	r2, r3, #1
 80060e4:	6122      	str	r2, [r4, #16]
 80060e6:	2201      	movs	r2, #1
 80060e8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80060ec:	615a      	str	r2, [r3, #20]
 80060ee:	e7bd      	b.n	800606c <__gethex+0x3b8>
 80060f0:	6922      	ldr	r2, [r4, #16]
 80060f2:	455a      	cmp	r2, fp
 80060f4:	dd0b      	ble.n	800610e <__gethex+0x45a>
 80060f6:	2101      	movs	r1, #1
 80060f8:	4620      	mov	r0, r4
 80060fa:	f7ff fd73 	bl	8005be4 <rshift>
 80060fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006102:	3501      	adds	r5, #1
 8006104:	42ab      	cmp	r3, r5
 8006106:	f6ff aed4 	blt.w	8005eb2 <__gethex+0x1fe>
 800610a:	2701      	movs	r7, #1
 800610c:	e7c2      	b.n	8006094 <__gethex+0x3e0>
 800610e:	f016 061f 	ands.w	r6, r6, #31
 8006112:	d0fa      	beq.n	800610a <__gethex+0x456>
 8006114:	4453      	add	r3, sl
 8006116:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800611a:	f000 f9f5 	bl	8006508 <__hi0bits>
 800611e:	f1c6 0620 	rsb	r6, r6, #32
 8006122:	42b0      	cmp	r0, r6
 8006124:	dbe7      	blt.n	80060f6 <__gethex+0x442>
 8006126:	e7f0      	b.n	800610a <__gethex+0x456>
 8006128:	08007f90 	.word	0x08007f90

0800612c <L_shift>:
 800612c:	f1c2 0208 	rsb	r2, r2, #8
 8006130:	0092      	lsls	r2, r2, #2
 8006132:	b570      	push	{r4, r5, r6, lr}
 8006134:	f1c2 0620 	rsb	r6, r2, #32
 8006138:	6843      	ldr	r3, [r0, #4]
 800613a:	6804      	ldr	r4, [r0, #0]
 800613c:	fa03 f506 	lsl.w	r5, r3, r6
 8006140:	432c      	orrs	r4, r5
 8006142:	40d3      	lsrs	r3, r2
 8006144:	6004      	str	r4, [r0, #0]
 8006146:	f840 3f04 	str.w	r3, [r0, #4]!
 800614a:	4288      	cmp	r0, r1
 800614c:	d3f4      	bcc.n	8006138 <L_shift+0xc>
 800614e:	bd70      	pop	{r4, r5, r6, pc}

08006150 <__match>:
 8006150:	b530      	push	{r4, r5, lr}
 8006152:	6803      	ldr	r3, [r0, #0]
 8006154:	3301      	adds	r3, #1
 8006156:	f811 4b01 	ldrb.w	r4, [r1], #1
 800615a:	b914      	cbnz	r4, 8006162 <__match+0x12>
 800615c:	6003      	str	r3, [r0, #0]
 800615e:	2001      	movs	r0, #1
 8006160:	bd30      	pop	{r4, r5, pc}
 8006162:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006166:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800616a:	2d19      	cmp	r5, #25
 800616c:	bf98      	it	ls
 800616e:	3220      	addls	r2, #32
 8006170:	42a2      	cmp	r2, r4
 8006172:	d0f0      	beq.n	8006156 <__match+0x6>
 8006174:	2000      	movs	r0, #0
 8006176:	e7f3      	b.n	8006160 <__match+0x10>

08006178 <__hexnan>:
 8006178:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800617c:	2500      	movs	r5, #0
 800617e:	680b      	ldr	r3, [r1, #0]
 8006180:	4682      	mov	sl, r0
 8006182:	115e      	asrs	r6, r3, #5
 8006184:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8006188:	f013 031f 	ands.w	r3, r3, #31
 800618c:	bf18      	it	ne
 800618e:	3604      	addne	r6, #4
 8006190:	1f37      	subs	r7, r6, #4
 8006192:	46b9      	mov	r9, r7
 8006194:	463c      	mov	r4, r7
 8006196:	46ab      	mov	fp, r5
 8006198:	b087      	sub	sp, #28
 800619a:	4690      	mov	r8, r2
 800619c:	6802      	ldr	r2, [r0, #0]
 800619e:	9301      	str	r3, [sp, #4]
 80061a0:	f846 5c04 	str.w	r5, [r6, #-4]
 80061a4:	9502      	str	r5, [sp, #8]
 80061a6:	7851      	ldrb	r1, [r2, #1]
 80061a8:	1c53      	adds	r3, r2, #1
 80061aa:	9303      	str	r3, [sp, #12]
 80061ac:	b341      	cbz	r1, 8006200 <__hexnan+0x88>
 80061ae:	4608      	mov	r0, r1
 80061b0:	9205      	str	r2, [sp, #20]
 80061b2:	9104      	str	r1, [sp, #16]
 80061b4:	f7ff fd69 	bl	8005c8a <__hexdig_fun>
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d14f      	bne.n	800625c <__hexnan+0xe4>
 80061bc:	9904      	ldr	r1, [sp, #16]
 80061be:	9a05      	ldr	r2, [sp, #20]
 80061c0:	2920      	cmp	r1, #32
 80061c2:	d818      	bhi.n	80061f6 <__hexnan+0x7e>
 80061c4:	9b02      	ldr	r3, [sp, #8]
 80061c6:	459b      	cmp	fp, r3
 80061c8:	dd13      	ble.n	80061f2 <__hexnan+0x7a>
 80061ca:	454c      	cmp	r4, r9
 80061cc:	d206      	bcs.n	80061dc <__hexnan+0x64>
 80061ce:	2d07      	cmp	r5, #7
 80061d0:	dc04      	bgt.n	80061dc <__hexnan+0x64>
 80061d2:	462a      	mov	r2, r5
 80061d4:	4649      	mov	r1, r9
 80061d6:	4620      	mov	r0, r4
 80061d8:	f7ff ffa8 	bl	800612c <L_shift>
 80061dc:	4544      	cmp	r4, r8
 80061de:	d950      	bls.n	8006282 <__hexnan+0x10a>
 80061e0:	2300      	movs	r3, #0
 80061e2:	f1a4 0904 	sub.w	r9, r4, #4
 80061e6:	f844 3c04 	str.w	r3, [r4, #-4]
 80061ea:	461d      	mov	r5, r3
 80061ec:	464c      	mov	r4, r9
 80061ee:	f8cd b008 	str.w	fp, [sp, #8]
 80061f2:	9a03      	ldr	r2, [sp, #12]
 80061f4:	e7d7      	b.n	80061a6 <__hexnan+0x2e>
 80061f6:	2929      	cmp	r1, #41	; 0x29
 80061f8:	d156      	bne.n	80062a8 <__hexnan+0x130>
 80061fa:	3202      	adds	r2, #2
 80061fc:	f8ca 2000 	str.w	r2, [sl]
 8006200:	f1bb 0f00 	cmp.w	fp, #0
 8006204:	d050      	beq.n	80062a8 <__hexnan+0x130>
 8006206:	454c      	cmp	r4, r9
 8006208:	d206      	bcs.n	8006218 <__hexnan+0xa0>
 800620a:	2d07      	cmp	r5, #7
 800620c:	dc04      	bgt.n	8006218 <__hexnan+0xa0>
 800620e:	462a      	mov	r2, r5
 8006210:	4649      	mov	r1, r9
 8006212:	4620      	mov	r0, r4
 8006214:	f7ff ff8a 	bl	800612c <L_shift>
 8006218:	4544      	cmp	r4, r8
 800621a:	d934      	bls.n	8006286 <__hexnan+0x10e>
 800621c:	4623      	mov	r3, r4
 800621e:	f1a8 0204 	sub.w	r2, r8, #4
 8006222:	f853 1b04 	ldr.w	r1, [r3], #4
 8006226:	429f      	cmp	r7, r3
 8006228:	f842 1f04 	str.w	r1, [r2, #4]!
 800622c:	d2f9      	bcs.n	8006222 <__hexnan+0xaa>
 800622e:	1b3b      	subs	r3, r7, r4
 8006230:	f023 0303 	bic.w	r3, r3, #3
 8006234:	3304      	adds	r3, #4
 8006236:	3401      	adds	r4, #1
 8006238:	3e03      	subs	r6, #3
 800623a:	42b4      	cmp	r4, r6
 800623c:	bf88      	it	hi
 800623e:	2304      	movhi	r3, #4
 8006240:	2200      	movs	r2, #0
 8006242:	4443      	add	r3, r8
 8006244:	f843 2b04 	str.w	r2, [r3], #4
 8006248:	429f      	cmp	r7, r3
 800624a:	d2fb      	bcs.n	8006244 <__hexnan+0xcc>
 800624c:	683b      	ldr	r3, [r7, #0]
 800624e:	b91b      	cbnz	r3, 8006258 <__hexnan+0xe0>
 8006250:	4547      	cmp	r7, r8
 8006252:	d127      	bne.n	80062a4 <__hexnan+0x12c>
 8006254:	2301      	movs	r3, #1
 8006256:	603b      	str	r3, [r7, #0]
 8006258:	2005      	movs	r0, #5
 800625a:	e026      	b.n	80062aa <__hexnan+0x132>
 800625c:	3501      	adds	r5, #1
 800625e:	2d08      	cmp	r5, #8
 8006260:	f10b 0b01 	add.w	fp, fp, #1
 8006264:	dd06      	ble.n	8006274 <__hexnan+0xfc>
 8006266:	4544      	cmp	r4, r8
 8006268:	d9c3      	bls.n	80061f2 <__hexnan+0x7a>
 800626a:	2300      	movs	r3, #0
 800626c:	2501      	movs	r5, #1
 800626e:	f844 3c04 	str.w	r3, [r4, #-4]
 8006272:	3c04      	subs	r4, #4
 8006274:	6822      	ldr	r2, [r4, #0]
 8006276:	f000 000f 	and.w	r0, r0, #15
 800627a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800627e:	6022      	str	r2, [r4, #0]
 8006280:	e7b7      	b.n	80061f2 <__hexnan+0x7a>
 8006282:	2508      	movs	r5, #8
 8006284:	e7b5      	b.n	80061f2 <__hexnan+0x7a>
 8006286:	9b01      	ldr	r3, [sp, #4]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d0df      	beq.n	800624c <__hexnan+0xd4>
 800628c:	f04f 32ff 	mov.w	r2, #4294967295
 8006290:	f1c3 0320 	rsb	r3, r3, #32
 8006294:	fa22 f303 	lsr.w	r3, r2, r3
 8006298:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800629c:	401a      	ands	r2, r3
 800629e:	f846 2c04 	str.w	r2, [r6, #-4]
 80062a2:	e7d3      	b.n	800624c <__hexnan+0xd4>
 80062a4:	3f04      	subs	r7, #4
 80062a6:	e7d1      	b.n	800624c <__hexnan+0xd4>
 80062a8:	2004      	movs	r0, #4
 80062aa:	b007      	add	sp, #28
 80062ac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080062b0 <_localeconv_r>:
 80062b0:	4800      	ldr	r0, [pc, #0]	; (80062b4 <_localeconv_r+0x4>)
 80062b2:	4770      	bx	lr
 80062b4:	20000164 	.word	0x20000164

080062b8 <malloc>:
 80062b8:	4b02      	ldr	r3, [pc, #8]	; (80062c4 <malloc+0xc>)
 80062ba:	4601      	mov	r1, r0
 80062bc:	6818      	ldr	r0, [r3, #0]
 80062be:	f000 bd65 	b.w	8006d8c <_malloc_r>
 80062c2:	bf00      	nop
 80062c4:	2000000c 	.word	0x2000000c

080062c8 <__ascii_mbtowc>:
 80062c8:	b082      	sub	sp, #8
 80062ca:	b901      	cbnz	r1, 80062ce <__ascii_mbtowc+0x6>
 80062cc:	a901      	add	r1, sp, #4
 80062ce:	b142      	cbz	r2, 80062e2 <__ascii_mbtowc+0x1a>
 80062d0:	b14b      	cbz	r3, 80062e6 <__ascii_mbtowc+0x1e>
 80062d2:	7813      	ldrb	r3, [r2, #0]
 80062d4:	600b      	str	r3, [r1, #0]
 80062d6:	7812      	ldrb	r2, [r2, #0]
 80062d8:	1e10      	subs	r0, r2, #0
 80062da:	bf18      	it	ne
 80062dc:	2001      	movne	r0, #1
 80062de:	b002      	add	sp, #8
 80062e0:	4770      	bx	lr
 80062e2:	4610      	mov	r0, r2
 80062e4:	e7fb      	b.n	80062de <__ascii_mbtowc+0x16>
 80062e6:	f06f 0001 	mvn.w	r0, #1
 80062ea:	e7f8      	b.n	80062de <__ascii_mbtowc+0x16>

080062ec <memchr>:
 80062ec:	4603      	mov	r3, r0
 80062ee:	b510      	push	{r4, lr}
 80062f0:	b2c9      	uxtb	r1, r1
 80062f2:	4402      	add	r2, r0
 80062f4:	4293      	cmp	r3, r2
 80062f6:	4618      	mov	r0, r3
 80062f8:	d101      	bne.n	80062fe <memchr+0x12>
 80062fa:	2000      	movs	r0, #0
 80062fc:	e003      	b.n	8006306 <memchr+0x1a>
 80062fe:	7804      	ldrb	r4, [r0, #0]
 8006300:	3301      	adds	r3, #1
 8006302:	428c      	cmp	r4, r1
 8006304:	d1f6      	bne.n	80062f4 <memchr+0x8>
 8006306:	bd10      	pop	{r4, pc}

08006308 <memcpy>:
 8006308:	440a      	add	r2, r1
 800630a:	4291      	cmp	r1, r2
 800630c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006310:	d100      	bne.n	8006314 <memcpy+0xc>
 8006312:	4770      	bx	lr
 8006314:	b510      	push	{r4, lr}
 8006316:	f811 4b01 	ldrb.w	r4, [r1], #1
 800631a:	4291      	cmp	r1, r2
 800631c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006320:	d1f9      	bne.n	8006316 <memcpy+0xe>
 8006322:	bd10      	pop	{r4, pc}

08006324 <_Balloc>:
 8006324:	b570      	push	{r4, r5, r6, lr}
 8006326:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006328:	4604      	mov	r4, r0
 800632a:	460d      	mov	r5, r1
 800632c:	b976      	cbnz	r6, 800634c <_Balloc+0x28>
 800632e:	2010      	movs	r0, #16
 8006330:	f7ff ffc2 	bl	80062b8 <malloc>
 8006334:	4602      	mov	r2, r0
 8006336:	6260      	str	r0, [r4, #36]	; 0x24
 8006338:	b920      	cbnz	r0, 8006344 <_Balloc+0x20>
 800633a:	2166      	movs	r1, #102	; 0x66
 800633c:	4b17      	ldr	r3, [pc, #92]	; (800639c <_Balloc+0x78>)
 800633e:	4818      	ldr	r0, [pc, #96]	; (80063a0 <_Balloc+0x7c>)
 8006340:	f000 ff2c 	bl	800719c <__assert_func>
 8006344:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006348:	6006      	str	r6, [r0, #0]
 800634a:	60c6      	str	r6, [r0, #12]
 800634c:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800634e:	68f3      	ldr	r3, [r6, #12]
 8006350:	b183      	cbz	r3, 8006374 <_Balloc+0x50>
 8006352:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006354:	68db      	ldr	r3, [r3, #12]
 8006356:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800635a:	b9b8      	cbnz	r0, 800638c <_Balloc+0x68>
 800635c:	2101      	movs	r1, #1
 800635e:	fa01 f605 	lsl.w	r6, r1, r5
 8006362:	1d72      	adds	r2, r6, #5
 8006364:	4620      	mov	r0, r4
 8006366:	0092      	lsls	r2, r2, #2
 8006368:	f000 fc94 	bl	8006c94 <_calloc_r>
 800636c:	b160      	cbz	r0, 8006388 <_Balloc+0x64>
 800636e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006372:	e00e      	b.n	8006392 <_Balloc+0x6e>
 8006374:	2221      	movs	r2, #33	; 0x21
 8006376:	2104      	movs	r1, #4
 8006378:	4620      	mov	r0, r4
 800637a:	f000 fc8b 	bl	8006c94 <_calloc_r>
 800637e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006380:	60f0      	str	r0, [r6, #12]
 8006382:	68db      	ldr	r3, [r3, #12]
 8006384:	2b00      	cmp	r3, #0
 8006386:	d1e4      	bne.n	8006352 <_Balloc+0x2e>
 8006388:	2000      	movs	r0, #0
 800638a:	bd70      	pop	{r4, r5, r6, pc}
 800638c:	6802      	ldr	r2, [r0, #0]
 800638e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006392:	2300      	movs	r3, #0
 8006394:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006398:	e7f7      	b.n	800638a <_Balloc+0x66>
 800639a:	bf00      	nop
 800639c:	08007f1e 	.word	0x08007f1e
 80063a0:	0800801c 	.word	0x0800801c

080063a4 <_Bfree>:
 80063a4:	b570      	push	{r4, r5, r6, lr}
 80063a6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80063a8:	4605      	mov	r5, r0
 80063aa:	460c      	mov	r4, r1
 80063ac:	b976      	cbnz	r6, 80063cc <_Bfree+0x28>
 80063ae:	2010      	movs	r0, #16
 80063b0:	f7ff ff82 	bl	80062b8 <malloc>
 80063b4:	4602      	mov	r2, r0
 80063b6:	6268      	str	r0, [r5, #36]	; 0x24
 80063b8:	b920      	cbnz	r0, 80063c4 <_Bfree+0x20>
 80063ba:	218a      	movs	r1, #138	; 0x8a
 80063bc:	4b08      	ldr	r3, [pc, #32]	; (80063e0 <_Bfree+0x3c>)
 80063be:	4809      	ldr	r0, [pc, #36]	; (80063e4 <_Bfree+0x40>)
 80063c0:	f000 feec 	bl	800719c <__assert_func>
 80063c4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80063c8:	6006      	str	r6, [r0, #0]
 80063ca:	60c6      	str	r6, [r0, #12]
 80063cc:	b13c      	cbz	r4, 80063de <_Bfree+0x3a>
 80063ce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80063d0:	6862      	ldr	r2, [r4, #4]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80063d8:	6021      	str	r1, [r4, #0]
 80063da:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80063de:	bd70      	pop	{r4, r5, r6, pc}
 80063e0:	08007f1e 	.word	0x08007f1e
 80063e4:	0800801c 	.word	0x0800801c

080063e8 <__multadd>:
 80063e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ec:	4607      	mov	r7, r0
 80063ee:	460c      	mov	r4, r1
 80063f0:	461e      	mov	r6, r3
 80063f2:	2000      	movs	r0, #0
 80063f4:	690d      	ldr	r5, [r1, #16]
 80063f6:	f101 0c14 	add.w	ip, r1, #20
 80063fa:	f8dc 3000 	ldr.w	r3, [ip]
 80063fe:	3001      	adds	r0, #1
 8006400:	b299      	uxth	r1, r3
 8006402:	fb02 6101 	mla	r1, r2, r1, r6
 8006406:	0c1e      	lsrs	r6, r3, #16
 8006408:	0c0b      	lsrs	r3, r1, #16
 800640a:	fb02 3306 	mla	r3, r2, r6, r3
 800640e:	b289      	uxth	r1, r1
 8006410:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006414:	4285      	cmp	r5, r0
 8006416:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800641a:	f84c 1b04 	str.w	r1, [ip], #4
 800641e:	dcec      	bgt.n	80063fa <__multadd+0x12>
 8006420:	b30e      	cbz	r6, 8006466 <__multadd+0x7e>
 8006422:	68a3      	ldr	r3, [r4, #8]
 8006424:	42ab      	cmp	r3, r5
 8006426:	dc19      	bgt.n	800645c <__multadd+0x74>
 8006428:	6861      	ldr	r1, [r4, #4]
 800642a:	4638      	mov	r0, r7
 800642c:	3101      	adds	r1, #1
 800642e:	f7ff ff79 	bl	8006324 <_Balloc>
 8006432:	4680      	mov	r8, r0
 8006434:	b928      	cbnz	r0, 8006442 <__multadd+0x5a>
 8006436:	4602      	mov	r2, r0
 8006438:	21b5      	movs	r1, #181	; 0xb5
 800643a:	4b0c      	ldr	r3, [pc, #48]	; (800646c <__multadd+0x84>)
 800643c:	480c      	ldr	r0, [pc, #48]	; (8006470 <__multadd+0x88>)
 800643e:	f000 fead 	bl	800719c <__assert_func>
 8006442:	6922      	ldr	r2, [r4, #16]
 8006444:	f104 010c 	add.w	r1, r4, #12
 8006448:	3202      	adds	r2, #2
 800644a:	0092      	lsls	r2, r2, #2
 800644c:	300c      	adds	r0, #12
 800644e:	f7ff ff5b 	bl	8006308 <memcpy>
 8006452:	4621      	mov	r1, r4
 8006454:	4638      	mov	r0, r7
 8006456:	f7ff ffa5 	bl	80063a4 <_Bfree>
 800645a:	4644      	mov	r4, r8
 800645c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006460:	3501      	adds	r5, #1
 8006462:	615e      	str	r6, [r3, #20]
 8006464:	6125      	str	r5, [r4, #16]
 8006466:	4620      	mov	r0, r4
 8006468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800646c:	08007f90 	.word	0x08007f90
 8006470:	0800801c 	.word	0x0800801c

08006474 <__s2b>:
 8006474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006478:	4615      	mov	r5, r2
 800647a:	2209      	movs	r2, #9
 800647c:	461f      	mov	r7, r3
 800647e:	3308      	adds	r3, #8
 8006480:	460c      	mov	r4, r1
 8006482:	fb93 f3f2 	sdiv	r3, r3, r2
 8006486:	4606      	mov	r6, r0
 8006488:	2201      	movs	r2, #1
 800648a:	2100      	movs	r1, #0
 800648c:	429a      	cmp	r2, r3
 800648e:	db09      	blt.n	80064a4 <__s2b+0x30>
 8006490:	4630      	mov	r0, r6
 8006492:	f7ff ff47 	bl	8006324 <_Balloc>
 8006496:	b940      	cbnz	r0, 80064aa <__s2b+0x36>
 8006498:	4602      	mov	r2, r0
 800649a:	21ce      	movs	r1, #206	; 0xce
 800649c:	4b18      	ldr	r3, [pc, #96]	; (8006500 <__s2b+0x8c>)
 800649e:	4819      	ldr	r0, [pc, #100]	; (8006504 <__s2b+0x90>)
 80064a0:	f000 fe7c 	bl	800719c <__assert_func>
 80064a4:	0052      	lsls	r2, r2, #1
 80064a6:	3101      	adds	r1, #1
 80064a8:	e7f0      	b.n	800648c <__s2b+0x18>
 80064aa:	9b08      	ldr	r3, [sp, #32]
 80064ac:	2d09      	cmp	r5, #9
 80064ae:	6143      	str	r3, [r0, #20]
 80064b0:	f04f 0301 	mov.w	r3, #1
 80064b4:	6103      	str	r3, [r0, #16]
 80064b6:	dd16      	ble.n	80064e6 <__s2b+0x72>
 80064b8:	f104 0909 	add.w	r9, r4, #9
 80064bc:	46c8      	mov	r8, r9
 80064be:	442c      	add	r4, r5
 80064c0:	f818 3b01 	ldrb.w	r3, [r8], #1
 80064c4:	4601      	mov	r1, r0
 80064c6:	220a      	movs	r2, #10
 80064c8:	4630      	mov	r0, r6
 80064ca:	3b30      	subs	r3, #48	; 0x30
 80064cc:	f7ff ff8c 	bl	80063e8 <__multadd>
 80064d0:	45a0      	cmp	r8, r4
 80064d2:	d1f5      	bne.n	80064c0 <__s2b+0x4c>
 80064d4:	f1a5 0408 	sub.w	r4, r5, #8
 80064d8:	444c      	add	r4, r9
 80064da:	1b2d      	subs	r5, r5, r4
 80064dc:	1963      	adds	r3, r4, r5
 80064de:	42bb      	cmp	r3, r7
 80064e0:	db04      	blt.n	80064ec <__s2b+0x78>
 80064e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80064e6:	2509      	movs	r5, #9
 80064e8:	340a      	adds	r4, #10
 80064ea:	e7f6      	b.n	80064da <__s2b+0x66>
 80064ec:	f814 3b01 	ldrb.w	r3, [r4], #1
 80064f0:	4601      	mov	r1, r0
 80064f2:	220a      	movs	r2, #10
 80064f4:	4630      	mov	r0, r6
 80064f6:	3b30      	subs	r3, #48	; 0x30
 80064f8:	f7ff ff76 	bl	80063e8 <__multadd>
 80064fc:	e7ee      	b.n	80064dc <__s2b+0x68>
 80064fe:	bf00      	nop
 8006500:	08007f90 	.word	0x08007f90
 8006504:	0800801c 	.word	0x0800801c

08006508 <__hi0bits>:
 8006508:	0c02      	lsrs	r2, r0, #16
 800650a:	0412      	lsls	r2, r2, #16
 800650c:	4603      	mov	r3, r0
 800650e:	b9ca      	cbnz	r2, 8006544 <__hi0bits+0x3c>
 8006510:	0403      	lsls	r3, r0, #16
 8006512:	2010      	movs	r0, #16
 8006514:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006518:	bf04      	itt	eq
 800651a:	021b      	lsleq	r3, r3, #8
 800651c:	3008      	addeq	r0, #8
 800651e:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006522:	bf04      	itt	eq
 8006524:	011b      	lsleq	r3, r3, #4
 8006526:	3004      	addeq	r0, #4
 8006528:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800652c:	bf04      	itt	eq
 800652e:	009b      	lsleq	r3, r3, #2
 8006530:	3002      	addeq	r0, #2
 8006532:	2b00      	cmp	r3, #0
 8006534:	db05      	blt.n	8006542 <__hi0bits+0x3a>
 8006536:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 800653a:	f100 0001 	add.w	r0, r0, #1
 800653e:	bf08      	it	eq
 8006540:	2020      	moveq	r0, #32
 8006542:	4770      	bx	lr
 8006544:	2000      	movs	r0, #0
 8006546:	e7e5      	b.n	8006514 <__hi0bits+0xc>

08006548 <__lo0bits>:
 8006548:	6803      	ldr	r3, [r0, #0]
 800654a:	4602      	mov	r2, r0
 800654c:	f013 0007 	ands.w	r0, r3, #7
 8006550:	d00b      	beq.n	800656a <__lo0bits+0x22>
 8006552:	07d9      	lsls	r1, r3, #31
 8006554:	d421      	bmi.n	800659a <__lo0bits+0x52>
 8006556:	0798      	lsls	r0, r3, #30
 8006558:	bf49      	itett	mi
 800655a:	085b      	lsrmi	r3, r3, #1
 800655c:	089b      	lsrpl	r3, r3, #2
 800655e:	2001      	movmi	r0, #1
 8006560:	6013      	strmi	r3, [r2, #0]
 8006562:	bf5c      	itt	pl
 8006564:	2002      	movpl	r0, #2
 8006566:	6013      	strpl	r3, [r2, #0]
 8006568:	4770      	bx	lr
 800656a:	b299      	uxth	r1, r3
 800656c:	b909      	cbnz	r1, 8006572 <__lo0bits+0x2a>
 800656e:	2010      	movs	r0, #16
 8006570:	0c1b      	lsrs	r3, r3, #16
 8006572:	b2d9      	uxtb	r1, r3
 8006574:	b909      	cbnz	r1, 800657a <__lo0bits+0x32>
 8006576:	3008      	adds	r0, #8
 8006578:	0a1b      	lsrs	r3, r3, #8
 800657a:	0719      	lsls	r1, r3, #28
 800657c:	bf04      	itt	eq
 800657e:	091b      	lsreq	r3, r3, #4
 8006580:	3004      	addeq	r0, #4
 8006582:	0799      	lsls	r1, r3, #30
 8006584:	bf04      	itt	eq
 8006586:	089b      	lsreq	r3, r3, #2
 8006588:	3002      	addeq	r0, #2
 800658a:	07d9      	lsls	r1, r3, #31
 800658c:	d403      	bmi.n	8006596 <__lo0bits+0x4e>
 800658e:	085b      	lsrs	r3, r3, #1
 8006590:	f100 0001 	add.w	r0, r0, #1
 8006594:	d003      	beq.n	800659e <__lo0bits+0x56>
 8006596:	6013      	str	r3, [r2, #0]
 8006598:	4770      	bx	lr
 800659a:	2000      	movs	r0, #0
 800659c:	4770      	bx	lr
 800659e:	2020      	movs	r0, #32
 80065a0:	4770      	bx	lr
	...

080065a4 <__i2b>:
 80065a4:	b510      	push	{r4, lr}
 80065a6:	460c      	mov	r4, r1
 80065a8:	2101      	movs	r1, #1
 80065aa:	f7ff febb 	bl	8006324 <_Balloc>
 80065ae:	4602      	mov	r2, r0
 80065b0:	b928      	cbnz	r0, 80065be <__i2b+0x1a>
 80065b2:	f44f 71a0 	mov.w	r1, #320	; 0x140
 80065b6:	4b04      	ldr	r3, [pc, #16]	; (80065c8 <__i2b+0x24>)
 80065b8:	4804      	ldr	r0, [pc, #16]	; (80065cc <__i2b+0x28>)
 80065ba:	f000 fdef 	bl	800719c <__assert_func>
 80065be:	2301      	movs	r3, #1
 80065c0:	6144      	str	r4, [r0, #20]
 80065c2:	6103      	str	r3, [r0, #16]
 80065c4:	bd10      	pop	{r4, pc}
 80065c6:	bf00      	nop
 80065c8:	08007f90 	.word	0x08007f90
 80065cc:	0800801c 	.word	0x0800801c

080065d0 <__multiply>:
 80065d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065d4:	4691      	mov	r9, r2
 80065d6:	690a      	ldr	r2, [r1, #16]
 80065d8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 80065dc:	460c      	mov	r4, r1
 80065de:	429a      	cmp	r2, r3
 80065e0:	bfbe      	ittt	lt
 80065e2:	460b      	movlt	r3, r1
 80065e4:	464c      	movlt	r4, r9
 80065e6:	4699      	movlt	r9, r3
 80065e8:	6927      	ldr	r7, [r4, #16]
 80065ea:	f8d9 a010 	ldr.w	sl, [r9, #16]
 80065ee:	68a3      	ldr	r3, [r4, #8]
 80065f0:	6861      	ldr	r1, [r4, #4]
 80065f2:	eb07 060a 	add.w	r6, r7, sl
 80065f6:	42b3      	cmp	r3, r6
 80065f8:	b085      	sub	sp, #20
 80065fa:	bfb8      	it	lt
 80065fc:	3101      	addlt	r1, #1
 80065fe:	f7ff fe91 	bl	8006324 <_Balloc>
 8006602:	b930      	cbnz	r0, 8006612 <__multiply+0x42>
 8006604:	4602      	mov	r2, r0
 8006606:	f240 115d 	movw	r1, #349	; 0x15d
 800660a:	4b43      	ldr	r3, [pc, #268]	; (8006718 <__multiply+0x148>)
 800660c:	4843      	ldr	r0, [pc, #268]	; (800671c <__multiply+0x14c>)
 800660e:	f000 fdc5 	bl	800719c <__assert_func>
 8006612:	f100 0514 	add.w	r5, r0, #20
 8006616:	462b      	mov	r3, r5
 8006618:	2200      	movs	r2, #0
 800661a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800661e:	4543      	cmp	r3, r8
 8006620:	d321      	bcc.n	8006666 <__multiply+0x96>
 8006622:	f104 0314 	add.w	r3, r4, #20
 8006626:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800662a:	f109 0314 	add.w	r3, r9, #20
 800662e:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8006632:	9202      	str	r2, [sp, #8]
 8006634:	1b3a      	subs	r2, r7, r4
 8006636:	3a15      	subs	r2, #21
 8006638:	f022 0203 	bic.w	r2, r2, #3
 800663c:	3204      	adds	r2, #4
 800663e:	f104 0115 	add.w	r1, r4, #21
 8006642:	428f      	cmp	r7, r1
 8006644:	bf38      	it	cc
 8006646:	2204      	movcc	r2, #4
 8006648:	9201      	str	r2, [sp, #4]
 800664a:	9a02      	ldr	r2, [sp, #8]
 800664c:	9303      	str	r3, [sp, #12]
 800664e:	429a      	cmp	r2, r3
 8006650:	d80c      	bhi.n	800666c <__multiply+0x9c>
 8006652:	2e00      	cmp	r6, #0
 8006654:	dd03      	ble.n	800665e <__multiply+0x8e>
 8006656:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800665a:	2b00      	cmp	r3, #0
 800665c:	d059      	beq.n	8006712 <__multiply+0x142>
 800665e:	6106      	str	r6, [r0, #16]
 8006660:	b005      	add	sp, #20
 8006662:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006666:	f843 2b04 	str.w	r2, [r3], #4
 800666a:	e7d8      	b.n	800661e <__multiply+0x4e>
 800666c:	f8b3 a000 	ldrh.w	sl, [r3]
 8006670:	f1ba 0f00 	cmp.w	sl, #0
 8006674:	d023      	beq.n	80066be <__multiply+0xee>
 8006676:	46a9      	mov	r9, r5
 8006678:	f04f 0c00 	mov.w	ip, #0
 800667c:	f104 0e14 	add.w	lr, r4, #20
 8006680:	f85e 2b04 	ldr.w	r2, [lr], #4
 8006684:	f8d9 1000 	ldr.w	r1, [r9]
 8006688:	fa1f fb82 	uxth.w	fp, r2
 800668c:	b289      	uxth	r1, r1
 800668e:	fb0a 110b 	mla	r1, sl, fp, r1
 8006692:	4461      	add	r1, ip
 8006694:	f8d9 c000 	ldr.w	ip, [r9]
 8006698:	0c12      	lsrs	r2, r2, #16
 800669a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800669e:	fb0a c202 	mla	r2, sl, r2, ip
 80066a2:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80066a6:	b289      	uxth	r1, r1
 80066a8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80066ac:	4577      	cmp	r7, lr
 80066ae:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80066b2:	f849 1b04 	str.w	r1, [r9], #4
 80066b6:	d8e3      	bhi.n	8006680 <__multiply+0xb0>
 80066b8:	9a01      	ldr	r2, [sp, #4]
 80066ba:	f845 c002 	str.w	ip, [r5, r2]
 80066be:	9a03      	ldr	r2, [sp, #12]
 80066c0:	3304      	adds	r3, #4
 80066c2:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80066c6:	f1b9 0f00 	cmp.w	r9, #0
 80066ca:	d020      	beq.n	800670e <__multiply+0x13e>
 80066cc:	46ae      	mov	lr, r5
 80066ce:	f04f 0a00 	mov.w	sl, #0
 80066d2:	6829      	ldr	r1, [r5, #0]
 80066d4:	f104 0c14 	add.w	ip, r4, #20
 80066d8:	f8bc b000 	ldrh.w	fp, [ip]
 80066dc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 80066e0:	b289      	uxth	r1, r1
 80066e2:	fb09 220b 	mla	r2, r9, fp, r2
 80066e6:	4492      	add	sl, r2
 80066e8:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80066ec:	f84e 1b04 	str.w	r1, [lr], #4
 80066f0:	f85c 2b04 	ldr.w	r2, [ip], #4
 80066f4:	f8be 1000 	ldrh.w	r1, [lr]
 80066f8:	0c12      	lsrs	r2, r2, #16
 80066fa:	fb09 1102 	mla	r1, r9, r2, r1
 80066fe:	4567      	cmp	r7, ip
 8006700:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 8006704:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006708:	d8e6      	bhi.n	80066d8 <__multiply+0x108>
 800670a:	9a01      	ldr	r2, [sp, #4]
 800670c:	50a9      	str	r1, [r5, r2]
 800670e:	3504      	adds	r5, #4
 8006710:	e79b      	b.n	800664a <__multiply+0x7a>
 8006712:	3e01      	subs	r6, #1
 8006714:	e79d      	b.n	8006652 <__multiply+0x82>
 8006716:	bf00      	nop
 8006718:	08007f90 	.word	0x08007f90
 800671c:	0800801c 	.word	0x0800801c

08006720 <__pow5mult>:
 8006720:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006724:	4615      	mov	r5, r2
 8006726:	f012 0203 	ands.w	r2, r2, #3
 800672a:	4606      	mov	r6, r0
 800672c:	460f      	mov	r7, r1
 800672e:	d007      	beq.n	8006740 <__pow5mult+0x20>
 8006730:	4c25      	ldr	r4, [pc, #148]	; (80067c8 <__pow5mult+0xa8>)
 8006732:	3a01      	subs	r2, #1
 8006734:	2300      	movs	r3, #0
 8006736:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800673a:	f7ff fe55 	bl	80063e8 <__multadd>
 800673e:	4607      	mov	r7, r0
 8006740:	10ad      	asrs	r5, r5, #2
 8006742:	d03d      	beq.n	80067c0 <__pow5mult+0xa0>
 8006744:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8006746:	b97c      	cbnz	r4, 8006768 <__pow5mult+0x48>
 8006748:	2010      	movs	r0, #16
 800674a:	f7ff fdb5 	bl	80062b8 <malloc>
 800674e:	4602      	mov	r2, r0
 8006750:	6270      	str	r0, [r6, #36]	; 0x24
 8006752:	b928      	cbnz	r0, 8006760 <__pow5mult+0x40>
 8006754:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8006758:	4b1c      	ldr	r3, [pc, #112]	; (80067cc <__pow5mult+0xac>)
 800675a:	481d      	ldr	r0, [pc, #116]	; (80067d0 <__pow5mult+0xb0>)
 800675c:	f000 fd1e 	bl	800719c <__assert_func>
 8006760:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8006764:	6004      	str	r4, [r0, #0]
 8006766:	60c4      	str	r4, [r0, #12]
 8006768:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800676c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8006770:	b94c      	cbnz	r4, 8006786 <__pow5mult+0x66>
 8006772:	f240 2171 	movw	r1, #625	; 0x271
 8006776:	4630      	mov	r0, r6
 8006778:	f7ff ff14 	bl	80065a4 <__i2b>
 800677c:	2300      	movs	r3, #0
 800677e:	4604      	mov	r4, r0
 8006780:	f8c8 0008 	str.w	r0, [r8, #8]
 8006784:	6003      	str	r3, [r0, #0]
 8006786:	f04f 0900 	mov.w	r9, #0
 800678a:	07eb      	lsls	r3, r5, #31
 800678c:	d50a      	bpl.n	80067a4 <__pow5mult+0x84>
 800678e:	4639      	mov	r1, r7
 8006790:	4622      	mov	r2, r4
 8006792:	4630      	mov	r0, r6
 8006794:	f7ff ff1c 	bl	80065d0 <__multiply>
 8006798:	4680      	mov	r8, r0
 800679a:	4639      	mov	r1, r7
 800679c:	4630      	mov	r0, r6
 800679e:	f7ff fe01 	bl	80063a4 <_Bfree>
 80067a2:	4647      	mov	r7, r8
 80067a4:	106d      	asrs	r5, r5, #1
 80067a6:	d00b      	beq.n	80067c0 <__pow5mult+0xa0>
 80067a8:	6820      	ldr	r0, [r4, #0]
 80067aa:	b938      	cbnz	r0, 80067bc <__pow5mult+0x9c>
 80067ac:	4622      	mov	r2, r4
 80067ae:	4621      	mov	r1, r4
 80067b0:	4630      	mov	r0, r6
 80067b2:	f7ff ff0d 	bl	80065d0 <__multiply>
 80067b6:	6020      	str	r0, [r4, #0]
 80067b8:	f8c0 9000 	str.w	r9, [r0]
 80067bc:	4604      	mov	r4, r0
 80067be:	e7e4      	b.n	800678a <__pow5mult+0x6a>
 80067c0:	4638      	mov	r0, r7
 80067c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067c6:	bf00      	nop
 80067c8:	08008168 	.word	0x08008168
 80067cc:	08007f1e 	.word	0x08007f1e
 80067d0:	0800801c 	.word	0x0800801c

080067d4 <__lshift>:
 80067d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80067d8:	460c      	mov	r4, r1
 80067da:	4607      	mov	r7, r0
 80067dc:	4691      	mov	r9, r2
 80067de:	6923      	ldr	r3, [r4, #16]
 80067e0:	6849      	ldr	r1, [r1, #4]
 80067e2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80067e6:	68a3      	ldr	r3, [r4, #8]
 80067e8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80067ec:	f108 0601 	add.w	r6, r8, #1
 80067f0:	42b3      	cmp	r3, r6
 80067f2:	db0b      	blt.n	800680c <__lshift+0x38>
 80067f4:	4638      	mov	r0, r7
 80067f6:	f7ff fd95 	bl	8006324 <_Balloc>
 80067fa:	4605      	mov	r5, r0
 80067fc:	b948      	cbnz	r0, 8006812 <__lshift+0x3e>
 80067fe:	4602      	mov	r2, r0
 8006800:	f240 11d9 	movw	r1, #473	; 0x1d9
 8006804:	4b29      	ldr	r3, [pc, #164]	; (80068ac <__lshift+0xd8>)
 8006806:	482a      	ldr	r0, [pc, #168]	; (80068b0 <__lshift+0xdc>)
 8006808:	f000 fcc8 	bl	800719c <__assert_func>
 800680c:	3101      	adds	r1, #1
 800680e:	005b      	lsls	r3, r3, #1
 8006810:	e7ee      	b.n	80067f0 <__lshift+0x1c>
 8006812:	2300      	movs	r3, #0
 8006814:	f100 0114 	add.w	r1, r0, #20
 8006818:	f100 0210 	add.w	r2, r0, #16
 800681c:	4618      	mov	r0, r3
 800681e:	4553      	cmp	r3, sl
 8006820:	db37      	blt.n	8006892 <__lshift+0xbe>
 8006822:	6920      	ldr	r0, [r4, #16]
 8006824:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006828:	f104 0314 	add.w	r3, r4, #20
 800682c:	f019 091f 	ands.w	r9, r9, #31
 8006830:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8006834:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8006838:	d02f      	beq.n	800689a <__lshift+0xc6>
 800683a:	468a      	mov	sl, r1
 800683c:	f04f 0c00 	mov.w	ip, #0
 8006840:	f1c9 0e20 	rsb	lr, r9, #32
 8006844:	681a      	ldr	r2, [r3, #0]
 8006846:	fa02 f209 	lsl.w	r2, r2, r9
 800684a:	ea42 020c 	orr.w	r2, r2, ip
 800684e:	f84a 2b04 	str.w	r2, [sl], #4
 8006852:	f853 2b04 	ldr.w	r2, [r3], #4
 8006856:	4298      	cmp	r0, r3
 8006858:	fa22 fc0e 	lsr.w	ip, r2, lr
 800685c:	d8f2      	bhi.n	8006844 <__lshift+0x70>
 800685e:	1b03      	subs	r3, r0, r4
 8006860:	3b15      	subs	r3, #21
 8006862:	f023 0303 	bic.w	r3, r3, #3
 8006866:	3304      	adds	r3, #4
 8006868:	f104 0215 	add.w	r2, r4, #21
 800686c:	4290      	cmp	r0, r2
 800686e:	bf38      	it	cc
 8006870:	2304      	movcc	r3, #4
 8006872:	f841 c003 	str.w	ip, [r1, r3]
 8006876:	f1bc 0f00 	cmp.w	ip, #0
 800687a:	d001      	beq.n	8006880 <__lshift+0xac>
 800687c:	f108 0602 	add.w	r6, r8, #2
 8006880:	3e01      	subs	r6, #1
 8006882:	4638      	mov	r0, r7
 8006884:	4621      	mov	r1, r4
 8006886:	612e      	str	r6, [r5, #16]
 8006888:	f7ff fd8c 	bl	80063a4 <_Bfree>
 800688c:	4628      	mov	r0, r5
 800688e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006892:	f842 0f04 	str.w	r0, [r2, #4]!
 8006896:	3301      	adds	r3, #1
 8006898:	e7c1      	b.n	800681e <__lshift+0x4a>
 800689a:	3904      	subs	r1, #4
 800689c:	f853 2b04 	ldr.w	r2, [r3], #4
 80068a0:	4298      	cmp	r0, r3
 80068a2:	f841 2f04 	str.w	r2, [r1, #4]!
 80068a6:	d8f9      	bhi.n	800689c <__lshift+0xc8>
 80068a8:	e7ea      	b.n	8006880 <__lshift+0xac>
 80068aa:	bf00      	nop
 80068ac:	08007f90 	.word	0x08007f90
 80068b0:	0800801c 	.word	0x0800801c

080068b4 <__mcmp>:
 80068b4:	4603      	mov	r3, r0
 80068b6:	690a      	ldr	r2, [r1, #16]
 80068b8:	6900      	ldr	r0, [r0, #16]
 80068ba:	b530      	push	{r4, r5, lr}
 80068bc:	1a80      	subs	r0, r0, r2
 80068be:	d10d      	bne.n	80068dc <__mcmp+0x28>
 80068c0:	3314      	adds	r3, #20
 80068c2:	3114      	adds	r1, #20
 80068c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80068c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80068cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80068d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80068d4:	4295      	cmp	r5, r2
 80068d6:	d002      	beq.n	80068de <__mcmp+0x2a>
 80068d8:	d304      	bcc.n	80068e4 <__mcmp+0x30>
 80068da:	2001      	movs	r0, #1
 80068dc:	bd30      	pop	{r4, r5, pc}
 80068de:	42a3      	cmp	r3, r4
 80068e0:	d3f4      	bcc.n	80068cc <__mcmp+0x18>
 80068e2:	e7fb      	b.n	80068dc <__mcmp+0x28>
 80068e4:	f04f 30ff 	mov.w	r0, #4294967295
 80068e8:	e7f8      	b.n	80068dc <__mcmp+0x28>
	...

080068ec <__mdiff>:
 80068ec:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80068f0:	460d      	mov	r5, r1
 80068f2:	4607      	mov	r7, r0
 80068f4:	4611      	mov	r1, r2
 80068f6:	4628      	mov	r0, r5
 80068f8:	4614      	mov	r4, r2
 80068fa:	f7ff ffdb 	bl	80068b4 <__mcmp>
 80068fe:	1e06      	subs	r6, r0, #0
 8006900:	d111      	bne.n	8006926 <__mdiff+0x3a>
 8006902:	4631      	mov	r1, r6
 8006904:	4638      	mov	r0, r7
 8006906:	f7ff fd0d 	bl	8006324 <_Balloc>
 800690a:	4602      	mov	r2, r0
 800690c:	b928      	cbnz	r0, 800691a <__mdiff+0x2e>
 800690e:	f240 2132 	movw	r1, #562	; 0x232
 8006912:	4b3a      	ldr	r3, [pc, #232]	; (80069fc <__mdiff+0x110>)
 8006914:	483a      	ldr	r0, [pc, #232]	; (8006a00 <__mdiff+0x114>)
 8006916:	f000 fc41 	bl	800719c <__assert_func>
 800691a:	2301      	movs	r3, #1
 800691c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006920:	4610      	mov	r0, r2
 8006922:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006926:	bfa4      	itt	ge
 8006928:	4623      	movge	r3, r4
 800692a:	462c      	movge	r4, r5
 800692c:	4638      	mov	r0, r7
 800692e:	6861      	ldr	r1, [r4, #4]
 8006930:	bfa6      	itte	ge
 8006932:	461d      	movge	r5, r3
 8006934:	2600      	movge	r6, #0
 8006936:	2601      	movlt	r6, #1
 8006938:	f7ff fcf4 	bl	8006324 <_Balloc>
 800693c:	4602      	mov	r2, r0
 800693e:	b918      	cbnz	r0, 8006948 <__mdiff+0x5c>
 8006940:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006944:	4b2d      	ldr	r3, [pc, #180]	; (80069fc <__mdiff+0x110>)
 8006946:	e7e5      	b.n	8006914 <__mdiff+0x28>
 8006948:	f102 0814 	add.w	r8, r2, #20
 800694c:	46c2      	mov	sl, r8
 800694e:	f04f 0c00 	mov.w	ip, #0
 8006952:	6927      	ldr	r7, [r4, #16]
 8006954:	60c6      	str	r6, [r0, #12]
 8006956:	692e      	ldr	r6, [r5, #16]
 8006958:	f104 0014 	add.w	r0, r4, #20
 800695c:	f105 0914 	add.w	r9, r5, #20
 8006960:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 8006964:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8006968:	3410      	adds	r4, #16
 800696a:	f854 bf04 	ldr.w	fp, [r4, #4]!
 800696e:	f859 3b04 	ldr.w	r3, [r9], #4
 8006972:	fa1f f18b 	uxth.w	r1, fp
 8006976:	448c      	add	ip, r1
 8006978:	b299      	uxth	r1, r3
 800697a:	0c1b      	lsrs	r3, r3, #16
 800697c:	ebac 0101 	sub.w	r1, ip, r1
 8006980:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8006984:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8006988:	b289      	uxth	r1, r1
 800698a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800698e:	454e      	cmp	r6, r9
 8006990:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8006994:	f84a 3b04 	str.w	r3, [sl], #4
 8006998:	d8e7      	bhi.n	800696a <__mdiff+0x7e>
 800699a:	1b73      	subs	r3, r6, r5
 800699c:	3b15      	subs	r3, #21
 800699e:	f023 0303 	bic.w	r3, r3, #3
 80069a2:	3515      	adds	r5, #21
 80069a4:	3304      	adds	r3, #4
 80069a6:	42ae      	cmp	r6, r5
 80069a8:	bf38      	it	cc
 80069aa:	2304      	movcc	r3, #4
 80069ac:	4418      	add	r0, r3
 80069ae:	4443      	add	r3, r8
 80069b0:	461e      	mov	r6, r3
 80069b2:	4605      	mov	r5, r0
 80069b4:	4575      	cmp	r5, lr
 80069b6:	d30e      	bcc.n	80069d6 <__mdiff+0xea>
 80069b8:	f10e 0103 	add.w	r1, lr, #3
 80069bc:	1a09      	subs	r1, r1, r0
 80069be:	f021 0103 	bic.w	r1, r1, #3
 80069c2:	3803      	subs	r0, #3
 80069c4:	4586      	cmp	lr, r0
 80069c6:	bf38      	it	cc
 80069c8:	2100      	movcc	r1, #0
 80069ca:	4419      	add	r1, r3
 80069cc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80069d0:	b18b      	cbz	r3, 80069f6 <__mdiff+0x10a>
 80069d2:	6117      	str	r7, [r2, #16]
 80069d4:	e7a4      	b.n	8006920 <__mdiff+0x34>
 80069d6:	f855 8b04 	ldr.w	r8, [r5], #4
 80069da:	fa1f f188 	uxth.w	r1, r8
 80069de:	4461      	add	r1, ip
 80069e0:	140c      	asrs	r4, r1, #16
 80069e2:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 80069e6:	b289      	uxth	r1, r1
 80069e8:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80069ec:	ea4f 4c24 	mov.w	ip, r4, asr #16
 80069f0:	f846 1b04 	str.w	r1, [r6], #4
 80069f4:	e7de      	b.n	80069b4 <__mdiff+0xc8>
 80069f6:	3f01      	subs	r7, #1
 80069f8:	e7e8      	b.n	80069cc <__mdiff+0xe0>
 80069fa:	bf00      	nop
 80069fc:	08007f90 	.word	0x08007f90
 8006a00:	0800801c 	.word	0x0800801c

08006a04 <__ulp>:
 8006a04:	4b11      	ldr	r3, [pc, #68]	; (8006a4c <__ulp+0x48>)
 8006a06:	400b      	ands	r3, r1
 8006a08:	f1a3 7350 	sub.w	r3, r3, #54525952	; 0x3400000
 8006a0c:	2b00      	cmp	r3, #0
 8006a0e:	dd02      	ble.n	8006a16 <__ulp+0x12>
 8006a10:	2000      	movs	r0, #0
 8006a12:	4619      	mov	r1, r3
 8006a14:	4770      	bx	lr
 8006a16:	425b      	negs	r3, r3
 8006a18:	f1b3 7fa0 	cmp.w	r3, #20971520	; 0x1400000
 8006a1c:	f04f 0000 	mov.w	r0, #0
 8006a20:	f04f 0100 	mov.w	r1, #0
 8006a24:	ea4f 5223 	mov.w	r2, r3, asr #20
 8006a28:	da04      	bge.n	8006a34 <__ulp+0x30>
 8006a2a:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 8006a2e:	fa43 f102 	asr.w	r1, r3, r2
 8006a32:	4770      	bx	lr
 8006a34:	f1a2 0314 	sub.w	r3, r2, #20
 8006a38:	2b1e      	cmp	r3, #30
 8006a3a:	bfd6      	itet	le
 8006a3c:	f04f 4200 	movle.w	r2, #2147483648	; 0x80000000
 8006a40:	2301      	movgt	r3, #1
 8006a42:	fa22 f303 	lsrle.w	r3, r2, r3
 8006a46:	4618      	mov	r0, r3
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	7ff00000 	.word	0x7ff00000

08006a50 <__b2d>:
 8006a50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006a54:	6907      	ldr	r7, [r0, #16]
 8006a56:	f100 0914 	add.w	r9, r0, #20
 8006a5a:	eb09 0787 	add.w	r7, r9, r7, lsl #2
 8006a5e:	f857 6c04 	ldr.w	r6, [r7, #-4]
 8006a62:	f1a7 0804 	sub.w	r8, r7, #4
 8006a66:	4630      	mov	r0, r6
 8006a68:	f7ff fd4e 	bl	8006508 <__hi0bits>
 8006a6c:	f1c0 0320 	rsb	r3, r0, #32
 8006a70:	280a      	cmp	r0, #10
 8006a72:	600b      	str	r3, [r1, #0]
 8006a74:	491f      	ldr	r1, [pc, #124]	; (8006af4 <__b2d+0xa4>)
 8006a76:	dc17      	bgt.n	8006aa8 <__b2d+0x58>
 8006a78:	45c1      	cmp	r9, r8
 8006a7a:	bf28      	it	cs
 8006a7c:	2200      	movcs	r2, #0
 8006a7e:	f1c0 0c0b 	rsb	ip, r0, #11
 8006a82:	fa26 f30c 	lsr.w	r3, r6, ip
 8006a86:	bf38      	it	cc
 8006a88:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006a8c:	ea43 0501 	orr.w	r5, r3, r1
 8006a90:	f100 0315 	add.w	r3, r0, #21
 8006a94:	fa06 f303 	lsl.w	r3, r6, r3
 8006a98:	fa22 f20c 	lsr.w	r2, r2, ip
 8006a9c:	ea43 0402 	orr.w	r4, r3, r2
 8006aa0:	4620      	mov	r0, r4
 8006aa2:	4629      	mov	r1, r5
 8006aa4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aa8:	45c1      	cmp	r9, r8
 8006aaa:	bf2e      	itee	cs
 8006aac:	2200      	movcs	r2, #0
 8006aae:	f857 2c08 	ldrcc.w	r2, [r7, #-8]
 8006ab2:	f1a7 0808 	subcc.w	r8, r7, #8
 8006ab6:	f1b0 030b 	subs.w	r3, r0, #11
 8006aba:	d016      	beq.n	8006aea <__b2d+0x9a>
 8006abc:	f1c3 0720 	rsb	r7, r3, #32
 8006ac0:	fa22 f107 	lsr.w	r1, r2, r7
 8006ac4:	45c8      	cmp	r8, r9
 8006ac6:	fa06 f603 	lsl.w	r6, r6, r3
 8006aca:	ea46 0601 	orr.w	r6, r6, r1
 8006ace:	bf94      	ite	ls
 8006ad0:	2100      	movls	r1, #0
 8006ad2:	f858 1c04 	ldrhi.w	r1, [r8, #-4]
 8006ad6:	f046 557f 	orr.w	r5, r6, #1069547520	; 0x3fc00000
 8006ada:	fa02 f003 	lsl.w	r0, r2, r3
 8006ade:	40f9      	lsrs	r1, r7
 8006ae0:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8006ae4:	ea40 0401 	orr.w	r4, r0, r1
 8006ae8:	e7da      	b.n	8006aa0 <__b2d+0x50>
 8006aea:	4614      	mov	r4, r2
 8006aec:	ea46 0501 	orr.w	r5, r6, r1
 8006af0:	e7d6      	b.n	8006aa0 <__b2d+0x50>
 8006af2:	bf00      	nop
 8006af4:	3ff00000 	.word	0x3ff00000

08006af8 <__d2b>:
 8006af8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006afc:	2101      	movs	r1, #1
 8006afe:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8006b02:	4690      	mov	r8, r2
 8006b04:	461d      	mov	r5, r3
 8006b06:	f7ff fc0d 	bl	8006324 <_Balloc>
 8006b0a:	4604      	mov	r4, r0
 8006b0c:	b930      	cbnz	r0, 8006b1c <__d2b+0x24>
 8006b0e:	4602      	mov	r2, r0
 8006b10:	f240 310a 	movw	r1, #778	; 0x30a
 8006b14:	4b24      	ldr	r3, [pc, #144]	; (8006ba8 <__d2b+0xb0>)
 8006b16:	4825      	ldr	r0, [pc, #148]	; (8006bac <__d2b+0xb4>)
 8006b18:	f000 fb40 	bl	800719c <__assert_func>
 8006b1c:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8006b20:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006b24:	bb2d      	cbnz	r5, 8006b72 <__d2b+0x7a>
 8006b26:	9301      	str	r3, [sp, #4]
 8006b28:	f1b8 0300 	subs.w	r3, r8, #0
 8006b2c:	d026      	beq.n	8006b7c <__d2b+0x84>
 8006b2e:	4668      	mov	r0, sp
 8006b30:	9300      	str	r3, [sp, #0]
 8006b32:	f7ff fd09 	bl	8006548 <__lo0bits>
 8006b36:	9900      	ldr	r1, [sp, #0]
 8006b38:	b1f0      	cbz	r0, 8006b78 <__d2b+0x80>
 8006b3a:	9a01      	ldr	r2, [sp, #4]
 8006b3c:	f1c0 0320 	rsb	r3, r0, #32
 8006b40:	fa02 f303 	lsl.w	r3, r2, r3
 8006b44:	430b      	orrs	r3, r1
 8006b46:	40c2      	lsrs	r2, r0
 8006b48:	6163      	str	r3, [r4, #20]
 8006b4a:	9201      	str	r2, [sp, #4]
 8006b4c:	9b01      	ldr	r3, [sp, #4]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	bf14      	ite	ne
 8006b52:	2102      	movne	r1, #2
 8006b54:	2101      	moveq	r1, #1
 8006b56:	61a3      	str	r3, [r4, #24]
 8006b58:	6121      	str	r1, [r4, #16]
 8006b5a:	b1c5      	cbz	r5, 8006b8e <__d2b+0x96>
 8006b5c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8006b60:	4405      	add	r5, r0
 8006b62:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006b66:	603d      	str	r5, [r7, #0]
 8006b68:	6030      	str	r0, [r6, #0]
 8006b6a:	4620      	mov	r0, r4
 8006b6c:	b002      	add	sp, #8
 8006b6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006b72:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006b76:	e7d6      	b.n	8006b26 <__d2b+0x2e>
 8006b78:	6161      	str	r1, [r4, #20]
 8006b7a:	e7e7      	b.n	8006b4c <__d2b+0x54>
 8006b7c:	a801      	add	r0, sp, #4
 8006b7e:	f7ff fce3 	bl	8006548 <__lo0bits>
 8006b82:	2101      	movs	r1, #1
 8006b84:	9b01      	ldr	r3, [sp, #4]
 8006b86:	6121      	str	r1, [r4, #16]
 8006b88:	6163      	str	r3, [r4, #20]
 8006b8a:	3020      	adds	r0, #32
 8006b8c:	e7e5      	b.n	8006b5a <__d2b+0x62>
 8006b8e:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 8006b92:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006b96:	6038      	str	r0, [r7, #0]
 8006b98:	6918      	ldr	r0, [r3, #16]
 8006b9a:	f7ff fcb5 	bl	8006508 <__hi0bits>
 8006b9e:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 8006ba2:	6031      	str	r1, [r6, #0]
 8006ba4:	e7e1      	b.n	8006b6a <__d2b+0x72>
 8006ba6:	bf00      	nop
 8006ba8:	08007f90 	.word	0x08007f90
 8006bac:	0800801c 	.word	0x0800801c

08006bb0 <__ratio>:
 8006bb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006bb4:	4688      	mov	r8, r1
 8006bb6:	4669      	mov	r1, sp
 8006bb8:	4681      	mov	r9, r0
 8006bba:	f7ff ff49 	bl	8006a50 <__b2d>
 8006bbe:	460f      	mov	r7, r1
 8006bc0:	4604      	mov	r4, r0
 8006bc2:	460d      	mov	r5, r1
 8006bc4:	4640      	mov	r0, r8
 8006bc6:	a901      	add	r1, sp, #4
 8006bc8:	f7ff ff42 	bl	8006a50 <__b2d>
 8006bcc:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006bd0:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8006bd4:	468b      	mov	fp, r1
 8006bd6:	eba3 0c02 	sub.w	ip, r3, r2
 8006bda:	e9dd 3200 	ldrd	r3, r2, [sp]
 8006bde:	1a9b      	subs	r3, r3, r2
 8006be0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	bfd5      	itete	le
 8006be8:	460a      	movle	r2, r1
 8006bea:	462a      	movgt	r2, r5
 8006bec:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8006bf0:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8006bf4:	bfd8      	it	le
 8006bf6:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 8006bfa:	465b      	mov	r3, fp
 8006bfc:	4602      	mov	r2, r0
 8006bfe:	4639      	mov	r1, r7
 8006c00:	4620      	mov	r0, r4
 8006c02:	f7f9 fd93 	bl	800072c <__aeabi_ddiv>
 8006c06:	b003      	add	sp, #12
 8006c08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08006c0c <__copybits>:
 8006c0c:	3901      	subs	r1, #1
 8006c0e:	b570      	push	{r4, r5, r6, lr}
 8006c10:	1149      	asrs	r1, r1, #5
 8006c12:	6914      	ldr	r4, [r2, #16]
 8006c14:	3101      	adds	r1, #1
 8006c16:	f102 0314 	add.w	r3, r2, #20
 8006c1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8006c1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8006c22:	1f05      	subs	r5, r0, #4
 8006c24:	42a3      	cmp	r3, r4
 8006c26:	d30c      	bcc.n	8006c42 <__copybits+0x36>
 8006c28:	1aa3      	subs	r3, r4, r2
 8006c2a:	3b11      	subs	r3, #17
 8006c2c:	f023 0303 	bic.w	r3, r3, #3
 8006c30:	3211      	adds	r2, #17
 8006c32:	42a2      	cmp	r2, r4
 8006c34:	bf88      	it	hi
 8006c36:	2300      	movhi	r3, #0
 8006c38:	4418      	add	r0, r3
 8006c3a:	2300      	movs	r3, #0
 8006c3c:	4288      	cmp	r0, r1
 8006c3e:	d305      	bcc.n	8006c4c <__copybits+0x40>
 8006c40:	bd70      	pop	{r4, r5, r6, pc}
 8006c42:	f853 6b04 	ldr.w	r6, [r3], #4
 8006c46:	f845 6f04 	str.w	r6, [r5, #4]!
 8006c4a:	e7eb      	b.n	8006c24 <__copybits+0x18>
 8006c4c:	f840 3b04 	str.w	r3, [r0], #4
 8006c50:	e7f4      	b.n	8006c3c <__copybits+0x30>

08006c52 <__any_on>:
 8006c52:	f100 0214 	add.w	r2, r0, #20
 8006c56:	6900      	ldr	r0, [r0, #16]
 8006c58:	114b      	asrs	r3, r1, #5
 8006c5a:	4298      	cmp	r0, r3
 8006c5c:	b510      	push	{r4, lr}
 8006c5e:	db11      	blt.n	8006c84 <__any_on+0x32>
 8006c60:	dd0a      	ble.n	8006c78 <__any_on+0x26>
 8006c62:	f011 011f 	ands.w	r1, r1, #31
 8006c66:	d007      	beq.n	8006c78 <__any_on+0x26>
 8006c68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8006c6c:	fa24 f001 	lsr.w	r0, r4, r1
 8006c70:	fa00 f101 	lsl.w	r1, r0, r1
 8006c74:	428c      	cmp	r4, r1
 8006c76:	d10b      	bne.n	8006c90 <__any_on+0x3e>
 8006c78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d803      	bhi.n	8006c88 <__any_on+0x36>
 8006c80:	2000      	movs	r0, #0
 8006c82:	bd10      	pop	{r4, pc}
 8006c84:	4603      	mov	r3, r0
 8006c86:	e7f7      	b.n	8006c78 <__any_on+0x26>
 8006c88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006c8c:	2900      	cmp	r1, #0
 8006c8e:	d0f5      	beq.n	8006c7c <__any_on+0x2a>
 8006c90:	2001      	movs	r0, #1
 8006c92:	e7f6      	b.n	8006c82 <__any_on+0x30>

08006c94 <_calloc_r>:
 8006c94:	b570      	push	{r4, r5, r6, lr}
 8006c96:	fba1 5402 	umull	r5, r4, r1, r2
 8006c9a:	b934      	cbnz	r4, 8006caa <_calloc_r+0x16>
 8006c9c:	4629      	mov	r1, r5
 8006c9e:	f000 f875 	bl	8006d8c <_malloc_r>
 8006ca2:	4606      	mov	r6, r0
 8006ca4:	b928      	cbnz	r0, 8006cb2 <_calloc_r+0x1e>
 8006ca6:	4630      	mov	r0, r6
 8006ca8:	bd70      	pop	{r4, r5, r6, pc}
 8006caa:	220c      	movs	r2, #12
 8006cac:	2600      	movs	r6, #0
 8006cae:	6002      	str	r2, [r0, #0]
 8006cb0:	e7f9      	b.n	8006ca6 <_calloc_r+0x12>
 8006cb2:	462a      	mov	r2, r5
 8006cb4:	4621      	mov	r1, r4
 8006cb6:	f7fc fbf1 	bl	800349c <memset>
 8006cba:	e7f4      	b.n	8006ca6 <_calloc_r+0x12>

08006cbc <_free_r>:
 8006cbc:	b538      	push	{r3, r4, r5, lr}
 8006cbe:	4605      	mov	r5, r0
 8006cc0:	2900      	cmp	r1, #0
 8006cc2:	d040      	beq.n	8006d46 <_free_r+0x8a>
 8006cc4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006cc8:	1f0c      	subs	r4, r1, #4
 8006cca:	2b00      	cmp	r3, #0
 8006ccc:	bfb8      	it	lt
 8006cce:	18e4      	addlt	r4, r4, r3
 8006cd0:	f000 faae 	bl	8007230 <__malloc_lock>
 8006cd4:	4a1c      	ldr	r2, [pc, #112]	; (8006d48 <_free_r+0x8c>)
 8006cd6:	6813      	ldr	r3, [r2, #0]
 8006cd8:	b933      	cbnz	r3, 8006ce8 <_free_r+0x2c>
 8006cda:	6063      	str	r3, [r4, #4]
 8006cdc:	6014      	str	r4, [r2, #0]
 8006cde:	4628      	mov	r0, r5
 8006ce0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ce4:	f000 baaa 	b.w	800723c <__malloc_unlock>
 8006ce8:	42a3      	cmp	r3, r4
 8006cea:	d908      	bls.n	8006cfe <_free_r+0x42>
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	1821      	adds	r1, r4, r0
 8006cf0:	428b      	cmp	r3, r1
 8006cf2:	bf01      	itttt	eq
 8006cf4:	6819      	ldreq	r1, [r3, #0]
 8006cf6:	685b      	ldreq	r3, [r3, #4]
 8006cf8:	1809      	addeq	r1, r1, r0
 8006cfa:	6021      	streq	r1, [r4, #0]
 8006cfc:	e7ed      	b.n	8006cda <_free_r+0x1e>
 8006cfe:	461a      	mov	r2, r3
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	b10b      	cbz	r3, 8006d08 <_free_r+0x4c>
 8006d04:	42a3      	cmp	r3, r4
 8006d06:	d9fa      	bls.n	8006cfe <_free_r+0x42>
 8006d08:	6811      	ldr	r1, [r2, #0]
 8006d0a:	1850      	adds	r0, r2, r1
 8006d0c:	42a0      	cmp	r0, r4
 8006d0e:	d10b      	bne.n	8006d28 <_free_r+0x6c>
 8006d10:	6820      	ldr	r0, [r4, #0]
 8006d12:	4401      	add	r1, r0
 8006d14:	1850      	adds	r0, r2, r1
 8006d16:	4283      	cmp	r3, r0
 8006d18:	6011      	str	r1, [r2, #0]
 8006d1a:	d1e0      	bne.n	8006cde <_free_r+0x22>
 8006d1c:	6818      	ldr	r0, [r3, #0]
 8006d1e:	685b      	ldr	r3, [r3, #4]
 8006d20:	4401      	add	r1, r0
 8006d22:	6011      	str	r1, [r2, #0]
 8006d24:	6053      	str	r3, [r2, #4]
 8006d26:	e7da      	b.n	8006cde <_free_r+0x22>
 8006d28:	d902      	bls.n	8006d30 <_free_r+0x74>
 8006d2a:	230c      	movs	r3, #12
 8006d2c:	602b      	str	r3, [r5, #0]
 8006d2e:	e7d6      	b.n	8006cde <_free_r+0x22>
 8006d30:	6820      	ldr	r0, [r4, #0]
 8006d32:	1821      	adds	r1, r4, r0
 8006d34:	428b      	cmp	r3, r1
 8006d36:	bf01      	itttt	eq
 8006d38:	6819      	ldreq	r1, [r3, #0]
 8006d3a:	685b      	ldreq	r3, [r3, #4]
 8006d3c:	1809      	addeq	r1, r1, r0
 8006d3e:	6021      	streq	r1, [r4, #0]
 8006d40:	6063      	str	r3, [r4, #4]
 8006d42:	6054      	str	r4, [r2, #4]
 8006d44:	e7cb      	b.n	8006cde <_free_r+0x22>
 8006d46:	bd38      	pop	{r3, r4, r5, pc}
 8006d48:	200002b8 	.word	0x200002b8

08006d4c <sbrk_aligned>:
 8006d4c:	b570      	push	{r4, r5, r6, lr}
 8006d4e:	4e0e      	ldr	r6, [pc, #56]	; (8006d88 <sbrk_aligned+0x3c>)
 8006d50:	460c      	mov	r4, r1
 8006d52:	6831      	ldr	r1, [r6, #0]
 8006d54:	4605      	mov	r5, r0
 8006d56:	b911      	cbnz	r1, 8006d5e <sbrk_aligned+0x12>
 8006d58:	f000 f9ee 	bl	8007138 <_sbrk_r>
 8006d5c:	6030      	str	r0, [r6, #0]
 8006d5e:	4621      	mov	r1, r4
 8006d60:	4628      	mov	r0, r5
 8006d62:	f000 f9e9 	bl	8007138 <_sbrk_r>
 8006d66:	1c43      	adds	r3, r0, #1
 8006d68:	d00a      	beq.n	8006d80 <sbrk_aligned+0x34>
 8006d6a:	1cc4      	adds	r4, r0, #3
 8006d6c:	f024 0403 	bic.w	r4, r4, #3
 8006d70:	42a0      	cmp	r0, r4
 8006d72:	d007      	beq.n	8006d84 <sbrk_aligned+0x38>
 8006d74:	1a21      	subs	r1, r4, r0
 8006d76:	4628      	mov	r0, r5
 8006d78:	f000 f9de 	bl	8007138 <_sbrk_r>
 8006d7c:	3001      	adds	r0, #1
 8006d7e:	d101      	bne.n	8006d84 <sbrk_aligned+0x38>
 8006d80:	f04f 34ff 	mov.w	r4, #4294967295
 8006d84:	4620      	mov	r0, r4
 8006d86:	bd70      	pop	{r4, r5, r6, pc}
 8006d88:	200002bc 	.word	0x200002bc

08006d8c <_malloc_r>:
 8006d8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d90:	1ccd      	adds	r5, r1, #3
 8006d92:	f025 0503 	bic.w	r5, r5, #3
 8006d96:	3508      	adds	r5, #8
 8006d98:	2d0c      	cmp	r5, #12
 8006d9a:	bf38      	it	cc
 8006d9c:	250c      	movcc	r5, #12
 8006d9e:	2d00      	cmp	r5, #0
 8006da0:	4607      	mov	r7, r0
 8006da2:	db01      	blt.n	8006da8 <_malloc_r+0x1c>
 8006da4:	42a9      	cmp	r1, r5
 8006da6:	d905      	bls.n	8006db4 <_malloc_r+0x28>
 8006da8:	230c      	movs	r3, #12
 8006daa:	2600      	movs	r6, #0
 8006dac:	603b      	str	r3, [r7, #0]
 8006dae:	4630      	mov	r0, r6
 8006db0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006db4:	4e2e      	ldr	r6, [pc, #184]	; (8006e70 <_malloc_r+0xe4>)
 8006db6:	f000 fa3b 	bl	8007230 <__malloc_lock>
 8006dba:	6833      	ldr	r3, [r6, #0]
 8006dbc:	461c      	mov	r4, r3
 8006dbe:	bb34      	cbnz	r4, 8006e0e <_malloc_r+0x82>
 8006dc0:	4629      	mov	r1, r5
 8006dc2:	4638      	mov	r0, r7
 8006dc4:	f7ff ffc2 	bl	8006d4c <sbrk_aligned>
 8006dc8:	1c43      	adds	r3, r0, #1
 8006dca:	4604      	mov	r4, r0
 8006dcc:	d14d      	bne.n	8006e6a <_malloc_r+0xde>
 8006dce:	6834      	ldr	r4, [r6, #0]
 8006dd0:	4626      	mov	r6, r4
 8006dd2:	2e00      	cmp	r6, #0
 8006dd4:	d140      	bne.n	8006e58 <_malloc_r+0xcc>
 8006dd6:	6823      	ldr	r3, [r4, #0]
 8006dd8:	4631      	mov	r1, r6
 8006dda:	4638      	mov	r0, r7
 8006ddc:	eb04 0803 	add.w	r8, r4, r3
 8006de0:	f000 f9aa 	bl	8007138 <_sbrk_r>
 8006de4:	4580      	cmp	r8, r0
 8006de6:	d13a      	bne.n	8006e5e <_malloc_r+0xd2>
 8006de8:	6821      	ldr	r1, [r4, #0]
 8006dea:	3503      	adds	r5, #3
 8006dec:	1a6d      	subs	r5, r5, r1
 8006dee:	f025 0503 	bic.w	r5, r5, #3
 8006df2:	3508      	adds	r5, #8
 8006df4:	2d0c      	cmp	r5, #12
 8006df6:	bf38      	it	cc
 8006df8:	250c      	movcc	r5, #12
 8006dfa:	4638      	mov	r0, r7
 8006dfc:	4629      	mov	r1, r5
 8006dfe:	f7ff ffa5 	bl	8006d4c <sbrk_aligned>
 8006e02:	3001      	adds	r0, #1
 8006e04:	d02b      	beq.n	8006e5e <_malloc_r+0xd2>
 8006e06:	6823      	ldr	r3, [r4, #0]
 8006e08:	442b      	add	r3, r5
 8006e0a:	6023      	str	r3, [r4, #0]
 8006e0c:	e00e      	b.n	8006e2c <_malloc_r+0xa0>
 8006e0e:	6822      	ldr	r2, [r4, #0]
 8006e10:	1b52      	subs	r2, r2, r5
 8006e12:	d41e      	bmi.n	8006e52 <_malloc_r+0xc6>
 8006e14:	2a0b      	cmp	r2, #11
 8006e16:	d916      	bls.n	8006e46 <_malloc_r+0xba>
 8006e18:	1961      	adds	r1, r4, r5
 8006e1a:	42a3      	cmp	r3, r4
 8006e1c:	6025      	str	r5, [r4, #0]
 8006e1e:	bf18      	it	ne
 8006e20:	6059      	strne	r1, [r3, #4]
 8006e22:	6863      	ldr	r3, [r4, #4]
 8006e24:	bf08      	it	eq
 8006e26:	6031      	streq	r1, [r6, #0]
 8006e28:	5162      	str	r2, [r4, r5]
 8006e2a:	604b      	str	r3, [r1, #4]
 8006e2c:	4638      	mov	r0, r7
 8006e2e:	f104 060b 	add.w	r6, r4, #11
 8006e32:	f000 fa03 	bl	800723c <__malloc_unlock>
 8006e36:	f026 0607 	bic.w	r6, r6, #7
 8006e3a:	1d23      	adds	r3, r4, #4
 8006e3c:	1af2      	subs	r2, r6, r3
 8006e3e:	d0b6      	beq.n	8006dae <_malloc_r+0x22>
 8006e40:	1b9b      	subs	r3, r3, r6
 8006e42:	50a3      	str	r3, [r4, r2]
 8006e44:	e7b3      	b.n	8006dae <_malloc_r+0x22>
 8006e46:	6862      	ldr	r2, [r4, #4]
 8006e48:	42a3      	cmp	r3, r4
 8006e4a:	bf0c      	ite	eq
 8006e4c:	6032      	streq	r2, [r6, #0]
 8006e4e:	605a      	strne	r2, [r3, #4]
 8006e50:	e7ec      	b.n	8006e2c <_malloc_r+0xa0>
 8006e52:	4623      	mov	r3, r4
 8006e54:	6864      	ldr	r4, [r4, #4]
 8006e56:	e7b2      	b.n	8006dbe <_malloc_r+0x32>
 8006e58:	4634      	mov	r4, r6
 8006e5a:	6876      	ldr	r6, [r6, #4]
 8006e5c:	e7b9      	b.n	8006dd2 <_malloc_r+0x46>
 8006e5e:	230c      	movs	r3, #12
 8006e60:	4638      	mov	r0, r7
 8006e62:	603b      	str	r3, [r7, #0]
 8006e64:	f000 f9ea 	bl	800723c <__malloc_unlock>
 8006e68:	e7a1      	b.n	8006dae <_malloc_r+0x22>
 8006e6a:	6025      	str	r5, [r4, #0]
 8006e6c:	e7de      	b.n	8006e2c <_malloc_r+0xa0>
 8006e6e:	bf00      	nop
 8006e70:	200002b8 	.word	0x200002b8

08006e74 <__ssputs_r>:
 8006e74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e78:	688e      	ldr	r6, [r1, #8]
 8006e7a:	4682      	mov	sl, r0
 8006e7c:	429e      	cmp	r6, r3
 8006e7e:	460c      	mov	r4, r1
 8006e80:	4690      	mov	r8, r2
 8006e82:	461f      	mov	r7, r3
 8006e84:	d838      	bhi.n	8006ef8 <__ssputs_r+0x84>
 8006e86:	898a      	ldrh	r2, [r1, #12]
 8006e88:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006e8c:	d032      	beq.n	8006ef4 <__ssputs_r+0x80>
 8006e8e:	6825      	ldr	r5, [r4, #0]
 8006e90:	6909      	ldr	r1, [r1, #16]
 8006e92:	3301      	adds	r3, #1
 8006e94:	eba5 0901 	sub.w	r9, r5, r1
 8006e98:	6965      	ldr	r5, [r4, #20]
 8006e9a:	444b      	add	r3, r9
 8006e9c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006ea0:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006ea4:	106d      	asrs	r5, r5, #1
 8006ea6:	429d      	cmp	r5, r3
 8006ea8:	bf38      	it	cc
 8006eaa:	461d      	movcc	r5, r3
 8006eac:	0553      	lsls	r3, r2, #21
 8006eae:	d531      	bpl.n	8006f14 <__ssputs_r+0xa0>
 8006eb0:	4629      	mov	r1, r5
 8006eb2:	f7ff ff6b 	bl	8006d8c <_malloc_r>
 8006eb6:	4606      	mov	r6, r0
 8006eb8:	b950      	cbnz	r0, 8006ed0 <__ssputs_r+0x5c>
 8006eba:	230c      	movs	r3, #12
 8006ebc:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec0:	f8ca 3000 	str.w	r3, [sl]
 8006ec4:	89a3      	ldrh	r3, [r4, #12]
 8006ec6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006eca:	81a3      	strh	r3, [r4, #12]
 8006ecc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ed0:	464a      	mov	r2, r9
 8006ed2:	6921      	ldr	r1, [r4, #16]
 8006ed4:	f7ff fa18 	bl	8006308 <memcpy>
 8006ed8:	89a3      	ldrh	r3, [r4, #12]
 8006eda:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006ede:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ee2:	81a3      	strh	r3, [r4, #12]
 8006ee4:	6126      	str	r6, [r4, #16]
 8006ee6:	444e      	add	r6, r9
 8006ee8:	6026      	str	r6, [r4, #0]
 8006eea:	463e      	mov	r6, r7
 8006eec:	6165      	str	r5, [r4, #20]
 8006eee:	eba5 0509 	sub.w	r5, r5, r9
 8006ef2:	60a5      	str	r5, [r4, #8]
 8006ef4:	42be      	cmp	r6, r7
 8006ef6:	d900      	bls.n	8006efa <__ssputs_r+0x86>
 8006ef8:	463e      	mov	r6, r7
 8006efa:	4632      	mov	r2, r6
 8006efc:	4641      	mov	r1, r8
 8006efe:	6820      	ldr	r0, [r4, #0]
 8006f00:	f000 f97c 	bl	80071fc <memmove>
 8006f04:	68a3      	ldr	r3, [r4, #8]
 8006f06:	2000      	movs	r0, #0
 8006f08:	1b9b      	subs	r3, r3, r6
 8006f0a:	60a3      	str	r3, [r4, #8]
 8006f0c:	6823      	ldr	r3, [r4, #0]
 8006f0e:	4433      	add	r3, r6
 8006f10:	6023      	str	r3, [r4, #0]
 8006f12:	e7db      	b.n	8006ecc <__ssputs_r+0x58>
 8006f14:	462a      	mov	r2, r5
 8006f16:	f000 f997 	bl	8007248 <_realloc_r>
 8006f1a:	4606      	mov	r6, r0
 8006f1c:	2800      	cmp	r0, #0
 8006f1e:	d1e1      	bne.n	8006ee4 <__ssputs_r+0x70>
 8006f20:	4650      	mov	r0, sl
 8006f22:	6921      	ldr	r1, [r4, #16]
 8006f24:	f7ff feca 	bl	8006cbc <_free_r>
 8006f28:	e7c7      	b.n	8006eba <__ssputs_r+0x46>
	...

08006f2c <_svfiprintf_r>:
 8006f2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f30:	4698      	mov	r8, r3
 8006f32:	898b      	ldrh	r3, [r1, #12]
 8006f34:	4607      	mov	r7, r0
 8006f36:	061b      	lsls	r3, r3, #24
 8006f38:	460d      	mov	r5, r1
 8006f3a:	4614      	mov	r4, r2
 8006f3c:	b09d      	sub	sp, #116	; 0x74
 8006f3e:	d50e      	bpl.n	8006f5e <_svfiprintf_r+0x32>
 8006f40:	690b      	ldr	r3, [r1, #16]
 8006f42:	b963      	cbnz	r3, 8006f5e <_svfiprintf_r+0x32>
 8006f44:	2140      	movs	r1, #64	; 0x40
 8006f46:	f7ff ff21 	bl	8006d8c <_malloc_r>
 8006f4a:	6028      	str	r0, [r5, #0]
 8006f4c:	6128      	str	r0, [r5, #16]
 8006f4e:	b920      	cbnz	r0, 8006f5a <_svfiprintf_r+0x2e>
 8006f50:	230c      	movs	r3, #12
 8006f52:	603b      	str	r3, [r7, #0]
 8006f54:	f04f 30ff 	mov.w	r0, #4294967295
 8006f58:	e0d1      	b.n	80070fe <_svfiprintf_r+0x1d2>
 8006f5a:	2340      	movs	r3, #64	; 0x40
 8006f5c:	616b      	str	r3, [r5, #20]
 8006f5e:	2300      	movs	r3, #0
 8006f60:	9309      	str	r3, [sp, #36]	; 0x24
 8006f62:	2320      	movs	r3, #32
 8006f64:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006f68:	2330      	movs	r3, #48	; 0x30
 8006f6a:	f04f 0901 	mov.w	r9, #1
 8006f6e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006f72:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 8007118 <_svfiprintf_r+0x1ec>
 8006f76:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006f7a:	4623      	mov	r3, r4
 8006f7c:	469a      	mov	sl, r3
 8006f7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006f82:	b10a      	cbz	r2, 8006f88 <_svfiprintf_r+0x5c>
 8006f84:	2a25      	cmp	r2, #37	; 0x25
 8006f86:	d1f9      	bne.n	8006f7c <_svfiprintf_r+0x50>
 8006f88:	ebba 0b04 	subs.w	fp, sl, r4
 8006f8c:	d00b      	beq.n	8006fa6 <_svfiprintf_r+0x7a>
 8006f8e:	465b      	mov	r3, fp
 8006f90:	4622      	mov	r2, r4
 8006f92:	4629      	mov	r1, r5
 8006f94:	4638      	mov	r0, r7
 8006f96:	f7ff ff6d 	bl	8006e74 <__ssputs_r>
 8006f9a:	3001      	adds	r0, #1
 8006f9c:	f000 80aa 	beq.w	80070f4 <_svfiprintf_r+0x1c8>
 8006fa0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006fa2:	445a      	add	r2, fp
 8006fa4:	9209      	str	r2, [sp, #36]	; 0x24
 8006fa6:	f89a 3000 	ldrb.w	r3, [sl]
 8006faa:	2b00      	cmp	r3, #0
 8006fac:	f000 80a2 	beq.w	80070f4 <_svfiprintf_r+0x1c8>
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f04f 32ff 	mov.w	r2, #4294967295
 8006fb6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006fba:	f10a 0a01 	add.w	sl, sl, #1
 8006fbe:	9304      	str	r3, [sp, #16]
 8006fc0:	9307      	str	r3, [sp, #28]
 8006fc2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006fc6:	931a      	str	r3, [sp, #104]	; 0x68
 8006fc8:	4654      	mov	r4, sl
 8006fca:	2205      	movs	r2, #5
 8006fcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006fd0:	4851      	ldr	r0, [pc, #324]	; (8007118 <_svfiprintf_r+0x1ec>)
 8006fd2:	f7ff f98b 	bl	80062ec <memchr>
 8006fd6:	9a04      	ldr	r2, [sp, #16]
 8006fd8:	b9d8      	cbnz	r0, 8007012 <_svfiprintf_r+0xe6>
 8006fda:	06d0      	lsls	r0, r2, #27
 8006fdc:	bf44      	itt	mi
 8006fde:	2320      	movmi	r3, #32
 8006fe0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fe4:	0711      	lsls	r1, r2, #28
 8006fe6:	bf44      	itt	mi
 8006fe8:	232b      	movmi	r3, #43	; 0x2b
 8006fea:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006fee:	f89a 3000 	ldrb.w	r3, [sl]
 8006ff2:	2b2a      	cmp	r3, #42	; 0x2a
 8006ff4:	d015      	beq.n	8007022 <_svfiprintf_r+0xf6>
 8006ff6:	4654      	mov	r4, sl
 8006ff8:	2000      	movs	r0, #0
 8006ffa:	f04f 0c0a 	mov.w	ip, #10
 8006ffe:	9a07      	ldr	r2, [sp, #28]
 8007000:	4621      	mov	r1, r4
 8007002:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007006:	3b30      	subs	r3, #48	; 0x30
 8007008:	2b09      	cmp	r3, #9
 800700a:	d94e      	bls.n	80070aa <_svfiprintf_r+0x17e>
 800700c:	b1b0      	cbz	r0, 800703c <_svfiprintf_r+0x110>
 800700e:	9207      	str	r2, [sp, #28]
 8007010:	e014      	b.n	800703c <_svfiprintf_r+0x110>
 8007012:	eba0 0308 	sub.w	r3, r0, r8
 8007016:	fa09 f303 	lsl.w	r3, r9, r3
 800701a:	4313      	orrs	r3, r2
 800701c:	46a2      	mov	sl, r4
 800701e:	9304      	str	r3, [sp, #16]
 8007020:	e7d2      	b.n	8006fc8 <_svfiprintf_r+0x9c>
 8007022:	9b03      	ldr	r3, [sp, #12]
 8007024:	1d19      	adds	r1, r3, #4
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	9103      	str	r1, [sp, #12]
 800702a:	2b00      	cmp	r3, #0
 800702c:	bfbb      	ittet	lt
 800702e:	425b      	neglt	r3, r3
 8007030:	f042 0202 	orrlt.w	r2, r2, #2
 8007034:	9307      	strge	r3, [sp, #28]
 8007036:	9307      	strlt	r3, [sp, #28]
 8007038:	bfb8      	it	lt
 800703a:	9204      	strlt	r2, [sp, #16]
 800703c:	7823      	ldrb	r3, [r4, #0]
 800703e:	2b2e      	cmp	r3, #46	; 0x2e
 8007040:	d10c      	bne.n	800705c <_svfiprintf_r+0x130>
 8007042:	7863      	ldrb	r3, [r4, #1]
 8007044:	2b2a      	cmp	r3, #42	; 0x2a
 8007046:	d135      	bne.n	80070b4 <_svfiprintf_r+0x188>
 8007048:	9b03      	ldr	r3, [sp, #12]
 800704a:	3402      	adds	r4, #2
 800704c:	1d1a      	adds	r2, r3, #4
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	9203      	str	r2, [sp, #12]
 8007052:	2b00      	cmp	r3, #0
 8007054:	bfb8      	it	lt
 8007056:	f04f 33ff 	movlt.w	r3, #4294967295
 800705a:	9305      	str	r3, [sp, #20]
 800705c:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 800711c <_svfiprintf_r+0x1f0>
 8007060:	2203      	movs	r2, #3
 8007062:	4650      	mov	r0, sl
 8007064:	7821      	ldrb	r1, [r4, #0]
 8007066:	f7ff f941 	bl	80062ec <memchr>
 800706a:	b140      	cbz	r0, 800707e <_svfiprintf_r+0x152>
 800706c:	2340      	movs	r3, #64	; 0x40
 800706e:	eba0 000a 	sub.w	r0, r0, sl
 8007072:	fa03 f000 	lsl.w	r0, r3, r0
 8007076:	9b04      	ldr	r3, [sp, #16]
 8007078:	3401      	adds	r4, #1
 800707a:	4303      	orrs	r3, r0
 800707c:	9304      	str	r3, [sp, #16]
 800707e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007082:	2206      	movs	r2, #6
 8007084:	4826      	ldr	r0, [pc, #152]	; (8007120 <_svfiprintf_r+0x1f4>)
 8007086:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800708a:	f7ff f92f 	bl	80062ec <memchr>
 800708e:	2800      	cmp	r0, #0
 8007090:	d038      	beq.n	8007104 <_svfiprintf_r+0x1d8>
 8007092:	4b24      	ldr	r3, [pc, #144]	; (8007124 <_svfiprintf_r+0x1f8>)
 8007094:	bb1b      	cbnz	r3, 80070de <_svfiprintf_r+0x1b2>
 8007096:	9b03      	ldr	r3, [sp, #12]
 8007098:	3307      	adds	r3, #7
 800709a:	f023 0307 	bic.w	r3, r3, #7
 800709e:	3308      	adds	r3, #8
 80070a0:	9303      	str	r3, [sp, #12]
 80070a2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80070a4:	4433      	add	r3, r6
 80070a6:	9309      	str	r3, [sp, #36]	; 0x24
 80070a8:	e767      	b.n	8006f7a <_svfiprintf_r+0x4e>
 80070aa:	460c      	mov	r4, r1
 80070ac:	2001      	movs	r0, #1
 80070ae:	fb0c 3202 	mla	r2, ip, r2, r3
 80070b2:	e7a5      	b.n	8007000 <_svfiprintf_r+0xd4>
 80070b4:	2300      	movs	r3, #0
 80070b6:	f04f 0c0a 	mov.w	ip, #10
 80070ba:	4619      	mov	r1, r3
 80070bc:	3401      	adds	r4, #1
 80070be:	9305      	str	r3, [sp, #20]
 80070c0:	4620      	mov	r0, r4
 80070c2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80070c6:	3a30      	subs	r2, #48	; 0x30
 80070c8:	2a09      	cmp	r2, #9
 80070ca:	d903      	bls.n	80070d4 <_svfiprintf_r+0x1a8>
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d0c5      	beq.n	800705c <_svfiprintf_r+0x130>
 80070d0:	9105      	str	r1, [sp, #20]
 80070d2:	e7c3      	b.n	800705c <_svfiprintf_r+0x130>
 80070d4:	4604      	mov	r4, r0
 80070d6:	2301      	movs	r3, #1
 80070d8:	fb0c 2101 	mla	r1, ip, r1, r2
 80070dc:	e7f0      	b.n	80070c0 <_svfiprintf_r+0x194>
 80070de:	ab03      	add	r3, sp, #12
 80070e0:	9300      	str	r3, [sp, #0]
 80070e2:	462a      	mov	r2, r5
 80070e4:	4638      	mov	r0, r7
 80070e6:	4b10      	ldr	r3, [pc, #64]	; (8007128 <_svfiprintf_r+0x1fc>)
 80070e8:	a904      	add	r1, sp, #16
 80070ea:	f7fc fa7d 	bl	80035e8 <_printf_float>
 80070ee:	1c42      	adds	r2, r0, #1
 80070f0:	4606      	mov	r6, r0
 80070f2:	d1d6      	bne.n	80070a2 <_svfiprintf_r+0x176>
 80070f4:	89ab      	ldrh	r3, [r5, #12]
 80070f6:	065b      	lsls	r3, r3, #25
 80070f8:	f53f af2c 	bmi.w	8006f54 <_svfiprintf_r+0x28>
 80070fc:	9809      	ldr	r0, [sp, #36]	; 0x24
 80070fe:	b01d      	add	sp, #116	; 0x74
 8007100:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007104:	ab03      	add	r3, sp, #12
 8007106:	9300      	str	r3, [sp, #0]
 8007108:	462a      	mov	r2, r5
 800710a:	4638      	mov	r0, r7
 800710c:	4b06      	ldr	r3, [pc, #24]	; (8007128 <_svfiprintf_r+0x1fc>)
 800710e:	a904      	add	r1, sp, #16
 8007110:	f7fc fd06 	bl	8003b20 <_printf_i>
 8007114:	e7eb      	b.n	80070ee <_svfiprintf_r+0x1c2>
 8007116:	bf00      	nop
 8007118:	08008174 	.word	0x08008174
 800711c:	0800817a 	.word	0x0800817a
 8007120:	0800817e 	.word	0x0800817e
 8007124:	080035e9 	.word	0x080035e9
 8007128:	08006e75 	.word	0x08006e75

0800712c <nan>:
 800712c:	2000      	movs	r0, #0
 800712e:	4901      	ldr	r1, [pc, #4]	; (8007134 <nan+0x8>)
 8007130:	4770      	bx	lr
 8007132:	bf00      	nop
 8007134:	7ff80000 	.word	0x7ff80000

08007138 <_sbrk_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	2300      	movs	r3, #0
 800713c:	4d05      	ldr	r5, [pc, #20]	; (8007154 <_sbrk_r+0x1c>)
 800713e:	4604      	mov	r4, r0
 8007140:	4608      	mov	r0, r1
 8007142:	602b      	str	r3, [r5, #0]
 8007144:	f7fa fafc 	bl	8001740 <_sbrk>
 8007148:	1c43      	adds	r3, r0, #1
 800714a:	d102      	bne.n	8007152 <_sbrk_r+0x1a>
 800714c:	682b      	ldr	r3, [r5, #0]
 800714e:	b103      	cbz	r3, 8007152 <_sbrk_r+0x1a>
 8007150:	6023      	str	r3, [r4, #0]
 8007152:	bd38      	pop	{r3, r4, r5, pc}
 8007154:	200002c0 	.word	0x200002c0

08007158 <strncmp>:
 8007158:	4603      	mov	r3, r0
 800715a:	b510      	push	{r4, lr}
 800715c:	b172      	cbz	r2, 800717c <strncmp+0x24>
 800715e:	3901      	subs	r1, #1
 8007160:	1884      	adds	r4, r0, r2
 8007162:	f813 0b01 	ldrb.w	r0, [r3], #1
 8007166:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800716a:	4290      	cmp	r0, r2
 800716c:	d101      	bne.n	8007172 <strncmp+0x1a>
 800716e:	42a3      	cmp	r3, r4
 8007170:	d101      	bne.n	8007176 <strncmp+0x1e>
 8007172:	1a80      	subs	r0, r0, r2
 8007174:	bd10      	pop	{r4, pc}
 8007176:	2800      	cmp	r0, #0
 8007178:	d1f3      	bne.n	8007162 <strncmp+0xa>
 800717a:	e7fa      	b.n	8007172 <strncmp+0x1a>
 800717c:	4610      	mov	r0, r2
 800717e:	e7f9      	b.n	8007174 <strncmp+0x1c>

08007180 <__ascii_wctomb>:
 8007180:	4603      	mov	r3, r0
 8007182:	4608      	mov	r0, r1
 8007184:	b141      	cbz	r1, 8007198 <__ascii_wctomb+0x18>
 8007186:	2aff      	cmp	r2, #255	; 0xff
 8007188:	d904      	bls.n	8007194 <__ascii_wctomb+0x14>
 800718a:	228a      	movs	r2, #138	; 0x8a
 800718c:	f04f 30ff 	mov.w	r0, #4294967295
 8007190:	601a      	str	r2, [r3, #0]
 8007192:	4770      	bx	lr
 8007194:	2001      	movs	r0, #1
 8007196:	700a      	strb	r2, [r1, #0]
 8007198:	4770      	bx	lr
	...

0800719c <__assert_func>:
 800719c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800719e:	4614      	mov	r4, r2
 80071a0:	461a      	mov	r2, r3
 80071a2:	4b09      	ldr	r3, [pc, #36]	; (80071c8 <__assert_func+0x2c>)
 80071a4:	4605      	mov	r5, r0
 80071a6:	681b      	ldr	r3, [r3, #0]
 80071a8:	68d8      	ldr	r0, [r3, #12]
 80071aa:	b14c      	cbz	r4, 80071c0 <__assert_func+0x24>
 80071ac:	4b07      	ldr	r3, [pc, #28]	; (80071cc <__assert_func+0x30>)
 80071ae:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80071b2:	9100      	str	r1, [sp, #0]
 80071b4:	462b      	mov	r3, r5
 80071b6:	4906      	ldr	r1, [pc, #24]	; (80071d0 <__assert_func+0x34>)
 80071b8:	f000 f80e 	bl	80071d8 <fiprintf>
 80071bc:	f000 fa8a 	bl	80076d4 <abort>
 80071c0:	4b04      	ldr	r3, [pc, #16]	; (80071d4 <__assert_func+0x38>)
 80071c2:	461c      	mov	r4, r3
 80071c4:	e7f3      	b.n	80071ae <__assert_func+0x12>
 80071c6:	bf00      	nop
 80071c8:	2000000c 	.word	0x2000000c
 80071cc:	08008185 	.word	0x08008185
 80071d0:	08008192 	.word	0x08008192
 80071d4:	080081c0 	.word	0x080081c0

080071d8 <fiprintf>:
 80071d8:	b40e      	push	{r1, r2, r3}
 80071da:	b503      	push	{r0, r1, lr}
 80071dc:	4601      	mov	r1, r0
 80071de:	ab03      	add	r3, sp, #12
 80071e0:	4805      	ldr	r0, [pc, #20]	; (80071f8 <fiprintf+0x20>)
 80071e2:	f853 2b04 	ldr.w	r2, [r3], #4
 80071e6:	6800      	ldr	r0, [r0, #0]
 80071e8:	9301      	str	r3, [sp, #4]
 80071ea:	f000 f883 	bl	80072f4 <_vfiprintf_r>
 80071ee:	b002      	add	sp, #8
 80071f0:	f85d eb04 	ldr.w	lr, [sp], #4
 80071f4:	b003      	add	sp, #12
 80071f6:	4770      	bx	lr
 80071f8:	2000000c 	.word	0x2000000c

080071fc <memmove>:
 80071fc:	4288      	cmp	r0, r1
 80071fe:	b510      	push	{r4, lr}
 8007200:	eb01 0402 	add.w	r4, r1, r2
 8007204:	d902      	bls.n	800720c <memmove+0x10>
 8007206:	4284      	cmp	r4, r0
 8007208:	4623      	mov	r3, r4
 800720a:	d807      	bhi.n	800721c <memmove+0x20>
 800720c:	1e43      	subs	r3, r0, #1
 800720e:	42a1      	cmp	r1, r4
 8007210:	d008      	beq.n	8007224 <memmove+0x28>
 8007212:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007216:	f803 2f01 	strb.w	r2, [r3, #1]!
 800721a:	e7f8      	b.n	800720e <memmove+0x12>
 800721c:	4601      	mov	r1, r0
 800721e:	4402      	add	r2, r0
 8007220:	428a      	cmp	r2, r1
 8007222:	d100      	bne.n	8007226 <memmove+0x2a>
 8007224:	bd10      	pop	{r4, pc}
 8007226:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800722a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800722e:	e7f7      	b.n	8007220 <memmove+0x24>

08007230 <__malloc_lock>:
 8007230:	4801      	ldr	r0, [pc, #4]	; (8007238 <__malloc_lock+0x8>)
 8007232:	f000 bc0b 	b.w	8007a4c <__retarget_lock_acquire_recursive>
 8007236:	bf00      	nop
 8007238:	200002c4 	.word	0x200002c4

0800723c <__malloc_unlock>:
 800723c:	4801      	ldr	r0, [pc, #4]	; (8007244 <__malloc_unlock+0x8>)
 800723e:	f000 bc06 	b.w	8007a4e <__retarget_lock_release_recursive>
 8007242:	bf00      	nop
 8007244:	200002c4 	.word	0x200002c4

08007248 <_realloc_r>:
 8007248:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800724c:	4680      	mov	r8, r0
 800724e:	4614      	mov	r4, r2
 8007250:	460e      	mov	r6, r1
 8007252:	b921      	cbnz	r1, 800725e <_realloc_r+0x16>
 8007254:	4611      	mov	r1, r2
 8007256:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800725a:	f7ff bd97 	b.w	8006d8c <_malloc_r>
 800725e:	b92a      	cbnz	r2, 800726c <_realloc_r+0x24>
 8007260:	f7ff fd2c 	bl	8006cbc <_free_r>
 8007264:	4625      	mov	r5, r4
 8007266:	4628      	mov	r0, r5
 8007268:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800726c:	f000 fc56 	bl	8007b1c <_malloc_usable_size_r>
 8007270:	4284      	cmp	r4, r0
 8007272:	4607      	mov	r7, r0
 8007274:	d802      	bhi.n	800727c <_realloc_r+0x34>
 8007276:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800727a:	d812      	bhi.n	80072a2 <_realloc_r+0x5a>
 800727c:	4621      	mov	r1, r4
 800727e:	4640      	mov	r0, r8
 8007280:	f7ff fd84 	bl	8006d8c <_malloc_r>
 8007284:	4605      	mov	r5, r0
 8007286:	2800      	cmp	r0, #0
 8007288:	d0ed      	beq.n	8007266 <_realloc_r+0x1e>
 800728a:	42bc      	cmp	r4, r7
 800728c:	4622      	mov	r2, r4
 800728e:	4631      	mov	r1, r6
 8007290:	bf28      	it	cs
 8007292:	463a      	movcs	r2, r7
 8007294:	f7ff f838 	bl	8006308 <memcpy>
 8007298:	4631      	mov	r1, r6
 800729a:	4640      	mov	r0, r8
 800729c:	f7ff fd0e 	bl	8006cbc <_free_r>
 80072a0:	e7e1      	b.n	8007266 <_realloc_r+0x1e>
 80072a2:	4635      	mov	r5, r6
 80072a4:	e7df      	b.n	8007266 <_realloc_r+0x1e>

080072a6 <__sfputc_r>:
 80072a6:	6893      	ldr	r3, [r2, #8]
 80072a8:	b410      	push	{r4}
 80072aa:	3b01      	subs	r3, #1
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	6093      	str	r3, [r2, #8]
 80072b0:	da07      	bge.n	80072c2 <__sfputc_r+0x1c>
 80072b2:	6994      	ldr	r4, [r2, #24]
 80072b4:	42a3      	cmp	r3, r4
 80072b6:	db01      	blt.n	80072bc <__sfputc_r+0x16>
 80072b8:	290a      	cmp	r1, #10
 80072ba:	d102      	bne.n	80072c2 <__sfputc_r+0x1c>
 80072bc:	bc10      	pop	{r4}
 80072be:	f000 b949 	b.w	8007554 <__swbuf_r>
 80072c2:	6813      	ldr	r3, [r2, #0]
 80072c4:	1c58      	adds	r0, r3, #1
 80072c6:	6010      	str	r0, [r2, #0]
 80072c8:	7019      	strb	r1, [r3, #0]
 80072ca:	4608      	mov	r0, r1
 80072cc:	bc10      	pop	{r4}
 80072ce:	4770      	bx	lr

080072d0 <__sfputs_r>:
 80072d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072d2:	4606      	mov	r6, r0
 80072d4:	460f      	mov	r7, r1
 80072d6:	4614      	mov	r4, r2
 80072d8:	18d5      	adds	r5, r2, r3
 80072da:	42ac      	cmp	r4, r5
 80072dc:	d101      	bne.n	80072e2 <__sfputs_r+0x12>
 80072de:	2000      	movs	r0, #0
 80072e0:	e007      	b.n	80072f2 <__sfputs_r+0x22>
 80072e2:	463a      	mov	r2, r7
 80072e4:	4630      	mov	r0, r6
 80072e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80072ea:	f7ff ffdc 	bl	80072a6 <__sfputc_r>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	d1f3      	bne.n	80072da <__sfputs_r+0xa>
 80072f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080072f4 <_vfiprintf_r>:
 80072f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f8:	460d      	mov	r5, r1
 80072fa:	4614      	mov	r4, r2
 80072fc:	4698      	mov	r8, r3
 80072fe:	4606      	mov	r6, r0
 8007300:	b09d      	sub	sp, #116	; 0x74
 8007302:	b118      	cbz	r0, 800730c <_vfiprintf_r+0x18>
 8007304:	6983      	ldr	r3, [r0, #24]
 8007306:	b90b      	cbnz	r3, 800730c <_vfiprintf_r+0x18>
 8007308:	f000 fb02 	bl	8007910 <__sinit>
 800730c:	4b89      	ldr	r3, [pc, #548]	; (8007534 <_vfiprintf_r+0x240>)
 800730e:	429d      	cmp	r5, r3
 8007310:	d11b      	bne.n	800734a <_vfiprintf_r+0x56>
 8007312:	6875      	ldr	r5, [r6, #4]
 8007314:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007316:	07d9      	lsls	r1, r3, #31
 8007318:	d405      	bmi.n	8007326 <_vfiprintf_r+0x32>
 800731a:	89ab      	ldrh	r3, [r5, #12]
 800731c:	059a      	lsls	r2, r3, #22
 800731e:	d402      	bmi.n	8007326 <_vfiprintf_r+0x32>
 8007320:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007322:	f000 fb93 	bl	8007a4c <__retarget_lock_acquire_recursive>
 8007326:	89ab      	ldrh	r3, [r5, #12]
 8007328:	071b      	lsls	r3, r3, #28
 800732a:	d501      	bpl.n	8007330 <_vfiprintf_r+0x3c>
 800732c:	692b      	ldr	r3, [r5, #16]
 800732e:	b9eb      	cbnz	r3, 800736c <_vfiprintf_r+0x78>
 8007330:	4629      	mov	r1, r5
 8007332:	4630      	mov	r0, r6
 8007334:	f000 f960 	bl	80075f8 <__swsetup_r>
 8007338:	b1c0      	cbz	r0, 800736c <_vfiprintf_r+0x78>
 800733a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800733c:	07dc      	lsls	r4, r3, #31
 800733e:	d50e      	bpl.n	800735e <_vfiprintf_r+0x6a>
 8007340:	f04f 30ff 	mov.w	r0, #4294967295
 8007344:	b01d      	add	sp, #116	; 0x74
 8007346:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800734a:	4b7b      	ldr	r3, [pc, #492]	; (8007538 <_vfiprintf_r+0x244>)
 800734c:	429d      	cmp	r5, r3
 800734e:	d101      	bne.n	8007354 <_vfiprintf_r+0x60>
 8007350:	68b5      	ldr	r5, [r6, #8]
 8007352:	e7df      	b.n	8007314 <_vfiprintf_r+0x20>
 8007354:	4b79      	ldr	r3, [pc, #484]	; (800753c <_vfiprintf_r+0x248>)
 8007356:	429d      	cmp	r5, r3
 8007358:	bf08      	it	eq
 800735a:	68f5      	ldreq	r5, [r6, #12]
 800735c:	e7da      	b.n	8007314 <_vfiprintf_r+0x20>
 800735e:	89ab      	ldrh	r3, [r5, #12]
 8007360:	0598      	lsls	r0, r3, #22
 8007362:	d4ed      	bmi.n	8007340 <_vfiprintf_r+0x4c>
 8007364:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007366:	f000 fb72 	bl	8007a4e <__retarget_lock_release_recursive>
 800736a:	e7e9      	b.n	8007340 <_vfiprintf_r+0x4c>
 800736c:	2300      	movs	r3, #0
 800736e:	9309      	str	r3, [sp, #36]	; 0x24
 8007370:	2320      	movs	r3, #32
 8007372:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007376:	2330      	movs	r3, #48	; 0x30
 8007378:	f04f 0901 	mov.w	r9, #1
 800737c:	f8cd 800c 	str.w	r8, [sp, #12]
 8007380:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8007540 <_vfiprintf_r+0x24c>
 8007384:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007388:	4623      	mov	r3, r4
 800738a:	469a      	mov	sl, r3
 800738c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007390:	b10a      	cbz	r2, 8007396 <_vfiprintf_r+0xa2>
 8007392:	2a25      	cmp	r2, #37	; 0x25
 8007394:	d1f9      	bne.n	800738a <_vfiprintf_r+0x96>
 8007396:	ebba 0b04 	subs.w	fp, sl, r4
 800739a:	d00b      	beq.n	80073b4 <_vfiprintf_r+0xc0>
 800739c:	465b      	mov	r3, fp
 800739e:	4622      	mov	r2, r4
 80073a0:	4629      	mov	r1, r5
 80073a2:	4630      	mov	r0, r6
 80073a4:	f7ff ff94 	bl	80072d0 <__sfputs_r>
 80073a8:	3001      	adds	r0, #1
 80073aa:	f000 80aa 	beq.w	8007502 <_vfiprintf_r+0x20e>
 80073ae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80073b0:	445a      	add	r2, fp
 80073b2:	9209      	str	r2, [sp, #36]	; 0x24
 80073b4:	f89a 3000 	ldrb.w	r3, [sl]
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	f000 80a2 	beq.w	8007502 <_vfiprintf_r+0x20e>
 80073be:	2300      	movs	r3, #0
 80073c0:	f04f 32ff 	mov.w	r2, #4294967295
 80073c4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80073c8:	f10a 0a01 	add.w	sl, sl, #1
 80073cc:	9304      	str	r3, [sp, #16]
 80073ce:	9307      	str	r3, [sp, #28]
 80073d0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80073d4:	931a      	str	r3, [sp, #104]	; 0x68
 80073d6:	4654      	mov	r4, sl
 80073d8:	2205      	movs	r2, #5
 80073da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80073de:	4858      	ldr	r0, [pc, #352]	; (8007540 <_vfiprintf_r+0x24c>)
 80073e0:	f7fe ff84 	bl	80062ec <memchr>
 80073e4:	9a04      	ldr	r2, [sp, #16]
 80073e6:	b9d8      	cbnz	r0, 8007420 <_vfiprintf_r+0x12c>
 80073e8:	06d1      	lsls	r1, r2, #27
 80073ea:	bf44      	itt	mi
 80073ec:	2320      	movmi	r3, #32
 80073ee:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073f2:	0713      	lsls	r3, r2, #28
 80073f4:	bf44      	itt	mi
 80073f6:	232b      	movmi	r3, #43	; 0x2b
 80073f8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80073fc:	f89a 3000 	ldrb.w	r3, [sl]
 8007400:	2b2a      	cmp	r3, #42	; 0x2a
 8007402:	d015      	beq.n	8007430 <_vfiprintf_r+0x13c>
 8007404:	4654      	mov	r4, sl
 8007406:	2000      	movs	r0, #0
 8007408:	f04f 0c0a 	mov.w	ip, #10
 800740c:	9a07      	ldr	r2, [sp, #28]
 800740e:	4621      	mov	r1, r4
 8007410:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007414:	3b30      	subs	r3, #48	; 0x30
 8007416:	2b09      	cmp	r3, #9
 8007418:	d94e      	bls.n	80074b8 <_vfiprintf_r+0x1c4>
 800741a:	b1b0      	cbz	r0, 800744a <_vfiprintf_r+0x156>
 800741c:	9207      	str	r2, [sp, #28]
 800741e:	e014      	b.n	800744a <_vfiprintf_r+0x156>
 8007420:	eba0 0308 	sub.w	r3, r0, r8
 8007424:	fa09 f303 	lsl.w	r3, r9, r3
 8007428:	4313      	orrs	r3, r2
 800742a:	46a2      	mov	sl, r4
 800742c:	9304      	str	r3, [sp, #16]
 800742e:	e7d2      	b.n	80073d6 <_vfiprintf_r+0xe2>
 8007430:	9b03      	ldr	r3, [sp, #12]
 8007432:	1d19      	adds	r1, r3, #4
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	9103      	str	r1, [sp, #12]
 8007438:	2b00      	cmp	r3, #0
 800743a:	bfbb      	ittet	lt
 800743c:	425b      	neglt	r3, r3
 800743e:	f042 0202 	orrlt.w	r2, r2, #2
 8007442:	9307      	strge	r3, [sp, #28]
 8007444:	9307      	strlt	r3, [sp, #28]
 8007446:	bfb8      	it	lt
 8007448:	9204      	strlt	r2, [sp, #16]
 800744a:	7823      	ldrb	r3, [r4, #0]
 800744c:	2b2e      	cmp	r3, #46	; 0x2e
 800744e:	d10c      	bne.n	800746a <_vfiprintf_r+0x176>
 8007450:	7863      	ldrb	r3, [r4, #1]
 8007452:	2b2a      	cmp	r3, #42	; 0x2a
 8007454:	d135      	bne.n	80074c2 <_vfiprintf_r+0x1ce>
 8007456:	9b03      	ldr	r3, [sp, #12]
 8007458:	3402      	adds	r4, #2
 800745a:	1d1a      	adds	r2, r3, #4
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	9203      	str	r2, [sp, #12]
 8007460:	2b00      	cmp	r3, #0
 8007462:	bfb8      	it	lt
 8007464:	f04f 33ff 	movlt.w	r3, #4294967295
 8007468:	9305      	str	r3, [sp, #20]
 800746a:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8007544 <_vfiprintf_r+0x250>
 800746e:	2203      	movs	r2, #3
 8007470:	4650      	mov	r0, sl
 8007472:	7821      	ldrb	r1, [r4, #0]
 8007474:	f7fe ff3a 	bl	80062ec <memchr>
 8007478:	b140      	cbz	r0, 800748c <_vfiprintf_r+0x198>
 800747a:	2340      	movs	r3, #64	; 0x40
 800747c:	eba0 000a 	sub.w	r0, r0, sl
 8007480:	fa03 f000 	lsl.w	r0, r3, r0
 8007484:	9b04      	ldr	r3, [sp, #16]
 8007486:	3401      	adds	r4, #1
 8007488:	4303      	orrs	r3, r0
 800748a:	9304      	str	r3, [sp, #16]
 800748c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007490:	2206      	movs	r2, #6
 8007492:	482d      	ldr	r0, [pc, #180]	; (8007548 <_vfiprintf_r+0x254>)
 8007494:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007498:	f7fe ff28 	bl	80062ec <memchr>
 800749c:	2800      	cmp	r0, #0
 800749e:	d03f      	beq.n	8007520 <_vfiprintf_r+0x22c>
 80074a0:	4b2a      	ldr	r3, [pc, #168]	; (800754c <_vfiprintf_r+0x258>)
 80074a2:	bb1b      	cbnz	r3, 80074ec <_vfiprintf_r+0x1f8>
 80074a4:	9b03      	ldr	r3, [sp, #12]
 80074a6:	3307      	adds	r3, #7
 80074a8:	f023 0307 	bic.w	r3, r3, #7
 80074ac:	3308      	adds	r3, #8
 80074ae:	9303      	str	r3, [sp, #12]
 80074b0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80074b2:	443b      	add	r3, r7
 80074b4:	9309      	str	r3, [sp, #36]	; 0x24
 80074b6:	e767      	b.n	8007388 <_vfiprintf_r+0x94>
 80074b8:	460c      	mov	r4, r1
 80074ba:	2001      	movs	r0, #1
 80074bc:	fb0c 3202 	mla	r2, ip, r2, r3
 80074c0:	e7a5      	b.n	800740e <_vfiprintf_r+0x11a>
 80074c2:	2300      	movs	r3, #0
 80074c4:	f04f 0c0a 	mov.w	ip, #10
 80074c8:	4619      	mov	r1, r3
 80074ca:	3401      	adds	r4, #1
 80074cc:	9305      	str	r3, [sp, #20]
 80074ce:	4620      	mov	r0, r4
 80074d0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80074d4:	3a30      	subs	r2, #48	; 0x30
 80074d6:	2a09      	cmp	r2, #9
 80074d8:	d903      	bls.n	80074e2 <_vfiprintf_r+0x1ee>
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d0c5      	beq.n	800746a <_vfiprintf_r+0x176>
 80074de:	9105      	str	r1, [sp, #20]
 80074e0:	e7c3      	b.n	800746a <_vfiprintf_r+0x176>
 80074e2:	4604      	mov	r4, r0
 80074e4:	2301      	movs	r3, #1
 80074e6:	fb0c 2101 	mla	r1, ip, r1, r2
 80074ea:	e7f0      	b.n	80074ce <_vfiprintf_r+0x1da>
 80074ec:	ab03      	add	r3, sp, #12
 80074ee:	9300      	str	r3, [sp, #0]
 80074f0:	462a      	mov	r2, r5
 80074f2:	4630      	mov	r0, r6
 80074f4:	4b16      	ldr	r3, [pc, #88]	; (8007550 <_vfiprintf_r+0x25c>)
 80074f6:	a904      	add	r1, sp, #16
 80074f8:	f7fc f876 	bl	80035e8 <_printf_float>
 80074fc:	4607      	mov	r7, r0
 80074fe:	1c78      	adds	r0, r7, #1
 8007500:	d1d6      	bne.n	80074b0 <_vfiprintf_r+0x1bc>
 8007502:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007504:	07d9      	lsls	r1, r3, #31
 8007506:	d405      	bmi.n	8007514 <_vfiprintf_r+0x220>
 8007508:	89ab      	ldrh	r3, [r5, #12]
 800750a:	059a      	lsls	r2, r3, #22
 800750c:	d402      	bmi.n	8007514 <_vfiprintf_r+0x220>
 800750e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8007510:	f000 fa9d 	bl	8007a4e <__retarget_lock_release_recursive>
 8007514:	89ab      	ldrh	r3, [r5, #12]
 8007516:	065b      	lsls	r3, r3, #25
 8007518:	f53f af12 	bmi.w	8007340 <_vfiprintf_r+0x4c>
 800751c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800751e:	e711      	b.n	8007344 <_vfiprintf_r+0x50>
 8007520:	ab03      	add	r3, sp, #12
 8007522:	9300      	str	r3, [sp, #0]
 8007524:	462a      	mov	r2, r5
 8007526:	4630      	mov	r0, r6
 8007528:	4b09      	ldr	r3, [pc, #36]	; (8007550 <_vfiprintf_r+0x25c>)
 800752a:	a904      	add	r1, sp, #16
 800752c:	f7fc faf8 	bl	8003b20 <_printf_i>
 8007530:	e7e4      	b.n	80074fc <_vfiprintf_r+0x208>
 8007532:	bf00      	nop
 8007534:	080081e4 	.word	0x080081e4
 8007538:	08008204 	.word	0x08008204
 800753c:	080081c4 	.word	0x080081c4
 8007540:	08008174 	.word	0x08008174
 8007544:	0800817a 	.word	0x0800817a
 8007548:	0800817e 	.word	0x0800817e
 800754c:	080035e9 	.word	0x080035e9
 8007550:	080072d1 	.word	0x080072d1

08007554 <__swbuf_r>:
 8007554:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007556:	460e      	mov	r6, r1
 8007558:	4614      	mov	r4, r2
 800755a:	4605      	mov	r5, r0
 800755c:	b118      	cbz	r0, 8007566 <__swbuf_r+0x12>
 800755e:	6983      	ldr	r3, [r0, #24]
 8007560:	b90b      	cbnz	r3, 8007566 <__swbuf_r+0x12>
 8007562:	f000 f9d5 	bl	8007910 <__sinit>
 8007566:	4b21      	ldr	r3, [pc, #132]	; (80075ec <__swbuf_r+0x98>)
 8007568:	429c      	cmp	r4, r3
 800756a:	d12b      	bne.n	80075c4 <__swbuf_r+0x70>
 800756c:	686c      	ldr	r4, [r5, #4]
 800756e:	69a3      	ldr	r3, [r4, #24]
 8007570:	60a3      	str	r3, [r4, #8]
 8007572:	89a3      	ldrh	r3, [r4, #12]
 8007574:	071a      	lsls	r2, r3, #28
 8007576:	d52f      	bpl.n	80075d8 <__swbuf_r+0x84>
 8007578:	6923      	ldr	r3, [r4, #16]
 800757a:	b36b      	cbz	r3, 80075d8 <__swbuf_r+0x84>
 800757c:	6923      	ldr	r3, [r4, #16]
 800757e:	6820      	ldr	r0, [r4, #0]
 8007580:	b2f6      	uxtb	r6, r6
 8007582:	1ac0      	subs	r0, r0, r3
 8007584:	6963      	ldr	r3, [r4, #20]
 8007586:	4637      	mov	r7, r6
 8007588:	4283      	cmp	r3, r0
 800758a:	dc04      	bgt.n	8007596 <__swbuf_r+0x42>
 800758c:	4621      	mov	r1, r4
 800758e:	4628      	mov	r0, r5
 8007590:	f000 f92a 	bl	80077e8 <_fflush_r>
 8007594:	bb30      	cbnz	r0, 80075e4 <__swbuf_r+0x90>
 8007596:	68a3      	ldr	r3, [r4, #8]
 8007598:	3001      	adds	r0, #1
 800759a:	3b01      	subs	r3, #1
 800759c:	60a3      	str	r3, [r4, #8]
 800759e:	6823      	ldr	r3, [r4, #0]
 80075a0:	1c5a      	adds	r2, r3, #1
 80075a2:	6022      	str	r2, [r4, #0]
 80075a4:	701e      	strb	r6, [r3, #0]
 80075a6:	6963      	ldr	r3, [r4, #20]
 80075a8:	4283      	cmp	r3, r0
 80075aa:	d004      	beq.n	80075b6 <__swbuf_r+0x62>
 80075ac:	89a3      	ldrh	r3, [r4, #12]
 80075ae:	07db      	lsls	r3, r3, #31
 80075b0:	d506      	bpl.n	80075c0 <__swbuf_r+0x6c>
 80075b2:	2e0a      	cmp	r6, #10
 80075b4:	d104      	bne.n	80075c0 <__swbuf_r+0x6c>
 80075b6:	4621      	mov	r1, r4
 80075b8:	4628      	mov	r0, r5
 80075ba:	f000 f915 	bl	80077e8 <_fflush_r>
 80075be:	b988      	cbnz	r0, 80075e4 <__swbuf_r+0x90>
 80075c0:	4638      	mov	r0, r7
 80075c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80075c4:	4b0a      	ldr	r3, [pc, #40]	; (80075f0 <__swbuf_r+0x9c>)
 80075c6:	429c      	cmp	r4, r3
 80075c8:	d101      	bne.n	80075ce <__swbuf_r+0x7a>
 80075ca:	68ac      	ldr	r4, [r5, #8]
 80075cc:	e7cf      	b.n	800756e <__swbuf_r+0x1a>
 80075ce:	4b09      	ldr	r3, [pc, #36]	; (80075f4 <__swbuf_r+0xa0>)
 80075d0:	429c      	cmp	r4, r3
 80075d2:	bf08      	it	eq
 80075d4:	68ec      	ldreq	r4, [r5, #12]
 80075d6:	e7ca      	b.n	800756e <__swbuf_r+0x1a>
 80075d8:	4621      	mov	r1, r4
 80075da:	4628      	mov	r0, r5
 80075dc:	f000 f80c 	bl	80075f8 <__swsetup_r>
 80075e0:	2800      	cmp	r0, #0
 80075e2:	d0cb      	beq.n	800757c <__swbuf_r+0x28>
 80075e4:	f04f 37ff 	mov.w	r7, #4294967295
 80075e8:	e7ea      	b.n	80075c0 <__swbuf_r+0x6c>
 80075ea:	bf00      	nop
 80075ec:	080081e4 	.word	0x080081e4
 80075f0:	08008204 	.word	0x08008204
 80075f4:	080081c4 	.word	0x080081c4

080075f8 <__swsetup_r>:
 80075f8:	4b32      	ldr	r3, [pc, #200]	; (80076c4 <__swsetup_r+0xcc>)
 80075fa:	b570      	push	{r4, r5, r6, lr}
 80075fc:	681d      	ldr	r5, [r3, #0]
 80075fe:	4606      	mov	r6, r0
 8007600:	460c      	mov	r4, r1
 8007602:	b125      	cbz	r5, 800760e <__swsetup_r+0x16>
 8007604:	69ab      	ldr	r3, [r5, #24]
 8007606:	b913      	cbnz	r3, 800760e <__swsetup_r+0x16>
 8007608:	4628      	mov	r0, r5
 800760a:	f000 f981 	bl	8007910 <__sinit>
 800760e:	4b2e      	ldr	r3, [pc, #184]	; (80076c8 <__swsetup_r+0xd0>)
 8007610:	429c      	cmp	r4, r3
 8007612:	d10f      	bne.n	8007634 <__swsetup_r+0x3c>
 8007614:	686c      	ldr	r4, [r5, #4]
 8007616:	89a3      	ldrh	r3, [r4, #12]
 8007618:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800761c:	0719      	lsls	r1, r3, #28
 800761e:	d42c      	bmi.n	800767a <__swsetup_r+0x82>
 8007620:	06dd      	lsls	r5, r3, #27
 8007622:	d411      	bmi.n	8007648 <__swsetup_r+0x50>
 8007624:	2309      	movs	r3, #9
 8007626:	6033      	str	r3, [r6, #0]
 8007628:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800762c:	f04f 30ff 	mov.w	r0, #4294967295
 8007630:	81a3      	strh	r3, [r4, #12]
 8007632:	e03e      	b.n	80076b2 <__swsetup_r+0xba>
 8007634:	4b25      	ldr	r3, [pc, #148]	; (80076cc <__swsetup_r+0xd4>)
 8007636:	429c      	cmp	r4, r3
 8007638:	d101      	bne.n	800763e <__swsetup_r+0x46>
 800763a:	68ac      	ldr	r4, [r5, #8]
 800763c:	e7eb      	b.n	8007616 <__swsetup_r+0x1e>
 800763e:	4b24      	ldr	r3, [pc, #144]	; (80076d0 <__swsetup_r+0xd8>)
 8007640:	429c      	cmp	r4, r3
 8007642:	bf08      	it	eq
 8007644:	68ec      	ldreq	r4, [r5, #12]
 8007646:	e7e6      	b.n	8007616 <__swsetup_r+0x1e>
 8007648:	0758      	lsls	r0, r3, #29
 800764a:	d512      	bpl.n	8007672 <__swsetup_r+0x7a>
 800764c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800764e:	b141      	cbz	r1, 8007662 <__swsetup_r+0x6a>
 8007650:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007654:	4299      	cmp	r1, r3
 8007656:	d002      	beq.n	800765e <__swsetup_r+0x66>
 8007658:	4630      	mov	r0, r6
 800765a:	f7ff fb2f 	bl	8006cbc <_free_r>
 800765e:	2300      	movs	r3, #0
 8007660:	6363      	str	r3, [r4, #52]	; 0x34
 8007662:	89a3      	ldrh	r3, [r4, #12]
 8007664:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007668:	81a3      	strh	r3, [r4, #12]
 800766a:	2300      	movs	r3, #0
 800766c:	6063      	str	r3, [r4, #4]
 800766e:	6923      	ldr	r3, [r4, #16]
 8007670:	6023      	str	r3, [r4, #0]
 8007672:	89a3      	ldrh	r3, [r4, #12]
 8007674:	f043 0308 	orr.w	r3, r3, #8
 8007678:	81a3      	strh	r3, [r4, #12]
 800767a:	6923      	ldr	r3, [r4, #16]
 800767c:	b94b      	cbnz	r3, 8007692 <__swsetup_r+0x9a>
 800767e:	89a3      	ldrh	r3, [r4, #12]
 8007680:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007684:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007688:	d003      	beq.n	8007692 <__swsetup_r+0x9a>
 800768a:	4621      	mov	r1, r4
 800768c:	4630      	mov	r0, r6
 800768e:	f000 fa05 	bl	8007a9c <__smakebuf_r>
 8007692:	89a0      	ldrh	r0, [r4, #12]
 8007694:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007698:	f010 0301 	ands.w	r3, r0, #1
 800769c:	d00a      	beq.n	80076b4 <__swsetup_r+0xbc>
 800769e:	2300      	movs	r3, #0
 80076a0:	60a3      	str	r3, [r4, #8]
 80076a2:	6963      	ldr	r3, [r4, #20]
 80076a4:	425b      	negs	r3, r3
 80076a6:	61a3      	str	r3, [r4, #24]
 80076a8:	6923      	ldr	r3, [r4, #16]
 80076aa:	b943      	cbnz	r3, 80076be <__swsetup_r+0xc6>
 80076ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80076b0:	d1ba      	bne.n	8007628 <__swsetup_r+0x30>
 80076b2:	bd70      	pop	{r4, r5, r6, pc}
 80076b4:	0781      	lsls	r1, r0, #30
 80076b6:	bf58      	it	pl
 80076b8:	6963      	ldrpl	r3, [r4, #20]
 80076ba:	60a3      	str	r3, [r4, #8]
 80076bc:	e7f4      	b.n	80076a8 <__swsetup_r+0xb0>
 80076be:	2000      	movs	r0, #0
 80076c0:	e7f7      	b.n	80076b2 <__swsetup_r+0xba>
 80076c2:	bf00      	nop
 80076c4:	2000000c 	.word	0x2000000c
 80076c8:	080081e4 	.word	0x080081e4
 80076cc:	08008204 	.word	0x08008204
 80076d0:	080081c4 	.word	0x080081c4

080076d4 <abort>:
 80076d4:	2006      	movs	r0, #6
 80076d6:	b508      	push	{r3, lr}
 80076d8:	f000 fa50 	bl	8007b7c <raise>
 80076dc:	2001      	movs	r0, #1
 80076de:	f7f9 ffbb 	bl	8001658 <_exit>
	...

080076e4 <__sflush_r>:
 80076e4:	898a      	ldrh	r2, [r1, #12]
 80076e6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80076e8:	4605      	mov	r5, r0
 80076ea:	0710      	lsls	r0, r2, #28
 80076ec:	460c      	mov	r4, r1
 80076ee:	d457      	bmi.n	80077a0 <__sflush_r+0xbc>
 80076f0:	684b      	ldr	r3, [r1, #4]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	dc04      	bgt.n	8007700 <__sflush_r+0x1c>
 80076f6:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	dc01      	bgt.n	8007700 <__sflush_r+0x1c>
 80076fc:	2000      	movs	r0, #0
 80076fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007700:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8007702:	2e00      	cmp	r6, #0
 8007704:	d0fa      	beq.n	80076fc <__sflush_r+0x18>
 8007706:	2300      	movs	r3, #0
 8007708:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800770c:	682f      	ldr	r7, [r5, #0]
 800770e:	602b      	str	r3, [r5, #0]
 8007710:	d032      	beq.n	8007778 <__sflush_r+0x94>
 8007712:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8007714:	89a3      	ldrh	r3, [r4, #12]
 8007716:	075a      	lsls	r2, r3, #29
 8007718:	d505      	bpl.n	8007726 <__sflush_r+0x42>
 800771a:	6863      	ldr	r3, [r4, #4]
 800771c:	1ac0      	subs	r0, r0, r3
 800771e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007720:	b10b      	cbz	r3, 8007726 <__sflush_r+0x42>
 8007722:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8007724:	1ac0      	subs	r0, r0, r3
 8007726:	2300      	movs	r3, #0
 8007728:	4602      	mov	r2, r0
 800772a:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800772c:	4628      	mov	r0, r5
 800772e:	6a21      	ldr	r1, [r4, #32]
 8007730:	47b0      	blx	r6
 8007732:	1c43      	adds	r3, r0, #1
 8007734:	89a3      	ldrh	r3, [r4, #12]
 8007736:	d106      	bne.n	8007746 <__sflush_r+0x62>
 8007738:	6829      	ldr	r1, [r5, #0]
 800773a:	291d      	cmp	r1, #29
 800773c:	d82c      	bhi.n	8007798 <__sflush_r+0xb4>
 800773e:	4a29      	ldr	r2, [pc, #164]	; (80077e4 <__sflush_r+0x100>)
 8007740:	40ca      	lsrs	r2, r1
 8007742:	07d6      	lsls	r6, r2, #31
 8007744:	d528      	bpl.n	8007798 <__sflush_r+0xb4>
 8007746:	2200      	movs	r2, #0
 8007748:	6062      	str	r2, [r4, #4]
 800774a:	6922      	ldr	r2, [r4, #16]
 800774c:	04d9      	lsls	r1, r3, #19
 800774e:	6022      	str	r2, [r4, #0]
 8007750:	d504      	bpl.n	800775c <__sflush_r+0x78>
 8007752:	1c42      	adds	r2, r0, #1
 8007754:	d101      	bne.n	800775a <__sflush_r+0x76>
 8007756:	682b      	ldr	r3, [r5, #0]
 8007758:	b903      	cbnz	r3, 800775c <__sflush_r+0x78>
 800775a:	6560      	str	r0, [r4, #84]	; 0x54
 800775c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800775e:	602f      	str	r7, [r5, #0]
 8007760:	2900      	cmp	r1, #0
 8007762:	d0cb      	beq.n	80076fc <__sflush_r+0x18>
 8007764:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007768:	4299      	cmp	r1, r3
 800776a:	d002      	beq.n	8007772 <__sflush_r+0x8e>
 800776c:	4628      	mov	r0, r5
 800776e:	f7ff faa5 	bl	8006cbc <_free_r>
 8007772:	2000      	movs	r0, #0
 8007774:	6360      	str	r0, [r4, #52]	; 0x34
 8007776:	e7c2      	b.n	80076fe <__sflush_r+0x1a>
 8007778:	6a21      	ldr	r1, [r4, #32]
 800777a:	2301      	movs	r3, #1
 800777c:	4628      	mov	r0, r5
 800777e:	47b0      	blx	r6
 8007780:	1c41      	adds	r1, r0, #1
 8007782:	d1c7      	bne.n	8007714 <__sflush_r+0x30>
 8007784:	682b      	ldr	r3, [r5, #0]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0c4      	beq.n	8007714 <__sflush_r+0x30>
 800778a:	2b1d      	cmp	r3, #29
 800778c:	d001      	beq.n	8007792 <__sflush_r+0xae>
 800778e:	2b16      	cmp	r3, #22
 8007790:	d101      	bne.n	8007796 <__sflush_r+0xb2>
 8007792:	602f      	str	r7, [r5, #0]
 8007794:	e7b2      	b.n	80076fc <__sflush_r+0x18>
 8007796:	89a3      	ldrh	r3, [r4, #12]
 8007798:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800779c:	81a3      	strh	r3, [r4, #12]
 800779e:	e7ae      	b.n	80076fe <__sflush_r+0x1a>
 80077a0:	690f      	ldr	r7, [r1, #16]
 80077a2:	2f00      	cmp	r7, #0
 80077a4:	d0aa      	beq.n	80076fc <__sflush_r+0x18>
 80077a6:	0793      	lsls	r3, r2, #30
 80077a8:	bf18      	it	ne
 80077aa:	2300      	movne	r3, #0
 80077ac:	680e      	ldr	r6, [r1, #0]
 80077ae:	bf08      	it	eq
 80077b0:	694b      	ldreq	r3, [r1, #20]
 80077b2:	1bf6      	subs	r6, r6, r7
 80077b4:	600f      	str	r7, [r1, #0]
 80077b6:	608b      	str	r3, [r1, #8]
 80077b8:	2e00      	cmp	r6, #0
 80077ba:	dd9f      	ble.n	80076fc <__sflush_r+0x18>
 80077bc:	4633      	mov	r3, r6
 80077be:	463a      	mov	r2, r7
 80077c0:	4628      	mov	r0, r5
 80077c2:	6a21      	ldr	r1, [r4, #32]
 80077c4:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 80077c8:	47e0      	blx	ip
 80077ca:	2800      	cmp	r0, #0
 80077cc:	dc06      	bgt.n	80077dc <__sflush_r+0xf8>
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	f04f 30ff 	mov.w	r0, #4294967295
 80077d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80077d8:	81a3      	strh	r3, [r4, #12]
 80077da:	e790      	b.n	80076fe <__sflush_r+0x1a>
 80077dc:	4407      	add	r7, r0
 80077de:	1a36      	subs	r6, r6, r0
 80077e0:	e7ea      	b.n	80077b8 <__sflush_r+0xd4>
 80077e2:	bf00      	nop
 80077e4:	20400001 	.word	0x20400001

080077e8 <_fflush_r>:
 80077e8:	b538      	push	{r3, r4, r5, lr}
 80077ea:	690b      	ldr	r3, [r1, #16]
 80077ec:	4605      	mov	r5, r0
 80077ee:	460c      	mov	r4, r1
 80077f0:	b913      	cbnz	r3, 80077f8 <_fflush_r+0x10>
 80077f2:	2500      	movs	r5, #0
 80077f4:	4628      	mov	r0, r5
 80077f6:	bd38      	pop	{r3, r4, r5, pc}
 80077f8:	b118      	cbz	r0, 8007802 <_fflush_r+0x1a>
 80077fa:	6983      	ldr	r3, [r0, #24]
 80077fc:	b90b      	cbnz	r3, 8007802 <_fflush_r+0x1a>
 80077fe:	f000 f887 	bl	8007910 <__sinit>
 8007802:	4b14      	ldr	r3, [pc, #80]	; (8007854 <_fflush_r+0x6c>)
 8007804:	429c      	cmp	r4, r3
 8007806:	d11b      	bne.n	8007840 <_fflush_r+0x58>
 8007808:	686c      	ldr	r4, [r5, #4]
 800780a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800780e:	2b00      	cmp	r3, #0
 8007810:	d0ef      	beq.n	80077f2 <_fflush_r+0xa>
 8007812:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8007814:	07d0      	lsls	r0, r2, #31
 8007816:	d404      	bmi.n	8007822 <_fflush_r+0x3a>
 8007818:	0599      	lsls	r1, r3, #22
 800781a:	d402      	bmi.n	8007822 <_fflush_r+0x3a>
 800781c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800781e:	f000 f915 	bl	8007a4c <__retarget_lock_acquire_recursive>
 8007822:	4628      	mov	r0, r5
 8007824:	4621      	mov	r1, r4
 8007826:	f7ff ff5d 	bl	80076e4 <__sflush_r>
 800782a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800782c:	4605      	mov	r5, r0
 800782e:	07da      	lsls	r2, r3, #31
 8007830:	d4e0      	bmi.n	80077f4 <_fflush_r+0xc>
 8007832:	89a3      	ldrh	r3, [r4, #12]
 8007834:	059b      	lsls	r3, r3, #22
 8007836:	d4dd      	bmi.n	80077f4 <_fflush_r+0xc>
 8007838:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800783a:	f000 f908 	bl	8007a4e <__retarget_lock_release_recursive>
 800783e:	e7d9      	b.n	80077f4 <_fflush_r+0xc>
 8007840:	4b05      	ldr	r3, [pc, #20]	; (8007858 <_fflush_r+0x70>)
 8007842:	429c      	cmp	r4, r3
 8007844:	d101      	bne.n	800784a <_fflush_r+0x62>
 8007846:	68ac      	ldr	r4, [r5, #8]
 8007848:	e7df      	b.n	800780a <_fflush_r+0x22>
 800784a:	4b04      	ldr	r3, [pc, #16]	; (800785c <_fflush_r+0x74>)
 800784c:	429c      	cmp	r4, r3
 800784e:	bf08      	it	eq
 8007850:	68ec      	ldreq	r4, [r5, #12]
 8007852:	e7da      	b.n	800780a <_fflush_r+0x22>
 8007854:	080081e4 	.word	0x080081e4
 8007858:	08008204 	.word	0x08008204
 800785c:	080081c4 	.word	0x080081c4

08007860 <std>:
 8007860:	2300      	movs	r3, #0
 8007862:	b510      	push	{r4, lr}
 8007864:	4604      	mov	r4, r0
 8007866:	e9c0 3300 	strd	r3, r3, [r0]
 800786a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800786e:	6083      	str	r3, [r0, #8]
 8007870:	8181      	strh	r1, [r0, #12]
 8007872:	6643      	str	r3, [r0, #100]	; 0x64
 8007874:	81c2      	strh	r2, [r0, #14]
 8007876:	6183      	str	r3, [r0, #24]
 8007878:	4619      	mov	r1, r3
 800787a:	2208      	movs	r2, #8
 800787c:	305c      	adds	r0, #92	; 0x5c
 800787e:	f7fb fe0d 	bl	800349c <memset>
 8007882:	4b05      	ldr	r3, [pc, #20]	; (8007898 <std+0x38>)
 8007884:	6224      	str	r4, [r4, #32]
 8007886:	6263      	str	r3, [r4, #36]	; 0x24
 8007888:	4b04      	ldr	r3, [pc, #16]	; (800789c <std+0x3c>)
 800788a:	62a3      	str	r3, [r4, #40]	; 0x28
 800788c:	4b04      	ldr	r3, [pc, #16]	; (80078a0 <std+0x40>)
 800788e:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007890:	4b04      	ldr	r3, [pc, #16]	; (80078a4 <std+0x44>)
 8007892:	6323      	str	r3, [r4, #48]	; 0x30
 8007894:	bd10      	pop	{r4, pc}
 8007896:	bf00      	nop
 8007898:	08007bb5 	.word	0x08007bb5
 800789c:	08007bd7 	.word	0x08007bd7
 80078a0:	08007c0f 	.word	0x08007c0f
 80078a4:	08007c33 	.word	0x08007c33

080078a8 <_cleanup_r>:
 80078a8:	4901      	ldr	r1, [pc, #4]	; (80078b0 <_cleanup_r+0x8>)
 80078aa:	f000 b8af 	b.w	8007a0c <_fwalk_reent>
 80078ae:	bf00      	nop
 80078b0:	080077e9 	.word	0x080077e9

080078b4 <__sfmoreglue>:
 80078b4:	2268      	movs	r2, #104	; 0x68
 80078b6:	b570      	push	{r4, r5, r6, lr}
 80078b8:	1e4d      	subs	r5, r1, #1
 80078ba:	4355      	muls	r5, r2
 80078bc:	460e      	mov	r6, r1
 80078be:	f105 0174 	add.w	r1, r5, #116	; 0x74
 80078c2:	f7ff fa63 	bl	8006d8c <_malloc_r>
 80078c6:	4604      	mov	r4, r0
 80078c8:	b140      	cbz	r0, 80078dc <__sfmoreglue+0x28>
 80078ca:	2100      	movs	r1, #0
 80078cc:	e9c0 1600 	strd	r1, r6, [r0]
 80078d0:	300c      	adds	r0, #12
 80078d2:	60a0      	str	r0, [r4, #8]
 80078d4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 80078d8:	f7fb fde0 	bl	800349c <memset>
 80078dc:	4620      	mov	r0, r4
 80078de:	bd70      	pop	{r4, r5, r6, pc}

080078e0 <__sfp_lock_acquire>:
 80078e0:	4801      	ldr	r0, [pc, #4]	; (80078e8 <__sfp_lock_acquire+0x8>)
 80078e2:	f000 b8b3 	b.w	8007a4c <__retarget_lock_acquire_recursive>
 80078e6:	bf00      	nop
 80078e8:	200002c5 	.word	0x200002c5

080078ec <__sfp_lock_release>:
 80078ec:	4801      	ldr	r0, [pc, #4]	; (80078f4 <__sfp_lock_release+0x8>)
 80078ee:	f000 b8ae 	b.w	8007a4e <__retarget_lock_release_recursive>
 80078f2:	bf00      	nop
 80078f4:	200002c5 	.word	0x200002c5

080078f8 <__sinit_lock_acquire>:
 80078f8:	4801      	ldr	r0, [pc, #4]	; (8007900 <__sinit_lock_acquire+0x8>)
 80078fa:	f000 b8a7 	b.w	8007a4c <__retarget_lock_acquire_recursive>
 80078fe:	bf00      	nop
 8007900:	200002c6 	.word	0x200002c6

08007904 <__sinit_lock_release>:
 8007904:	4801      	ldr	r0, [pc, #4]	; (800790c <__sinit_lock_release+0x8>)
 8007906:	f000 b8a2 	b.w	8007a4e <__retarget_lock_release_recursive>
 800790a:	bf00      	nop
 800790c:	200002c6 	.word	0x200002c6

08007910 <__sinit>:
 8007910:	b510      	push	{r4, lr}
 8007912:	4604      	mov	r4, r0
 8007914:	f7ff fff0 	bl	80078f8 <__sinit_lock_acquire>
 8007918:	69a3      	ldr	r3, [r4, #24]
 800791a:	b11b      	cbz	r3, 8007924 <__sinit+0x14>
 800791c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007920:	f7ff bff0 	b.w	8007904 <__sinit_lock_release>
 8007924:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8007928:	6523      	str	r3, [r4, #80]	; 0x50
 800792a:	4b13      	ldr	r3, [pc, #76]	; (8007978 <__sinit+0x68>)
 800792c:	4a13      	ldr	r2, [pc, #76]	; (800797c <__sinit+0x6c>)
 800792e:	681b      	ldr	r3, [r3, #0]
 8007930:	62a2      	str	r2, [r4, #40]	; 0x28
 8007932:	42a3      	cmp	r3, r4
 8007934:	bf08      	it	eq
 8007936:	2301      	moveq	r3, #1
 8007938:	4620      	mov	r0, r4
 800793a:	bf08      	it	eq
 800793c:	61a3      	streq	r3, [r4, #24]
 800793e:	f000 f81f 	bl	8007980 <__sfp>
 8007942:	6060      	str	r0, [r4, #4]
 8007944:	4620      	mov	r0, r4
 8007946:	f000 f81b 	bl	8007980 <__sfp>
 800794a:	60a0      	str	r0, [r4, #8]
 800794c:	4620      	mov	r0, r4
 800794e:	f000 f817 	bl	8007980 <__sfp>
 8007952:	2200      	movs	r2, #0
 8007954:	2104      	movs	r1, #4
 8007956:	60e0      	str	r0, [r4, #12]
 8007958:	6860      	ldr	r0, [r4, #4]
 800795a:	f7ff ff81 	bl	8007860 <std>
 800795e:	2201      	movs	r2, #1
 8007960:	2109      	movs	r1, #9
 8007962:	68a0      	ldr	r0, [r4, #8]
 8007964:	f7ff ff7c 	bl	8007860 <std>
 8007968:	2202      	movs	r2, #2
 800796a:	2112      	movs	r1, #18
 800796c:	68e0      	ldr	r0, [r4, #12]
 800796e:	f7ff ff77 	bl	8007860 <std>
 8007972:	2301      	movs	r3, #1
 8007974:	61a3      	str	r3, [r4, #24]
 8007976:	e7d1      	b.n	800791c <__sinit+0xc>
 8007978:	08007d80 	.word	0x08007d80
 800797c:	080078a9 	.word	0x080078a9

08007980 <__sfp>:
 8007980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007982:	4607      	mov	r7, r0
 8007984:	f7ff ffac 	bl	80078e0 <__sfp_lock_acquire>
 8007988:	4b1e      	ldr	r3, [pc, #120]	; (8007a04 <__sfp+0x84>)
 800798a:	681e      	ldr	r6, [r3, #0]
 800798c:	69b3      	ldr	r3, [r6, #24]
 800798e:	b913      	cbnz	r3, 8007996 <__sfp+0x16>
 8007990:	4630      	mov	r0, r6
 8007992:	f7ff ffbd 	bl	8007910 <__sinit>
 8007996:	3648      	adds	r6, #72	; 0x48
 8007998:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800799c:	3b01      	subs	r3, #1
 800799e:	d503      	bpl.n	80079a8 <__sfp+0x28>
 80079a0:	6833      	ldr	r3, [r6, #0]
 80079a2:	b30b      	cbz	r3, 80079e8 <__sfp+0x68>
 80079a4:	6836      	ldr	r6, [r6, #0]
 80079a6:	e7f7      	b.n	8007998 <__sfp+0x18>
 80079a8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80079ac:	b9d5      	cbnz	r5, 80079e4 <__sfp+0x64>
 80079ae:	4b16      	ldr	r3, [pc, #88]	; (8007a08 <__sfp+0x88>)
 80079b0:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80079b4:	60e3      	str	r3, [r4, #12]
 80079b6:	6665      	str	r5, [r4, #100]	; 0x64
 80079b8:	f000 f847 	bl	8007a4a <__retarget_lock_init_recursive>
 80079bc:	f7ff ff96 	bl	80078ec <__sfp_lock_release>
 80079c0:	2208      	movs	r2, #8
 80079c2:	4629      	mov	r1, r5
 80079c4:	e9c4 5501 	strd	r5, r5, [r4, #4]
 80079c8:	e9c4 5504 	strd	r5, r5, [r4, #16]
 80079cc:	6025      	str	r5, [r4, #0]
 80079ce:	61a5      	str	r5, [r4, #24]
 80079d0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 80079d4:	f7fb fd62 	bl	800349c <memset>
 80079d8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 80079dc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 80079e0:	4620      	mov	r0, r4
 80079e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079e4:	3468      	adds	r4, #104	; 0x68
 80079e6:	e7d9      	b.n	800799c <__sfp+0x1c>
 80079e8:	2104      	movs	r1, #4
 80079ea:	4638      	mov	r0, r7
 80079ec:	f7ff ff62 	bl	80078b4 <__sfmoreglue>
 80079f0:	4604      	mov	r4, r0
 80079f2:	6030      	str	r0, [r6, #0]
 80079f4:	2800      	cmp	r0, #0
 80079f6:	d1d5      	bne.n	80079a4 <__sfp+0x24>
 80079f8:	f7ff ff78 	bl	80078ec <__sfp_lock_release>
 80079fc:	230c      	movs	r3, #12
 80079fe:	603b      	str	r3, [r7, #0]
 8007a00:	e7ee      	b.n	80079e0 <__sfp+0x60>
 8007a02:	bf00      	nop
 8007a04:	08007d80 	.word	0x08007d80
 8007a08:	ffff0001 	.word	0xffff0001

08007a0c <_fwalk_reent>:
 8007a0c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007a10:	4606      	mov	r6, r0
 8007a12:	4688      	mov	r8, r1
 8007a14:	2700      	movs	r7, #0
 8007a16:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8007a1a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007a1e:	f1b9 0901 	subs.w	r9, r9, #1
 8007a22:	d505      	bpl.n	8007a30 <_fwalk_reent+0x24>
 8007a24:	6824      	ldr	r4, [r4, #0]
 8007a26:	2c00      	cmp	r4, #0
 8007a28:	d1f7      	bne.n	8007a1a <_fwalk_reent+0xe>
 8007a2a:	4638      	mov	r0, r7
 8007a2c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007a30:	89ab      	ldrh	r3, [r5, #12]
 8007a32:	2b01      	cmp	r3, #1
 8007a34:	d907      	bls.n	8007a46 <_fwalk_reent+0x3a>
 8007a36:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007a3a:	3301      	adds	r3, #1
 8007a3c:	d003      	beq.n	8007a46 <_fwalk_reent+0x3a>
 8007a3e:	4629      	mov	r1, r5
 8007a40:	4630      	mov	r0, r6
 8007a42:	47c0      	blx	r8
 8007a44:	4307      	orrs	r7, r0
 8007a46:	3568      	adds	r5, #104	; 0x68
 8007a48:	e7e9      	b.n	8007a1e <_fwalk_reent+0x12>

08007a4a <__retarget_lock_init_recursive>:
 8007a4a:	4770      	bx	lr

08007a4c <__retarget_lock_acquire_recursive>:
 8007a4c:	4770      	bx	lr

08007a4e <__retarget_lock_release_recursive>:
 8007a4e:	4770      	bx	lr

08007a50 <__swhatbuf_r>:
 8007a50:	b570      	push	{r4, r5, r6, lr}
 8007a52:	460e      	mov	r6, r1
 8007a54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007a58:	4614      	mov	r4, r2
 8007a5a:	2900      	cmp	r1, #0
 8007a5c:	461d      	mov	r5, r3
 8007a5e:	b096      	sub	sp, #88	; 0x58
 8007a60:	da08      	bge.n	8007a74 <__swhatbuf_r+0x24>
 8007a62:	2200      	movs	r2, #0
 8007a64:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8007a68:	602a      	str	r2, [r5, #0]
 8007a6a:	061a      	lsls	r2, r3, #24
 8007a6c:	d410      	bmi.n	8007a90 <__swhatbuf_r+0x40>
 8007a6e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007a72:	e00e      	b.n	8007a92 <__swhatbuf_r+0x42>
 8007a74:	466a      	mov	r2, sp
 8007a76:	f000 f903 	bl	8007c80 <_fstat_r>
 8007a7a:	2800      	cmp	r0, #0
 8007a7c:	dbf1      	blt.n	8007a62 <__swhatbuf_r+0x12>
 8007a7e:	9a01      	ldr	r2, [sp, #4]
 8007a80:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007a84:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007a88:	425a      	negs	r2, r3
 8007a8a:	415a      	adcs	r2, r3
 8007a8c:	602a      	str	r2, [r5, #0]
 8007a8e:	e7ee      	b.n	8007a6e <__swhatbuf_r+0x1e>
 8007a90:	2340      	movs	r3, #64	; 0x40
 8007a92:	2000      	movs	r0, #0
 8007a94:	6023      	str	r3, [r4, #0]
 8007a96:	b016      	add	sp, #88	; 0x58
 8007a98:	bd70      	pop	{r4, r5, r6, pc}
	...

08007a9c <__smakebuf_r>:
 8007a9c:	898b      	ldrh	r3, [r1, #12]
 8007a9e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007aa0:	079d      	lsls	r5, r3, #30
 8007aa2:	4606      	mov	r6, r0
 8007aa4:	460c      	mov	r4, r1
 8007aa6:	d507      	bpl.n	8007ab8 <__smakebuf_r+0x1c>
 8007aa8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007aac:	6023      	str	r3, [r4, #0]
 8007aae:	6123      	str	r3, [r4, #16]
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	6163      	str	r3, [r4, #20]
 8007ab4:	b002      	add	sp, #8
 8007ab6:	bd70      	pop	{r4, r5, r6, pc}
 8007ab8:	466a      	mov	r2, sp
 8007aba:	ab01      	add	r3, sp, #4
 8007abc:	f7ff ffc8 	bl	8007a50 <__swhatbuf_r>
 8007ac0:	9900      	ldr	r1, [sp, #0]
 8007ac2:	4605      	mov	r5, r0
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	f7ff f961 	bl	8006d8c <_malloc_r>
 8007aca:	b948      	cbnz	r0, 8007ae0 <__smakebuf_r+0x44>
 8007acc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ad0:	059a      	lsls	r2, r3, #22
 8007ad2:	d4ef      	bmi.n	8007ab4 <__smakebuf_r+0x18>
 8007ad4:	f023 0303 	bic.w	r3, r3, #3
 8007ad8:	f043 0302 	orr.w	r3, r3, #2
 8007adc:	81a3      	strh	r3, [r4, #12]
 8007ade:	e7e3      	b.n	8007aa8 <__smakebuf_r+0xc>
 8007ae0:	4b0d      	ldr	r3, [pc, #52]	; (8007b18 <__smakebuf_r+0x7c>)
 8007ae2:	62b3      	str	r3, [r6, #40]	; 0x28
 8007ae4:	89a3      	ldrh	r3, [r4, #12]
 8007ae6:	6020      	str	r0, [r4, #0]
 8007ae8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007aec:	81a3      	strh	r3, [r4, #12]
 8007aee:	9b00      	ldr	r3, [sp, #0]
 8007af0:	6120      	str	r0, [r4, #16]
 8007af2:	6163      	str	r3, [r4, #20]
 8007af4:	9b01      	ldr	r3, [sp, #4]
 8007af6:	b15b      	cbz	r3, 8007b10 <__smakebuf_r+0x74>
 8007af8:	4630      	mov	r0, r6
 8007afa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007afe:	f000 f8d1 	bl	8007ca4 <_isatty_r>
 8007b02:	b128      	cbz	r0, 8007b10 <__smakebuf_r+0x74>
 8007b04:	89a3      	ldrh	r3, [r4, #12]
 8007b06:	f023 0303 	bic.w	r3, r3, #3
 8007b0a:	f043 0301 	orr.w	r3, r3, #1
 8007b0e:	81a3      	strh	r3, [r4, #12]
 8007b10:	89a0      	ldrh	r0, [r4, #12]
 8007b12:	4305      	orrs	r5, r0
 8007b14:	81a5      	strh	r5, [r4, #12]
 8007b16:	e7cd      	b.n	8007ab4 <__smakebuf_r+0x18>
 8007b18:	080078a9 	.word	0x080078a9

08007b1c <_malloc_usable_size_r>:
 8007b1c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007b20:	1f18      	subs	r0, r3, #4
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	bfbc      	itt	lt
 8007b26:	580b      	ldrlt	r3, [r1, r0]
 8007b28:	18c0      	addlt	r0, r0, r3
 8007b2a:	4770      	bx	lr

08007b2c <_raise_r>:
 8007b2c:	291f      	cmp	r1, #31
 8007b2e:	b538      	push	{r3, r4, r5, lr}
 8007b30:	4604      	mov	r4, r0
 8007b32:	460d      	mov	r5, r1
 8007b34:	d904      	bls.n	8007b40 <_raise_r+0x14>
 8007b36:	2316      	movs	r3, #22
 8007b38:	6003      	str	r3, [r0, #0]
 8007b3a:	f04f 30ff 	mov.w	r0, #4294967295
 8007b3e:	bd38      	pop	{r3, r4, r5, pc}
 8007b40:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007b42:	b112      	cbz	r2, 8007b4a <_raise_r+0x1e>
 8007b44:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b48:	b94b      	cbnz	r3, 8007b5e <_raise_r+0x32>
 8007b4a:	4620      	mov	r0, r4
 8007b4c:	f000 f830 	bl	8007bb0 <_getpid_r>
 8007b50:	462a      	mov	r2, r5
 8007b52:	4601      	mov	r1, r0
 8007b54:	4620      	mov	r0, r4
 8007b56:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b5a:	f000 b817 	b.w	8007b8c <_kill_r>
 8007b5e:	2b01      	cmp	r3, #1
 8007b60:	d00a      	beq.n	8007b78 <_raise_r+0x4c>
 8007b62:	1c59      	adds	r1, r3, #1
 8007b64:	d103      	bne.n	8007b6e <_raise_r+0x42>
 8007b66:	2316      	movs	r3, #22
 8007b68:	6003      	str	r3, [r0, #0]
 8007b6a:	2001      	movs	r0, #1
 8007b6c:	e7e7      	b.n	8007b3e <_raise_r+0x12>
 8007b6e:	2400      	movs	r4, #0
 8007b70:	4628      	mov	r0, r5
 8007b72:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007b76:	4798      	blx	r3
 8007b78:	2000      	movs	r0, #0
 8007b7a:	e7e0      	b.n	8007b3e <_raise_r+0x12>

08007b7c <raise>:
 8007b7c:	4b02      	ldr	r3, [pc, #8]	; (8007b88 <raise+0xc>)
 8007b7e:	4601      	mov	r1, r0
 8007b80:	6818      	ldr	r0, [r3, #0]
 8007b82:	f7ff bfd3 	b.w	8007b2c <_raise_r>
 8007b86:	bf00      	nop
 8007b88:	2000000c 	.word	0x2000000c

08007b8c <_kill_r>:
 8007b8c:	b538      	push	{r3, r4, r5, lr}
 8007b8e:	2300      	movs	r3, #0
 8007b90:	4d06      	ldr	r5, [pc, #24]	; (8007bac <_kill_r+0x20>)
 8007b92:	4604      	mov	r4, r0
 8007b94:	4608      	mov	r0, r1
 8007b96:	4611      	mov	r1, r2
 8007b98:	602b      	str	r3, [r5, #0]
 8007b9a:	f7f9 fd4d 	bl	8001638 <_kill>
 8007b9e:	1c43      	adds	r3, r0, #1
 8007ba0:	d102      	bne.n	8007ba8 <_kill_r+0x1c>
 8007ba2:	682b      	ldr	r3, [r5, #0]
 8007ba4:	b103      	cbz	r3, 8007ba8 <_kill_r+0x1c>
 8007ba6:	6023      	str	r3, [r4, #0]
 8007ba8:	bd38      	pop	{r3, r4, r5, pc}
 8007baa:	bf00      	nop
 8007bac:	200002c0 	.word	0x200002c0

08007bb0 <_getpid_r>:
 8007bb0:	f7f9 bd3b 	b.w	800162a <_getpid>

08007bb4 <__sread>:
 8007bb4:	b510      	push	{r4, lr}
 8007bb6:	460c      	mov	r4, r1
 8007bb8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bbc:	f000 f894 	bl	8007ce8 <_read_r>
 8007bc0:	2800      	cmp	r0, #0
 8007bc2:	bfab      	itete	ge
 8007bc4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007bc6:	89a3      	ldrhlt	r3, [r4, #12]
 8007bc8:	181b      	addge	r3, r3, r0
 8007bca:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007bce:	bfac      	ite	ge
 8007bd0:	6563      	strge	r3, [r4, #84]	; 0x54
 8007bd2:	81a3      	strhlt	r3, [r4, #12]
 8007bd4:	bd10      	pop	{r4, pc}

08007bd6 <__swrite>:
 8007bd6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007bda:	461f      	mov	r7, r3
 8007bdc:	898b      	ldrh	r3, [r1, #12]
 8007bde:	4605      	mov	r5, r0
 8007be0:	05db      	lsls	r3, r3, #23
 8007be2:	460c      	mov	r4, r1
 8007be4:	4616      	mov	r6, r2
 8007be6:	d505      	bpl.n	8007bf4 <__swrite+0x1e>
 8007be8:	2302      	movs	r3, #2
 8007bea:	2200      	movs	r2, #0
 8007bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bf0:	f000 f868 	bl	8007cc4 <_lseek_r>
 8007bf4:	89a3      	ldrh	r3, [r4, #12]
 8007bf6:	4632      	mov	r2, r6
 8007bf8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007bfc:	81a3      	strh	r3, [r4, #12]
 8007bfe:	4628      	mov	r0, r5
 8007c00:	463b      	mov	r3, r7
 8007c02:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c06:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007c0a:	f000 b817 	b.w	8007c3c <_write_r>

08007c0e <__sseek>:
 8007c0e:	b510      	push	{r4, lr}
 8007c10:	460c      	mov	r4, r1
 8007c12:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c16:	f000 f855 	bl	8007cc4 <_lseek_r>
 8007c1a:	1c43      	adds	r3, r0, #1
 8007c1c:	89a3      	ldrh	r3, [r4, #12]
 8007c1e:	bf15      	itete	ne
 8007c20:	6560      	strne	r0, [r4, #84]	; 0x54
 8007c22:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007c26:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007c2a:	81a3      	strheq	r3, [r4, #12]
 8007c2c:	bf18      	it	ne
 8007c2e:	81a3      	strhne	r3, [r4, #12]
 8007c30:	bd10      	pop	{r4, pc}

08007c32 <__sclose>:
 8007c32:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007c36:	f000 b813 	b.w	8007c60 <_close_r>
	...

08007c3c <_write_r>:
 8007c3c:	b538      	push	{r3, r4, r5, lr}
 8007c3e:	4604      	mov	r4, r0
 8007c40:	4608      	mov	r0, r1
 8007c42:	4611      	mov	r1, r2
 8007c44:	2200      	movs	r2, #0
 8007c46:	4d05      	ldr	r5, [pc, #20]	; (8007c5c <_write_r+0x20>)
 8007c48:	602a      	str	r2, [r5, #0]
 8007c4a:	461a      	mov	r2, r3
 8007c4c:	f7f9 fd2b 	bl	80016a6 <_write>
 8007c50:	1c43      	adds	r3, r0, #1
 8007c52:	d102      	bne.n	8007c5a <_write_r+0x1e>
 8007c54:	682b      	ldr	r3, [r5, #0]
 8007c56:	b103      	cbz	r3, 8007c5a <_write_r+0x1e>
 8007c58:	6023      	str	r3, [r4, #0]
 8007c5a:	bd38      	pop	{r3, r4, r5, pc}
 8007c5c:	200002c0 	.word	0x200002c0

08007c60 <_close_r>:
 8007c60:	b538      	push	{r3, r4, r5, lr}
 8007c62:	2300      	movs	r3, #0
 8007c64:	4d05      	ldr	r5, [pc, #20]	; (8007c7c <_close_r+0x1c>)
 8007c66:	4604      	mov	r4, r0
 8007c68:	4608      	mov	r0, r1
 8007c6a:	602b      	str	r3, [r5, #0]
 8007c6c:	f7f9 fd37 	bl	80016de <_close>
 8007c70:	1c43      	adds	r3, r0, #1
 8007c72:	d102      	bne.n	8007c7a <_close_r+0x1a>
 8007c74:	682b      	ldr	r3, [r5, #0]
 8007c76:	b103      	cbz	r3, 8007c7a <_close_r+0x1a>
 8007c78:	6023      	str	r3, [r4, #0]
 8007c7a:	bd38      	pop	{r3, r4, r5, pc}
 8007c7c:	200002c0 	.word	0x200002c0

08007c80 <_fstat_r>:
 8007c80:	b538      	push	{r3, r4, r5, lr}
 8007c82:	2300      	movs	r3, #0
 8007c84:	4d06      	ldr	r5, [pc, #24]	; (8007ca0 <_fstat_r+0x20>)
 8007c86:	4604      	mov	r4, r0
 8007c88:	4608      	mov	r0, r1
 8007c8a:	4611      	mov	r1, r2
 8007c8c:	602b      	str	r3, [r5, #0]
 8007c8e:	f7f9 fd31 	bl	80016f4 <_fstat>
 8007c92:	1c43      	adds	r3, r0, #1
 8007c94:	d102      	bne.n	8007c9c <_fstat_r+0x1c>
 8007c96:	682b      	ldr	r3, [r5, #0]
 8007c98:	b103      	cbz	r3, 8007c9c <_fstat_r+0x1c>
 8007c9a:	6023      	str	r3, [r4, #0]
 8007c9c:	bd38      	pop	{r3, r4, r5, pc}
 8007c9e:	bf00      	nop
 8007ca0:	200002c0 	.word	0x200002c0

08007ca4 <_isatty_r>:
 8007ca4:	b538      	push	{r3, r4, r5, lr}
 8007ca6:	2300      	movs	r3, #0
 8007ca8:	4d05      	ldr	r5, [pc, #20]	; (8007cc0 <_isatty_r+0x1c>)
 8007caa:	4604      	mov	r4, r0
 8007cac:	4608      	mov	r0, r1
 8007cae:	602b      	str	r3, [r5, #0]
 8007cb0:	f7f9 fd2f 	bl	8001712 <_isatty>
 8007cb4:	1c43      	adds	r3, r0, #1
 8007cb6:	d102      	bne.n	8007cbe <_isatty_r+0x1a>
 8007cb8:	682b      	ldr	r3, [r5, #0]
 8007cba:	b103      	cbz	r3, 8007cbe <_isatty_r+0x1a>
 8007cbc:	6023      	str	r3, [r4, #0]
 8007cbe:	bd38      	pop	{r3, r4, r5, pc}
 8007cc0:	200002c0 	.word	0x200002c0

08007cc4 <_lseek_r>:
 8007cc4:	b538      	push	{r3, r4, r5, lr}
 8007cc6:	4604      	mov	r4, r0
 8007cc8:	4608      	mov	r0, r1
 8007cca:	4611      	mov	r1, r2
 8007ccc:	2200      	movs	r2, #0
 8007cce:	4d05      	ldr	r5, [pc, #20]	; (8007ce4 <_lseek_r+0x20>)
 8007cd0:	602a      	str	r2, [r5, #0]
 8007cd2:	461a      	mov	r2, r3
 8007cd4:	f7f9 fd27 	bl	8001726 <_lseek>
 8007cd8:	1c43      	adds	r3, r0, #1
 8007cda:	d102      	bne.n	8007ce2 <_lseek_r+0x1e>
 8007cdc:	682b      	ldr	r3, [r5, #0]
 8007cde:	b103      	cbz	r3, 8007ce2 <_lseek_r+0x1e>
 8007ce0:	6023      	str	r3, [r4, #0]
 8007ce2:	bd38      	pop	{r3, r4, r5, pc}
 8007ce4:	200002c0 	.word	0x200002c0

08007ce8 <_read_r>:
 8007ce8:	b538      	push	{r3, r4, r5, lr}
 8007cea:	4604      	mov	r4, r0
 8007cec:	4608      	mov	r0, r1
 8007cee:	4611      	mov	r1, r2
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	4d05      	ldr	r5, [pc, #20]	; (8007d08 <_read_r+0x20>)
 8007cf4:	602a      	str	r2, [r5, #0]
 8007cf6:	461a      	mov	r2, r3
 8007cf8:	f7f9 fcb8 	bl	800166c <_read>
 8007cfc:	1c43      	adds	r3, r0, #1
 8007cfe:	d102      	bne.n	8007d06 <_read_r+0x1e>
 8007d00:	682b      	ldr	r3, [r5, #0]
 8007d02:	b103      	cbz	r3, 8007d06 <_read_r+0x1e>
 8007d04:	6023      	str	r3, [r4, #0]
 8007d06:	bd38      	pop	{r3, r4, r5, pc}
 8007d08:	200002c0 	.word	0x200002c0

08007d0c <_init>:
 8007d0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d0e:	bf00      	nop
 8007d10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d12:	bc08      	pop	{r3}
 8007d14:	469e      	mov	lr, r3
 8007d16:	4770      	bx	lr

08007d18 <_fini>:
 8007d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d1a:	bf00      	nop
 8007d1c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d1e:	bc08      	pop	{r3}
 8007d20:	469e      	mov	lr, r3
 8007d22:	4770      	bx	lr
